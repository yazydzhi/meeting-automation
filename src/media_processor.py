"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö Google Drive.
–í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import re
import json
import hashlib
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from datetime import datetime
import subprocess
import shutil

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
VIDEO_EXTENSIONS = {
    '.mp4', '.mkv', '.webm', '.avi', '.mov', '.wmv', '.flv', '.m4v',
    '.3gp', '.ogv', '.ts', '.mts', '.m2ts', '.vob', '.asf', '.rm'
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
AUDIO_EXTENSIONS = {'.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'}

# –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
STATUS_EXTENSION = '.processed_media'


class MediaProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö Google Drive."""
    
    def __init__(self, drive_service, output_format: str = 'mp3'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –º–µ–¥–∏–∞.
        
        Args:
            drive_service: –°–µ—Ä–≤–∏—Å Google Drive API
            output_format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ç–æ—á–∫–∏)
        """
        self.drive_service = drive_service
        self.output_format = output_format
        self.processed_files = set()
        self.errors = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        if not self._check_ffmpeg():
            # –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            print("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            self.ffmpeg_available = False
        else:
            self.ffmpeg_available = True
    
    def _check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—É—â–µ–º PATH
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, check=True, timeout=5)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
            pass
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ffmpeg –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        ffmpeg_paths = [
            "/opt/homebrew/bin/ffmpeg",  # macOS Homebrew
            "/usr/local/bin/ffmpeg",     # macOS/Linux
            "/usr/bin/ffmpeg",           # Linux
            "/opt/homebrew/bin/ffmpeg",  # Apple Silicon Homebrew
        ]
        
        for path in ffmpeg_paths:
            if os.path.exists(path):
                try:
                    result = subprocess.run([path, '-version'], 
                                          capture_output=True, check=True, timeout=5)
                    return True
                except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                    continue
        
        return False
    
    def _get_file_hash(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        hash_md5 = hashlib.md5()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception:
            return ""
    
    def _is_already_processed(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """
        status_file = file_path + STATUS_EXTENSION
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
        if not os.path.exists(status_file):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
        try:
            with open(status_file, 'r', encoding='utf-8') as f:
                status_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
            current_hash = self._get_file_hash(file_path)
            if status_data.get('file_hash') != current_hash:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            current_size = os.path.getsize(file_path)
            if status_data.get('file_size') != current_size:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            current_mtime = os.path.getmtime(file_path)
            if status_data.get('file_mtime') != current_mtime:
                return False
            
            return True
            
        except Exception:
            return False
    
    def _create_status_file(self, file_path: str, output_path: str, 
                           processing_time: float) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            processing_time: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        status_file = file_path + STATUS_EXTENSION
        
        status_data = {
            'original_file': file_path,
            'output_file': output_path,
            'file_hash': self._get_file_hash(file_path),
            'file_size': os.path.getsize(file_path),
            'file_mtime': os.path.getmtime(file_path),
            'output_size': os.path.getsize(output_path) if os.path.exists(output_path) else 0,
            'processing_time': processing_time,
            'processed_at': datetime.now().isoformat(),
            'ffmpeg_version': self._get_ffmpeg_version()
        }
        
        try:
            with open(status_file, 'w', encoding='utf-8') as f:
                json.dump(status_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞: {e}")
    
    def _get_ffmpeg_version(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é ffmpeg."""
        if not hasattr(self, 'ffmpeg_available') or not self.ffmpeg_available:
            return "Not available"
        
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, check=True)
            lines = result.stdout.split('\n')
            if lines:
                return lines[0].strip()
        except Exception:
            pass
        return "Unknown"
    
    def _generate_output_filename(self, input_path: str, folder_name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.
        
        Args:
            input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            
        Returns:
            –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        input_dir = os.path.dirname(input_path)
        input_name = os.path.splitext(os.path.basename(input_path))[0]
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_folder_name = re.sub(r'[<>:"/\\|?*]', '_', folder_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_name = f"{safe_folder_name}_compressed.{self.output_format}"
        output_path = os.path.join(input_dir, output_name)
        
        return output_path
    
    def convert_video_to_audio(self, input_path: str, output_path: str, 
                              quality: str = 'medium') -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ –∞—É–¥–∏–æ.
        
        Args:
            input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            quality: –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ (low, medium, high)
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg
        if not hasattr(self, 'ffmpeg_available') or not self.ffmpeg_available:
            print("‚ö†Ô∏è ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_settings = {
            'low': {'bitrate': '64k', 'sample_rate': '22050'},
            'medium': {'bitrate': '128k', 'sample_rate': '44100'},
            'high': {'bitrate': '256k', 'sample_rate': '48000'}
        }
        
        settings = quality_settings.get(quality, quality_settings['medium'])
        
        # –ö–æ–º–∞–Ω–¥–∞ ffmpeg
        cmd = [
            'ffmpeg',
            '-i', input_path,
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-acodec', 'libmp3lame' if self.output_format == 'mp3' else 'aac',
            '-ab', settings['bitrate'],
            '-ar', settings['sample_rate'],
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            output_path
        ]
        
        try:
            print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {os.path.basename(input_path)} –≤ –∞—É–¥–∏–æ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {os.path.basename(output_path)}")
                return True
            else:
                error_msg = f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr}"
                print(f"‚ùå {error_msg}")
                self.errors.append(error_msg)
                return False
                
        except subprocess.TimeoutExpired:
            error_msg = "–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)"
            print(f"‚ùå {error_msg}")
            self.errors.append(error_msg)
            return False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.errors.append(error_msg)
            return False
    
    def process_folder(self, folder_id: str, folder_name: str, 
                      local_path: str = None) -> Dict[str, any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É Google Drive –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            folder_id: ID –ø–∞–ø–∫–∏ –≤ Google Drive
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        results = {
            'folder_id': folder_id,
            'folder_name': folder_name,
            'files_found': 0,
            'files_processed': 0,
            'files_skipped': 0,
            'errors': [],
            'processing_time': 0
        }
        
        start_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            query = f"'{folder_id}' in parents and trashed=false"
            files_result = self.drive_service.files().list(
                q=query,
                fields="files(id,name,mimeType,size,webViewLink)"
            ).execute()
            
            files = files_result.get('files', [])
            video_files = [f for f in files if self._is_video_file(f)]
            
            results['files_found'] = len(video_files)
            print(f"üìÅ –ü–∞–ø–∫–∞: {folder_name}")
            print(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
            
            for video_file in video_files:
                try:
                    file_name = video_file['name']
                    file_id = video_file['id']
                    file_size = int(video_file.get('size', 0))
                    
                    print(f"  üé¨ {file_name} ({self._format_size(file_size)})")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                    if local_path:
                        local_file_path = os.path.join(local_path, file_name)
                        if os.path.exists(local_file_path):
                            if self._is_already_processed(local_file_path):
                                print(f"    ‚è≠Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                                results['files_skipped'] += 1
                                continue
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            output_path = self._generate_output_filename(
                                local_file_path, folder_name
                            )
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                            if self.convert_video_to_audio(local_file_path, output_path):
                                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª
                                processing_time = (datetime.now() - start_time).total_seconds()
                                self._create_status_file(local_file_path, output_path, processing_time)
                                results['files_processed'] += 1
                                
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ Google Drive
                                self._upload_audio_to_drive(output_path, folder_id, folder_name)
                            else:
                                results['errors'].append(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {file_name}")
                        else:
                            print(f"    ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_file_path}")
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Drive
                        print(f"    ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                        results['files_skipped'] += 1
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {video_file.get('name', 'Unknown')}: {e}"
                    print(f"    ‚ùå {error_msg}")
                    results['errors'].append(error_msg)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}"
            print(f"‚ùå {error_msg}")
            results['errors'].append(error_msg)
        
        results['processing_time'] = (datetime.now() - start_time).total_seconds()
        results['errors'].extend(self.errors)
        
        return results
    
    def _is_video_file(self, file_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ."""
        mime_type = file_info.get('mimeType', '')
        name = file_info.get('name', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø
        if mime_type.startswith('video/'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        file_ext = os.path.splitext(name)[1].lower()
        return file_ext in VIDEO_EXTENSIONS
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ."""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def _upload_audio_to_drive(self, audio_path: str, folder_id: str, folder_name: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ Google Drive.
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            folder_id: ID –ø–∞–ø–∫–∏ –≤ Google Drive
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if not os.path.exists(audio_path):
                print(f"    ‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type = 'audio/mpeg' if audio_path.endswith('.mp3') else 'audio/mp4'
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            file_metadata = {
                'name': os.path.basename(audio_path),
                'parents': [folder_id],
                'description': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ "{folder_name}"'
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            media = self.drive_service.files().create(
                body=file_metadata,
                media_body=audio_path,
                fields='id,name,webViewLink'
            ).execute()
            
            file_id = media.get('id')
            web_link = media.get('webViewLink', '')
            
            print(f"    ‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Drive: {os.path.basename(audio_path)}")
            print(f"       üîó {web_link}")
            
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –≤ Drive: {e}"
            print(f"    ‚ùå {error_msg}")
            self.errors.append(error_msg)
            return False


def get_media_processor(drive_service, output_format: str = 'mp3') -> MediaProcessor:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MediaProcessor.
    
    Args:
        drive_service: –°–µ—Ä–≤–∏—Å Google Drive API
        output_format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä MediaProcessor
        
    Raises:
        RuntimeError: –ï—Å–ª–∏ ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return MediaProcessor(drive_service, output_format)
