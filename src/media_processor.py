#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (—Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ)
"""

import os
import sys
import logging
import subprocess
from pathlib import Path
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from src.config_manager import ConfigManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class MediaProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, config_manager: ConfigManager, logger: Optional[logging.Logger] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config_manager = config_manager
        self.logger = logger or logging.getLogger(__name__)
        self._setup_ffmpeg_path()
    
    def _setup_ffmpeg_path(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–ª—è ffmpeg."""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PATH –¥–ª—è ffmpeg
            env = os.environ.copy()
            
            # –î–ª—è macOS (homebrew)
            if os.path.exists('/opt/homebrew/bin/ffmpeg'):
                os.environ['PATH'] = f"/opt/homebrew/bin:{os.environ.get('PATH', '')}"
                self.logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ ffmpeg (homebrew)")
            # –î–ª—è Linux
            elif os.path.exists('/usr/bin/ffmpeg'):
                os.environ['PATH'] = f"/usr/bin:{os.environ.get('PATH', '')}"
                self.logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ ffmpeg (Linux)")
            else:
                self.logger.info("‚ö†Ô∏è –ü—É—Ç—å –∫ ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π PATH")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PATH –¥–ª—è ffmpeg: {e}")
    
    def process_media(self, quality: str = 'medium') -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ ('low', 'medium', 'high')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
            
            results = []
            total_processed = 0
            total_synced = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = self._process_folder_media(personal_folder, "personal", quality)
                    results.append(personal_result)
                    total_processed += personal_result.get("processed", 0)
                    total_synced += personal_result.get("synced", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = self._process_folder_media(work_folder, "work", quality)
                    results.append(work_result)
                    total_processed += work_result.get("processed", 0)
                    total_synced += work_result.get("synced", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, –Ω–∞–π–¥–µ–Ω–æ {total_synced}")
            return {
                "status": "success", 
                "message": "Media processing completed", 
                "results": results,
                "total_processed": total_processed,
                "total_synced": total_synced
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    def _process_folder_media(self, folder_path: str, account_type: str, quality: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            result = {"status": "success", "folder": folder_path, "processed": 0, "synced": 0, "total_videos": 0, "processed_files": []}
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
            video_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ —Å–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã
                        if 'compressed' not in file.lower():
                            video_files.append(os.path.join(root, file))
            
            if not video_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return result
            
            self.logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            result["total_videos"] = len(video_files)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            for video_file in video_files:
                try:
                    self.logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {os.path.basename(video_file)}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                    base_name = os.path.splitext(video_file)[0]
                    compressed_video = f"{base_name}_compressed.mp4"
                    compressed_audio = f"{base_name}_compressed.mp3"
                    
                    # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
                    video_success = self._compress_video(video_file, compressed_video, quality)
                    if video_success:
                        result["processed"] += 1
                        result["processed_files"].append({
                            "file": os.path.basename(video_file),
                            "type": "video",
                            "output": compressed_video,
                            "status": "success"
                        })
                        self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {os.path.basename(compressed_video)}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
                    audio_success = self._extract_audio(video_file, compressed_audio)
                    if audio_success:
                        result["processed"] += 1
                        result["processed_files"].append({
                            "file": os.path.basename(video_file),
                            "type": "audio",
                            "output": compressed_audio,
                            "status": "success"
                        })
                        self.logger.info(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {os.path.basename(compressed_audio)}")
                    
                    result["synced"] += 1
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {os.path.basename(video_file)}: {e}")
                    result["processed_files"].append({
                        "file": os.path.basename(video_file),
                        "type": "error",
                        "error": str(e),
                        "status": "error"
                    })
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"status": "error", "folder": folder_path, "processed": 0, "synced": 0, "total_videos": 0, "processed_files": [], "error": str(e)}
    
    def _compress_video(self, input_file: str, output_file: str, quality: str) -> bool:
        """
        –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg.
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            True, –µ—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
            quality_params = {
                'low': ['-crf', '28', '-preset', 'fast'],
                'medium': ['-crf', '23', '-preset', 'medium'],
                'high': ['-crf', '18', '-preset', 'slow']
            }
            
            params = quality_params.get(quality, quality_params['medium'])
            
            cmd = [
                'ffmpeg', '-i', input_file,
                '-c:v', 'libx264',
                '-c:a', 'aac',
                '-b:a', '128k'
            ] + params + [
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                output_file
            ]
            
            self.logger.info(f"üé¨ –ó–∞–ø—É—Å–∫ FFmpeg: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ: {output_file}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {input_file}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ {input_file}: {e}")
            return False
    
    def _extract_audio(self, input_file: str, output_file: str) -> bool:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞.
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            True, –µ—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            cmd = [
                'ffmpeg', '-i', input_file,
                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                '-c:a', 'mp3',
                '-b:a', '128k',
                '-ar', '44100',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                output_file
            ]
            
            self.logger.info(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {output_file}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {input_file}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ {input_file}: {e}")
            return False


def get_media_processor(config_manager: ConfigManager, logger: Optional[logging.Logger] = None) -> MediaProcessor:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
    
    Args:
        config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    """
    return MediaProcessor(config_manager, logger)
