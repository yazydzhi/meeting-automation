#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á
"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, List, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from src.config_manager import ConfigManager
    from src.calendar_alternatives import get_calendar_provider, CalendarEvent
    from src.drive_alternatives import get_drive_provider
    from src.notion_templates import create_page_with_template
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class CalendarHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á."""
    
    def __init__(self, config_manager: ConfigManager, logger: Optional[logging.Logger] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config_manager = config_manager
        self.logger = logger or logging.getLogger(__name__)
    
    def process_account(self, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–∏—Å–∫).
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('personal', 'work', 'both')
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
        
        try:
            if account_type == 'personal':
                if self.config_manager.is_personal_enabled():
                    self.logger.info("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    provider_config = self.config_manager.get_calendar_provider_config('personal')
                    calendar_provider = get_calendar_provider(**provider_config)
                    
                    if not calendar_provider:
                        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                        return {"status": "error", "message": "Failed to get calendar provider"}
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
                    drive_provider = get_drive_provider(
                        self.config_manager.get_drive_provider_type('personal'),
                        **self.config_manager.get_drive_provider_config('personal')
                    )
                    
                    if not drive_provider:
                        self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    result = self.process_calendar_events(calendar_provider, drive_provider, account_type)
                    return result
                else:
                    self.logger.warning("‚ö†Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                    return {"status": "skipped", "message": "Personal account disabled"}
            
            elif account_type == 'work':
                if self.config_manager.is_work_enabled():
                    self.logger.info("üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    provider_config = self.config_manager.get_calendar_provider_config('work')
                    calendar_provider = get_calendar_provider(**provider_config)
                    
                    if not calendar_provider:
                        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                        return {"status": "error", "message": "Failed to get calendar provider"}
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
                    drive_provider = get_drive_provider(
                        self.config_manager.get_drive_provider_type('work'),
                        **self.config_manager.get_drive_provider_config('work')
                    )
                    
                    if not drive_provider:
                        self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    result = self.process_calendar_events(calendar_provider, drive_provider, account_type)
                    return result
                else:
                    self.logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                    return {"status": "skipped", "message": "Work account disabled"}
            
            elif account_type == 'both':
                results = []
                if self.config_manager.is_personal_enabled():
                    personal_result = self.process_account('personal')
                    results.append(personal_result)
                
                if self.config_manager.is_work_enabled():
                    work_result = self.process_account('work')
                    results.append(work_result)
                
                return {"status": "success", "message": "Both accounts processed", "results": results}
            
            else:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
                return {"status": "error", "message": f"Unknown account type: {account_type}"}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
            return {"status": "error", "message": str(e)}
    
    def process_calendar_events(self, calendar_provider, drive_provider, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á.
        
        Args:
            calendar_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            drive_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info(f"üìÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type} –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥
            days = 2
            today = datetime.now().date()
            start_date = datetime.combine(today, datetime.min.time())
            end_date = start_date + timedelta(days=days)
            
            events = calendar_provider.get_events(start_date, end_date)
            self.logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            filtered_events, excluded_events = self.filter_events(events, account_type)
            self.logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
            self.logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(excluded_events)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            processed_events = 0
            processed_details = []
            
            for event in filtered_events:
                try:
                    result = self.process_event(event, drive_provider, account_type)
                    processed_details.append(result)
                    processed_events += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                    self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            excluded_count = len(excluded_events)
            
            result = {
                'status': 'success',
                'processed': processed_events,
                'excluded': excluded_count,
                'errors': len(events) - processed_events - excluded_count,
                'details': processed_details,
                'excluded_details': excluded_events
            }
            
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_events}, –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded_count}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {'status': 'error', 'processed': 0, 'excluded': 0, 'errors': 1, 'details': [str(e)]}
    
    def filter_events(self, events: List[CalendarEvent], account_type: str) -> Tuple[List[CalendarEvent], List[Dict[str, Any]]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        filtered_events = []
        excluded_events = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        exclusions = self._load_exclusions(account_type)
        
        for event in events:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            is_excluded = False
            matched_keywords = []
            
            for keyword in exclusions:
                if keyword.lower() in event.title.lower():
                    is_excluded = True
                    matched_keywords.append(keyword)
            
            if is_excluded:
                self.logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
                excluded_events.append({
                    'title': event.title,
                    'start': event.start,
                    'end': event.end,
                    'reason': '–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
                    'keywords': matched_keywords
                })
                continue
            
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏
            filtered_events.append(event)
            self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
        
        return filtered_events, excluded_events
    
    def _load_exclusions(self, account_type: str) -> List[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            exclusions_file = Path(f"config/{account_type}_exclusions.txt")
            
            if not exclusions_file.exists():
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {exclusions_file}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if account_type == 'personal':
                    return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
                else:
                    return ['–û–±–µ–¥', '–ü–µ—Ä–µ—Ä—ã–≤', '–û—Ç–≥—É–ª', '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', '–û—Ç–ø—É—Å–∫']
            
            exclusions = []
            with open(exclusions_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    if line and not line.startswith('#'):
                        exclusions.append(line)
            
            self.logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ {exclusions_file}")
            return exclusions
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if account_type == 'personal':
                return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
            else:
                return ['–û–±–µ–¥', '–ü–µ—Ä–µ—Ä—ã–≤', '–û—Ç–≥—É–ª', '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', '–û—Ç–ø—É—Å–∫']
    
    def process_event(self, event: CalendarEvent, drive_provider, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            drive_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ: {event.title}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            folder_name = self.format_folder_name(event, account_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            if drive_provider and drive_provider.file_exists(folder_name):
                self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
                folder_created = False
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
                if drive_provider:
                    folder_id = drive_provider.create_folder(folder_name)
                    if folder_id:
                        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                        folder_created = True
                    else:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {folder_name}")
                        folder_created = False
                else:
                    self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    folder_created = False
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
            folder_link = f"file://{folder_name}" if folder_created else ""
            notion_page_id = self.create_notion_meeting_record(event, folder_link, account_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'attendees_count': len(event.attendees),
                'has_meeting_link': bool(event.meeting_link),
                'drive_folder_created': folder_created,
                'notion_page_id': notion_page_id,
                'drive_folder_link': folder_link
            }
            
            self.logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
            return {
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'attendees_count': 0,
                'has_meeting_link': False,
                'drive_folder_created': False,
                'notion_page_id': '',
                'drive_folder_link': '',
                'error': str(e)
            }
    
    def format_folder_name(self, event: CalendarEvent, account_type: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        """
        start_time = event.start
        title = event.title
        
        # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD hh-mm –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        folder_name = f"{start_time.strftime('%Y-%m-%d %H-%M')} {title}"
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
        folder_name = folder_name.replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
        
        return folder_name
    
    def create_notion_meeting_record(self, event: CalendarEvent, folder_link: str, account_type: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Notion –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            folder_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É –≤—Å—Ç—Ä–µ—á–∏
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
            template_path = "templates/meeting_page_template.json"
            if not os.path.exists(template_path):
                self.logger.error(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
                return ""
            
            with open(template_path, 'r', encoding='utf-8') as f:
                import json
                template = json.load(f)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
            template_data = {
                "title": event.title,
                "start_time": event.start.strftime('%H:%M'),
                "end_time": event.end.strftime('%H:%M'),
                "date": event.start.strftime('%Y-%m-%d'),
                "description": event.description,
                "location": event.location,
                "attendees": event.attendees,
                "meeting_link": event.meeting_link,
                "folder_link": folder_link,
                "calendar_source": event.calendar_source,
                "account_type": account_type
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
            notion_config = self.config_manager.get_notion_config()
            notion_token = notion_config.get('token')
            database_id = notion_config.get('database_id')
            
            if not notion_token or not database_id:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Notion —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return ""
            
            page_id = create_page_with_template(
                notion_token, 
                database_id, 
                template, 
                template_data
            )
            
            if page_id:
                self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {page_id}")
                return page_id
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion")
                return ""
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
            return ""


def get_calendar_handler(config_manager: ConfigManager, logger: Optional[logging.Logger] = None) -> CalendarHandler:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    
    Args:
        config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    return CalendarHandler(config_manager, logger)
