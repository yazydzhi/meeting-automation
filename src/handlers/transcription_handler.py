#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
"""

import os
from typing import Dict, Any, List
from .process_handler import ProcessHandler
from .base_handler import retry


class TranscriptionHandler(ProcessHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, config_manager, transcription_handler=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            transcription_handler: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        self.transcription_handler = transcription_handler
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º StateManager –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        try:
            from .state_manager import StateManager
            self.state_manager = StateManager(logger=self.logger)
            self.logger.info("‚úÖ StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ TranscriptionHandler")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è StateManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ TranscriptionHandler: {e}")
            self.state_manager = None
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process(self, *args, **kwargs) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        """
        try:
            self._log_operation_start("–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.transcription_handler:
                result = self.transcription_handler.process_transcription()
                self._log_operation_end("–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π", result)
                return result
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            result = self._process_transcriptions()
            self._log_operation_end("–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
    
    def _process_transcriptions(self) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        return self.process_with_accounts(
            process_type="—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π",
            handler_method="process_transcription",
            folder_method="_process_folder_transcription",
            stats_key="last_transcription_stats"
        )
    
    def _process_folder_transcription(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
        """
        return self.process_folder_files(
            folder_path=folder_path,
            account_type=account_type,
            file_extension='.mp3',
            should_process_func=self._should_process_audio_file,
            process_file_func=self._process_audio_file
        )
    
    def _should_process_audio_file(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –∏–Ω–∞—á–µ
        """
        try:
            if not os.path.exists(file_path):
                return False
            
            # TASK-5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∂–∞—Ç—ã–µ MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª (–æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è MediaHandler)
            if not file_path.lower().endswith('_compressed.mp3'):
                self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            if self.state_manager:
                if self.state_manager.is_transcription_processed(file_path):
                    self.logger.debug(f"‚è≠Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {os.path.basename(file_path)}")
                    return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            base_path = os.path.splitext(file_path)[0]
            transcript_file = base_path + '__transcript.txt'
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if os.path.exists(transcript_file):
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def _process_audio_file(self, file_path: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            
            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Whisper
            try:
                # TASK-5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                # –£–±–∏—Ä–∞–µ–º _compressed –∏–∑ –∏–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º __transcript
                base_path = os.path.splitext(file_path)[0]
                if base_path.endswith('_compressed'):
                    base_path = base_path[:-10]  # –£–±–∏—Ä–∞–µ–º '_compressed'
                transcript_file = base_path + '__transcript.txt'
                
                self.logger.info("üé§ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Whisper...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                import whisper
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper (medium –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏)
                model = whisper.load_model("medium")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                self.logger.info(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å Whisper: medium")
                result = model.transcribe(file_path, language="ru",fp16=False)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                transcript_text = result["text"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                with open(transcript_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Whisper\n")
                    f.write(f"–ú–æ–¥–µ–ª—å: medium\n")
                    f.write(f"–Ø–∑—ã–∫: {result.get('language', 'ru')}\n\n")
                    f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                    f.write(transcript_text)
                
                self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –ë–î
                if self.state_manager:
                    self.state_manager.mark_transcription_processed(file_path, transcript_file, "success")
                
                return True
                
            except ImportError:
                self.logger.error("‚ùå –ú–æ–¥—É–ª—å whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                with open(transcript_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - –º–æ–¥—É–ª—å whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n")
                    f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                    f.write("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: pip install openai-whisper\n")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Whisper: {e}")
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                with open(transcript_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ Whisper - {str(e)}\n\n")
                    f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                    f.write("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ Whisper\n")
                    f.write(f"–§–∞–π–ª: {os.path.basename(file_path)}\n")
                    f.write(f"–†–∞–∑–º–µ—Ä: {os.path.getsize(file_path)} –±–∞–π—Ç\n")
                    f.write(f"–¢–∏–ø: –ê—É–¥–∏–æ —Ñ–∞–π–ª MP3\n")
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcript_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def _get_current_timestamp(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        """
        from datetime import datetime
        return datetime.now().isoformat()
    
    def count_audio_files(self, folder_path: str) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3') and not file.lower().endswith('_compressed.mp3'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                        mp3_path = os.path.join(root, file)
                        transcript_file = mp3_path.replace('.mp3', '_transcript.txt')
                        if not os.path.exists(transcript_file):
                            count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {e}")
            return 0
