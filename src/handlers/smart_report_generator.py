#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞–ø–∫–∞–º –≤—Å—Ç—Ä–µ—á –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
"""

import os
import time
from typing import Dict, Any, List, Optional
from datetime import datetime


class SmartReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram."""
    
    def __init__(self, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤.
        
        Args:
            logger: –õ–æ–≥–≥–µ—Ä
        """
        self.logger = logger
        self.last_report_time = None
        self.last_errors = set()
    
    def generate_smart_report(self, current_state: Dict[str, Any], 
                            previous_state: Optional[Dict[str, Any]] = None,
                            execution_time: float = 0) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            execution_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not self._has_real_changes(current_state, previous_state):
                if self.logger:
                    self.logger.debug("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç—á–µ—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._build_smart_report(current_state, previous_state, execution_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
            self.last_report_time = datetime.now()
            
            return report
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def _has_real_changes(self, current_state: Dict[str, Any], 
                         previous_state: Optional[Dict[str, Any]]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"üîç SmartReportGenerator._has_real_changes: previous_state={bool(previous_state)}")
            if not previous_state:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                return self._has_current_activity(current_state)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            current_metrics = self._extract_metrics(current_state)
            previous_metrics = self._extract_metrics(previous_state)
            
            self.logger.info(f"üîç SmartReportGenerator: current_metrics={current_metrics}")
            self.logger.info(f"üîç SmartReportGenerator: previous_metrics={previous_metrics}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
            for key in current_metrics:
                if current_metrics[key] != previous_metrics[key]:
                    if self.logger:
                        self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {key}: {previous_metrics[key]} -> {current_metrics[key]}")
                    return True
            
            # –£–±–∏—Ä–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É - –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ True –ø—Ä–∏ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # –¢–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
            # –∏–ª–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            current_errors = self._extract_errors(current_state)
            if current_errors - self.last_errors:
                if self.logger:
                    self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏: {current_errors - self.last_errors}")
                return True
            
            return False
            
        except Exception as e:
            if self.logger:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    def _has_current_activity(self, current_state: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            personal_processed = current_state.get('personal_events', {}).get('processed', 0)
            work_processed = current_state.get('work_events', {}).get('processed', 0)
            media_processed = current_state.get('media_processed', {}).get('count', 0)
            transcriptions = current_state.get('transcriptions', {}).get('count', 0)
            notion_synced = current_state.get('notion_synced', {}).get('count', 0)
            errors_count = current_state.get('errors_count', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–µ –ø—Ä–æ—Å—Ç–æ "processed: 1")
            # –£–±–∏—Ä–∞–µ–º transcriptions > 0, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            has_real_activity = (
                media_processed > 0 or 
                notion_synced > 0 or 
                errors_count > 0
            )
            
            self.logger.info(f"üîç SmartReportGenerator._has_current_activity: media={media_processed}, transcriptions={transcriptions}, notion={notion_synced}, errors={errors_count}, has_real_activity={has_real_activity}")
            
            if self.logger:
                self.logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: media={media_processed}, transcriptions={transcriptions}, notion={notion_synced}, errors={errors_count}, real={has_real_activity}")
            
            return has_real_activity
            
        except Exception as e:
            if self.logger:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return True
    
    def _extract_metrics(self, state: Dict[str, Any]) -> Dict[str, int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –º–µ—Ç—Ä–∏–∫
        """
        try:
            return {
                'personal_events': state.get('personal_events', {}).get('processed', 0),
                'work_events': state.get('work_events', {}).get('processed', 0),
                'media_processed': state.get('media_processed', {}).get('count', 0),
                'transcriptions': state.get('transcriptions', {}).get('count', 0),
                'notion_synced': state.get('notion_synced', {}).get('count', 0),
                'errors_count': state.get('errors_count', 0)
            }
        except Exception:
            return {}
    
    def _extract_errors(self, state: Dict[str, Any]) -> set:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        """
        try:
            errors = set()
            
            # –û—à–∏–±–∫–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            personal_status = state.get('personal_events', {}).get('status', '')
            work_status = state.get('work_events', {}).get('status', '')
            
            if personal_status == 'error':
                errors.add(f"–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {state.get('personal_events', {}).get('message', '–û—à–∏–±–∫–∞')}")
            
            if work_status == 'error':
                errors.add(f"–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {state.get('work_events', {}).get('message', '–û—à–∏–±–∫–∞')}")
            
            # –û—à–∏–±–∫–∏ –≤ –º–µ–¥–∏–∞
            media_status = state.get('media_processed', {}).get('status', '')
            if media_status == 'error':
                errors.add(f"–ú–µ–¥–∏–∞: {state.get('media_processed', {}).get('message', '–û—à–∏–±–∫–∞')}")
            
            # –û—à–∏–±–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ö
            transcription_status = state.get('transcriptions', {}).get('status', '')
            if transcription_status == 'error':
                errors.add(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {state.get('transcriptions', {}).get('message', '–û—à–∏–±–∫–∞')}")
            
            # –û—à–∏–±–∫–∏ –≤ Notion
            notion_status = state.get('notion_synced', {}).get('status', '')
            if notion_status == 'error':
                errors.add(f"Notion: {state.get('notion_synced', {}).get('message', '–û—à–∏–±–∫–∞')}")
            
            return errors
            
        except Exception:
            return set()
    
    def _build_smart_report(self, current_state: Dict[str, Any], 
                           previous_state: Optional[Dict[str, Any]], 
                           execution_time: float) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç —É–º–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∞–ø–∫–∞–º –≤—Å—Ç—Ä–µ—á.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            execution_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        try:
            report = "ü§ñ <b>–û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            current_time = datetime.now().strftime("%H:%M:%S")
            report += f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {current_time}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø–∞–ø–∫–∞–º –≤—Å—Ç—Ä–µ—á
            meeting_changes = self._group_changes_by_meetings(current_state, previous_state)
            
            if meeting_changes:
                report += "üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º:</b>\n\n"
                
                for meeting_folder, changes in meeting_changes.items():
                    meeting_name = os.path.basename(meeting_folder)
                    account_icon = "üë§" if "personal" in meeting_folder else "üè¢"
                    
                    report += f"{account_icon} <b>{meeting_name}</b>\n"
                    
                    for change in changes:
                        report += f"    {change}\n"
                    
                    report += "\n"
                
                # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                processed_files = self._get_processed_files(current_state)
                if processed_files:
                    report += "üìÅ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ñ–∞–π–ª—ã:</b>\n"
                    for file_info in processed_files:
                        report += f"‚Ä¢ {file_info}\n"
                    report += "\n"
            
            # –û—à–∏–±–∫–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è
            current_errors = self._extract_errors(current_state)
            if current_errors:
                report += "‚ö†Ô∏è <b>–û—à–∏–±–∫–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è:</b>\n"
                for error in current_errors:
                    report += f"‚Ä¢ {error}\n"
                report += "\n"
            else:
                report += "üéØ <b>üü¢ –æ—à–∏–±–æ–∫ –∏ –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç</b>\n\n"
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if execution_time > 0:
                report += f"‚è±Ô∏è <b>–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b> {execution_time:.2f} —Å–µ–∫—É–Ω–¥\n"
            
            return report
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def _group_changes_by_meetings(self, current_state: Dict[str, Any], 
                                  previous_state: Optional[Dict[str, Any]]) -> Dict[str, List[str]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø–∞–ø–∫–∞–º –≤—Å—Ç—Ä–µ—á.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø–∞–ø–∫–∞–º
        """
        try:
            meeting_changes = {}
            
            # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_info = current_state.get('media_processed', {})
            if media_info.get('count', 0) > 0:
                for folder_info in media_info.get('folders', []):
                    folder_path = folder_info.get('folder', '')
                    if folder_path:
                        if folder_path not in meeting_changes:
                            meeting_changes[folder_path] = []
                        
                        processed_count = folder_info.get('processed', 0)
                        if processed_count > 0:
                            meeting_changes[folder_path].append("üé¨ —Å–∂–∞—Ç–æ –≤–∏–¥–µ–æ")
                            meeting_changes[folder_path].append("üéôÔ∏è –≤—ã–¥–µ–ª–µ–Ω–æ –∞—É–¥–∏–æ")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcription_info = current_state.get('transcriptions', {})
            if transcription_info.get('count', 0) > 0:
                for folder_info in transcription_info.get('folders', []):
                    folder_path = folder_info.get('folder', '')
                    if folder_path:
                        if folder_path not in meeting_changes:
                            meeting_changes[folder_path] = []
                        
                        processed_count = folder_info.get('processed', 0)
                        if processed_count > 0:
                            meeting_changes[folder_path].append("üìù —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ –∞—É–¥–∏–æ")
            
            # –°–∞–º–º–∞—Ä–∏
            summary_info = current_state.get('summaries', {})
            if summary_info.get('count', 0) > 0:
                for folder_info in summary_info.get('folders', []):
                    folder_path = folder_info.get('folder', '')
                    if folder_path:
                        if folder_path not in meeting_changes:
                            meeting_changes[folder_path] = []
                        
                        processed_count = folder_info.get('processed', 0)
                        if processed_count > 0:
                            meeting_changes[folder_path].append("üßëüèª‚Äçüíª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏")
                            meeting_changes[folder_path].append("üë©‚Äç‚öïÔ∏è –≥–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑")
            
            # Notion —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            notion_info = current_state.get('notion_synced', {})
            if notion_info.get('count', 0) > 0:
                for folder_info in notion_info.get('folders', []):
                    folder_path = folder_info.get('folder', '')
                    if folder_path:
                        if folder_path not in meeting_changes:
                            meeting_changes[folder_path] = []
                        
                        meeting_changes[folder_path].append("üìô –∑–∞–ø–∏—Å–∞–Ω–æ –≤ notion")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
            for folder_path in meeting_changes:
                meeting_changes[folder_path].append("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return meeting_changes
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return {}
    
    def _get_processed_files(self, current_state: Dict[str, Any]) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        try:
            files = []
            
            # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_info = current_state.get('media_processed', {})
            if media_info.get('count', 0) > 0:
                for folder_info in media_info.get('folders', []):
                    for file_info in folder_info.get('files', []):
                        if isinstance(file_info, dict):
                            file_name = file_info.get('file', '')
                            status = file_info.get('status', '')
                            if file_name and status == 'success':
                                files.append(f"{file_name} (–º–µ–¥–∏–∞)")
                        else:
                            files.append(f"{file_info} (–º–µ–¥–∏–∞)")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcription_info = current_state.get('transcriptions', {})
            if transcription_info.get('count', 0) > 0:
                for folder_info in transcription_info.get('folders', []):
                    for file_info in folder_info.get('files', []):
                        if isinstance(file_info, dict):
                            file_name = file_info.get('file', '')
                            status = file_info.get('status', '')
                            if file_name and status == 'success':
                                files.append(f"{file_name} (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)")
                        else:
                            files.append(f"{file_info} (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)")
            
            return files[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return []
