#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import logging
import traceback
from typing import Dict, Any, Optional
from abc import ABC, abstractmethod
import functools
import time


def retry(max_attempts=3, delay=5, backoff=2, exceptions=(Exception,)):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(self, *args, **kwargs):
            mtries, mdelay = max_attempts, delay
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            func_name = func.__name__
            
            while mtries > 1:
                try:
                    return func(self, *args, **kwargs)
                except exceptions as e:
                    msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ {func_name} (–ø–æ–ø—ã—Ç–∫–∞ {max_attempts - mtries + 1}/{max_attempts}): {e}"
                    self.logger.warning(msg)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
                    
                    mtries -= 1
                    if mtries == 1:
                        self.logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func_name}")
                        break
                        
                    self.logger.info(f"‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {mdelay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(mdelay)
                    mdelay *= backoff
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            return func(self, *args, **kwargs)
        return wrapper
    return decorator


class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    
    def __init__(self, config_manager, logger: Optional[logging.Logger] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        """
        self.config_manager = config_manager
        
        if logger is None:
            self.logger = logging.getLogger(self.__class__.__name__)
        else:
            self.logger = logger
    
    @abstractmethod
    def process(self, *args, **kwargs) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        pass
    
    def _create_error_result(self, error: Exception, context: str = "") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏.
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—à–∏–±–∫–∏
        """
        error_msg = f"{context}: {str(error)}" if context else str(error)
        self.logger.error(f"‚ùå {error_msg}")
        self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        
        return {
            "status": "error",
            "error": error_msg,
            "processed": 0,
            "errors": 1,
            "details": [str(error)]
        }
    
    def _create_success_result(self, processed: int = 0, details: list = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        
        Args:
            processed: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            details: –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        return {
            "status": "success",
            "processed": processed,
            "errors": 0,
            "details": details or []
        }
    
    def _log_operation_start(self, operation: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        params = " ".join([f"{k}={v}" for k, v in kwargs.items()])
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é {operation} {params}".strip())
    
    def _log_operation_end(self, operation: str, result: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        status = result.get("status", "unknown")
        processed = result.get("processed", 0)
        errors = result.get("errors", 0)
        
        if status in ["success", "no_files"]:
            self.logger.info(f"‚úÖ {operation} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}, –æ—à–∏–±–æ–∫ {errors}")
        else:
            self.logger.error(f"‚ùå {operation} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {errors}")
    
    def _validate_config(self, required_keys: list, config: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            required_keys: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, False –∏–Ω–∞—á–µ
        """
        missing_keys = [key for key in required_keys if key not in config or not config[key]]
        
        if missing_keys:
            self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {missing_keys}")
            return False
        
        return True
