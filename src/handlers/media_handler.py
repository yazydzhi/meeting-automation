#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
"""

import os
import time
from typing import Dict, Any, List
from .base_handler import BaseHandler, retry


class MediaHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, config_manager, media_processor=None, logger=None, service_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–¥–∏–∞.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            media_processor: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger: –õ–æ–≥–≥–µ—Ä
            service_manager: –°—Å—ã–ª–∫–∞ –Ω–∞ ServiceManager –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
        """
        super().__init__(config_manager, logger)
        self.media_processor = media_processor
        self.service_manager = service_manager  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
        self.last_media_check = 0
        self.media_check_interval = 1800  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.last_media_stats = {}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process(self, quality: str = 'medium', *args, **kwargs) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è ('low', 'medium', 'high')
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
        """
        try:
            self._log_operation_start("–æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤", quality=quality)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = time.time()
            if (current_time - self.last_media_check) < self.media_check_interval:
                self.logger.info("‚è∞ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0, "status": "skipped"}
            
            self.last_media_check = current_time
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.media_processor:
                result = self.media_processor.process_media(quality)
                self.last_media_stats = result
                self._log_operation_end("–æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤", result)
                return result
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            result = self._process_media_files(quality)
            self.last_media_stats = result
            self._log_operation_end("–æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
    
    def _process_media_files(self, quality: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º universal script.
        
        Args:
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
            
            results = []
            total_processed = 0
            total_synced = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = self._process_folder_media(personal_folder, "personal", quality)
                    results.append(personal_result)
                    total_processed += personal_result.get("processed", 0)
                    total_synced += personal_result.get("synced", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = self._process_folder_media(work_folder, "work", quality)
                    results.append(work_result)
                    total_processed += work_result.get("processed", 0)
                    total_synced += work_result.get("synced", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, –Ω–∞–π–¥–µ–Ω–æ {total_synced}")
            
            return {
                "status": "success",
                "message": "Media processing completed",
                "results": results,
                "total_processed": total_processed,
                "total_synced": total_synced
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            return self._create_error_result(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
    
    def _process_folder_media(self, folder_path: str, account_type: str, quality: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
        """
        try:
            result = {
                "account": account_type,
                "folder": folder_path,
                "processed": 0,
                "synced": 0,
                "errors": 0,
                "files": []
            }
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            video_files = self._find_video_files(folder_path)
            
            if not video_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return result
            
            self.logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # TASK-5: –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π = –∏–Ω–¥–µ–∫—Å 1)
            video_files_with_time = []
            for video_file in video_files:
                try:
                    creation_time = os.path.getctime(video_file)
                    video_files_with_time.append((video_file, creation_time))
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {video_file}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    video_files_with_time.append((video_file, time.time()))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∫ —Å–∞–º–æ–º—É –ø–æ–∑–¥–Ω–µ–º—É)
            video_files_with_time.sort(key=lambda x: x[1])
            
            self.logger.info(f"üîß TASK-5: –§–∞–π–ª—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è:")
            for i, (video_file, creation_time) in enumerate(video_files_with_time, 1):
                file_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(creation_time))
                self.logger.info(f"   {i}. {os.path.basename(video_file)} ({file_time})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
            for index, (video_file, creation_time) in enumerate(video_files_with_time, 1):
                try:
                    if self._process_video_file_with_index(video_file, quality, index):
                        result["processed"] += 1
                        result["files"].append(video_file)
                        self.logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª {index}: {video_file}")
                    else:
                        result["errors"] += 1
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª {index}: {video_file}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ {index} {video_file}: {e}")
                    result["errors"] += 1
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            result["errors"] += 1
            return result
    
    def _find_video_files(self, folder_path: str) -> List[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞–º
        """
        try:
            video_files = []
            video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
            
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if any(file.lower().endswith(ext) for ext in video_extensions):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —É–∂–µ —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                        if not file.lower().endswith('_compressed.mp4'):
                            file_path = os.path.join(root, file)
                            
                            # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ú–ï–•–ê–ù–ò–ó–ú–û–ú –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
                            if self.service_manager and self.service_manager._is_file_processed(file_path):
                                self.logger.info(f"‚è≠Ô∏è –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {os.path.basename(file)}")
                                continue
                            
                            video_files.append(file_path)
            
            return video_files
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ {folder_path}: {e}")
            return []
    
    def _process_video_file_with_index(self, video_file: str, quality: str, file_index: int) -> bool:
        """
        TASK-5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –∏ —É–º–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º.
        
        Args:
            video_file: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            file_index: –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"üé¨ TASK-5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ #{file_index}: {os.path.basename(video_file)}")
            
            # TASK-5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
            meeting_folder = os.path.dirname(video_file)
            compressed_video, compressed_audio = self._generate_smart_filename(video_file, meeting_folder, file_index)
            
            # TASK-5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
            should_delete = self.config_manager.should_delete_original_videos()
            self.logger.info(f"üîß TASK-5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {should_delete}")
            
            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg
            video_success = self._compress_video(video_file, compressed_video, quality)
            if not video_success:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ: {video_file}")
                return False
            
            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
            audio_success = self._extract_audio(compressed_video, compressed_audio)
            if not audio_success:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {compressed_video}")
                return False
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∂–∞—Ç—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {compressed_video}")
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∂–∞—Ç—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª: {compressed_audio}")
            
            # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ú–ï–•–ê–ù–ò–ó–ú–û–ú –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø: –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            if self.service_manager:
                self.service_manager._mark_file_processed(video_file)
                self.logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π: {os.path.basename(video_file)}")
            
            # TASK-5: –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            if should_delete:
                self.logger.info(f"üîß TASK-5: –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã")
                
                # TASK-5: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                if self._compare_video_duration(video_file, compressed_video):
                    self.logger.info(f"üîß TASK-5: –î–ª–∏–Ω—ã –≤–∏–¥–µ–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É–¥–∞–ª—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª: {os.path.basename(video_file)}")
                    try:
                        os.remove(video_file)
                        self.logger.info(f"‚úÖ TASK-5: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {os.path.basename(video_file)}")
                    except Exception as e:
                        self.logger.error(f"‚ùå TASK-5: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {video_file}: {e}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è TASK-5: –î–ª–∏–Ω—ã –≤–∏–¥–µ–æ –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(video_file)}")
            else:
                self.logger.info(f"üîß TASK-5: –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ {video_file}: {e}")
            return False
    
    def _process_video_file(self, video_file: str, quality: str) -> bool:
        """
        TASK-5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
        
        Args:
            video_file: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –∏–Ω–¥–µ–∫—Å–æ–º 1 (–¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
        return self._process_video_file_with_index(video_file, quality, 1)
    
    def set_media_check_interval(self, interval: int):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.media_check_interval = interval
        self.logger.info(f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞: {interval} —Å–µ–∫—É–Ω–¥")
    
    def get_media_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞.
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        return self.last_media_stats
    
    def reset_media_check_timer(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞."""
        self.last_media_check = 0
        self.logger.info("‚è∞ –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —Å–±—Ä–æ—à–µ–Ω")
    
    def _compress_video(self, input_file: str, output_file: str, quality: str) -> bool:
        """
        –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg.
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            True, –µ—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            import subprocess
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
            quality_params = {
                'low': ['-crf', '28', '-preset', 'fast'],
                'medium': ['-crf', '23', '-preset', 'medium'],
                'high': ['-crf', '18', '-preset', 'slow']
            }
            
            params = quality_params.get(quality, quality_params['medium'])
            
            cmd = [
                'ffmpeg', '-i', input_file,
                '-c:v', 'libx264',
                '-c:a', 'aac',
                '-b:a', '128k'
            ] + params + [
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                output_file
            ]
            
            self.logger.info(f"üé¨ –ó–∞–ø—É—Å–∫ FFmpeg: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ: {output_file}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {input_file}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ {input_file}: {e}")
            return False
    
    def _generate_smart_filename(self, video_file: str, meeting_folder: str, file_index: int = 1) -> tuple[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            video_file: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            meeting_folder: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
            file_index: –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ (–¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∏–º—è_—Å–∂–∞—Ç–æ–≥–æ_–≤–∏–¥–µ–æ, –∏–º—è_—Å–∂–∞—Ç–æ–≥–æ_–∞—É–¥–∏–æ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
            meeting_name = os.path.basename(meeting_folder)
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_meeting_name = self._sanitize_filename(meeting_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            if file_index == 1:
                compressed_video_name = f"{safe_meeting_name}_compressed.mp4"
                compressed_audio_name = f"{safe_meeting_name}_compressed.mp3"
            else:
                compressed_video_name = f"{safe_meeting_name}_{file_index}_compressed.mp4"
                compressed_audio_name = f"{safe_meeting_name}_{file_index}_compressed.mp3"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
            compressed_video_path = os.path.join(meeting_folder, compressed_video_name)
            compressed_audio_path = os.path.join(meeting_folder, compressed_audio_name)
            
            self.logger.info(f"üîß TASK-5: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–º–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:")
            self.logger.info(f"   üìπ –í–∏–¥–µ–æ: {compressed_video_name}")
            self.logger.info(f"   üéµ –ê—É–¥–∏–æ: {compressed_audio_name}")
            
            return compressed_video_path, compressed_audio_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            base_path = os.path.splitext(video_file)[0]
            return base_path + '_compressed.mp4', base_path + '_compressed.mp3'
    
    def _sanitize_filename(self, filename: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        
        Args:
            filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        invalid_chars = '<>:"/\\|?*'
        sanitized = filename
        for char in invalid_chars:
            sanitized = sanitized.replace(char, '_')
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        while '__' in sanitized:
            sanitized = sanitized.replace('__', '_')
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        sanitized = sanitized.strip('_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if len(sanitized) > 100:
            sanitized = sanitized[:100]
        
        return sanitized
    
    def _compare_video_duration(self, original_file: str, compressed_file: str) -> bool:
        """
        TASK-5: –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            original_file: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            compressed_file: –ü—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ –¥–ª–∏–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 1 —Å–µ–∫—É–Ω–¥–∞), False –∏–Ω–∞—á–µ
        """
        try:
            import subprocess
            import json
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            cmd_original = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'json', original_file
            ]
            
            result_original = subprocess.run(cmd_original, capture_output=True, text=True, timeout=30)
            if result_original.returncode != 0:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {result_original.stderr}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            cmd_compressed = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'json', compressed_file
            ]
            
            result_compressed = subprocess.run(cmd_compressed, capture_output=True, text=True, timeout=30)
            if result_compressed.returncode != 0:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: {result_compressed.stderr}")
                return False
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç—ã
            try:
                original_data = json.loads(result_original.stdout)
                compressed_data = json.loads(result_compressed.stdout)
                
                original_duration = float(original_data['format']['duration'])
                compressed_duration = float(compressed_data['format']['duration'])
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 1 —Å–µ–∫—É–Ω–¥–∞
                duration_diff = abs(original_duration - compressed_duration)
                
                self.logger.info(f"üîç TASK-5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω –≤–∏–¥–µ–æ:")
                self.logger.info(f"   üìπ –û—Ä–∏–≥–∏–Ω–∞–ª: {original_duration:.2f} —Å–µ–∫")
                self.logger.info(f"   üé• –°–∂–∞—Ç—ã–π: {compressed_duration:.2f} —Å–µ–∫")
                self.logger.info(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {duration_diff:.2f} —Å–µ–∫")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                return duration_diff < 1.0
                
            except (KeyError, ValueError, json.JSONDecodeError) as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω –≤–∏–¥–µ–æ: {e}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª–∏–Ω –≤–∏–¥–µ–æ: {e}")
            return False
    
    def _extract_audio(self, input_file: str, output_file: str) -> bool:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞.
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            True, –µ—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            import subprocess
            
            cmd = [
                'ffmpeg', '-i', input_file,
                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                '-c:a', 'mp3',
                '-b:a', '128k',
                '-ar', '44100',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                output_file
            ]
            
            self.logger.info(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {output_file}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {input_file}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ {input_file}: {e}")
            return False
