#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

from typing import Dict, Any, List
from .base_handler import BaseHandler


class MetricsHandler(BaseHandler):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    
    def __init__(self, config_manager, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ—Ç—Ä–∏–∫.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π –º–µ—Ç—Ä–∏–∫
        self.METRIC_KEYS = [
            'personal_events',
            'work_events', 
            'media_processed',
            'transcriptions',
            'notion_synced',
            'errors_count'
        ]
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤
        self.STATUS_KEYS = [
            'personal_status',
            'work_status',
            'media_status',
            'transcription_status',
            'notion_status'
        ]
    
    def has_changes(self, current_state: Dict[str, Any], previous_state: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, False –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
        """
        try:
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: previous_state={bool(previous_state)}")
            
            if not previous_state:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                # –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—à–∏–±–∫–∏, etc.)
                return self._has_real_changes(current_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
            current_metrics = self._extract_metrics(current_state)
            previous_metrics = self._extract_metrics(previous_state)
            
            self.logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: current={current_metrics}, previous={previous_metrics}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
            for key in self.METRIC_KEYS:
                if current_metrics[key] != previous_metrics[key]:
                    self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {key}: {previous_metrics[key]} -> {current_metrics[key]}")
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
            current_statuses = self._extract_statuses(current_state)
            previous_statuses = self._extract_statuses(previous_state)
            
            for key in self.STATUS_KEYS:
                if current_statuses[key] != previous_statuses[key]:
                    self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {key}: {previous_statuses[key]} -> {current_statuses[key]}")
                    return True
            
            self.logger.info("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            return True
    
    def _has_real_changes(self, current_state: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, False –∏–Ω–∞—á–µ
        """
        try:
            personal_processed = current_state.get('personal_events', {}).get('processed', 0)
            work_processed = current_state.get('work_events', {}).get('processed', 0)
            media_processed = current_state.get('media_processed', {}).get('count', 0)
            transcriptions = current_state.get('transcriptions', {}).get('count', 0)
            notion_synced = current_state.get('notion_synced', {}).get('count', 0)
            errors_count = current_state.get('errors_count', 0)
            
            self.logger.info(f"üîç –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: personal={personal_processed}, work={work_processed}, media={media_processed}, transcriptions={transcriptions}, notion={notion_synced}, errors={errors_count}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (personal_processed > 0 or work_processed > 0 or 
                media_processed > 0 or transcriptions > 0 or 
                notion_synced > 0 or errors_count > 0):
                self.logger.info("üîç –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                return True
            else:
                self.logger.info("üîç –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return False
    
    def _extract_metrics(self, state: Dict[str, Any]) -> Dict[str, int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        try:
            metrics = {}
            for key in self.METRIC_KEYS:
                if key == 'errors_count':
                    metrics[key] = state.get(key, 0)
                else:
                    metrics[key] = state.get(key, {}).get('processed', 0) if key in ['personal_events', 'work_events'] else state.get(key, {}).get('count', 0)
            return metrics
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {key: 0 for key in self.METRIC_KEYS}
    
    def _extract_statuses(self, state: Dict[str, Any]) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        """
        try:
            statuses = {}
            for key in self.STATUS_KEYS:
                if key == 'personal_status':
                    statuses[key] = state.get('personal_events', {}).get('status', '')
                elif key == 'work_status':
                    statuses[key] = state.get('work_events', {}).get('status', '')
                elif key == 'media_status':
                    statuses[key] = state.get('media_processed', {}).get('status', '')
                elif key == 'transcription_status':
                    statuses[key] = state.get('transcriptions', {}).get('status', '')
                elif key == 'notion_status':
                    statuses[key] = state.get('notion_synced', {}).get('status', '')
                else:
                    statuses[key] = ''
            return statuses
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            return {key: '' for key in self.STATUS_KEYS}
    
    def create_cycle_state(self, 
                          personal_stats: Dict[str, Any],
                          work_stats: Dict[str, Any],
                          media_stats: Dict[str, Any],
                          transcription_stats: Dict[str, Any],
                          notion_stats: Dict[str, Any],
                          summary_stats: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            personal_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            work_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            media_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞
            transcription_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            notion_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Notion
            summary_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–º–º–∞—Ä–∏
            
        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            personal_processed = personal_stats.get('processed', 0)
            work_processed = work_stats.get('processed', 0)
            media_count = media_stats.get('processed', 0)
            transcription_count = transcription_stats.get('processed', 0)
            notion_count = notion_stats.get('synced', 0)
            summary_count = summary_stats.get('processed', 0)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            total_errors = (
                personal_stats.get('errors', 0) +
                work_stats.get('errors', 0) +
                media_stats.get('errors', 0) +
                transcription_stats.get('errors', 0) +
                notion_stats.get('errors', 0) +
                summary_stats.get('errors', 0)
            )
            
            cycle_state = {
                'timestamp': self._get_current_timestamp(),
                'personal_events': {
                    'status': personal_stats.get('status', 'unknown'),
                    'processed': personal_processed,
                    'errors': personal_stats.get('errors', 0)
                },
                'work_events': {
                    'status': work_stats.get('status', 'unknown'),
                    'processed': work_processed,
                    'errors': work_stats.get('errors', 0)
                },
                'media_processed': {
                    'status': media_stats.get('status', 'unknown'),
                    'count': media_count,
                    'errors': media_stats.get('errors', 0)
                },
                'transcriptions': {
                    'status': transcription_stats.get('status', 'unknown'),
                    'count': transcription_count,
                    'errors': transcription_stats.get('errors', 0)
                },
                'notion_synced': {
                    'status': notion_stats.get('status', 'unknown'),
                    'count': notion_count,
                    'errors': notion_stats.get('errors', 0)
                },
                'summary_generated': {
                    'status': summary_stats.get('status', 'unknown'),
                    'count': summary_count,
                    'errors': summary_stats.get('errors', 0)
                },
                'errors_count': total_errors,
                'total_processed': personal_processed + work_processed + media_count + transcription_count + notion_count + summary_count
            }
            
            self.logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞: {cycle_state}")
            return cycle_state
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            return {
                'timestamp': self._get_current_timestamp(),
                'errors_count': 1,
                'total_processed': 0
            }
    
    def _get_current_timestamp(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        """
        from datetime import datetime
        return datetime.now().isoformat()
    
    def compare_states(self, current: Dict[str, Any], previous: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è.
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏
        """
        try:
            if not previous:
                return {'has_changes': True, 'reason': 'no_previous_state'}
            
            differences = {
                'has_changes': False,
                'differences': {},
                'summary': '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
            }
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            current_metrics = self._extract_metrics(current)
            previous_metrics = self._extract_metrics(previous)
            
            for key in self.METRIC_KEYS:
                if current_metrics[key] != previous_metrics[key]:
                    differences['differences'][key] = {
                        'previous': previous_metrics[key],
                        'current': current_metrics[key],
                        'change': current_metrics[key] - previous_metrics[key]
                    }
                    differences['has_changes'] = True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if differences['has_changes']:
                changes = []
                for key, diff in differences['differences'].items():
                    change = diff['change']
                    if change > 0:
                        changes.append(f"{key}: +{change}")
                    elif change < 0:
                        changes.append(f"{key}: {change}")
                
                differences['summary'] = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {', '.join(changes)}"
            
            return differences
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            return {'has_changes': True, 'reason': 'error_in_comparison', 'error': str(e)}
