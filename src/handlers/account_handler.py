#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import os
import sys
import subprocess
import traceback
from typing import Dict, Any, Optional
from .base_handler import BaseHandler, retry
from .calendar_integration_handler import CalendarIntegrationHandler


class AccountHandler(BaseHandler):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    
    def __init__(self, config_manager, calendar_handler=None, notion_handler=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            calendar_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        self.calendar_handler = calendar_handler
        self.calendar_integration_handler = CalendarIntegrationHandler(config_manager, notion_handler, logger)
    
    def process(self, account_type: str = 'personal') -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞).
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('personal' –∏–ª–∏ 'work')
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        return self.process_account(account_type)
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_account(self, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('personal' –∏–ª–∏ 'work')
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            self._log_operation_start("–æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞", account_type=account_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
            if not self._is_account_enabled(account_type):
                self.logger.info(f"‚è≠Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_type} –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                return self._create_success_result(0, [f"–ê–∫–∫–∞—É–Ω—Ç {account_type} –æ—Ç–∫–ª—é—á–µ–Ω"])
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            if self.calendar_integration_handler:
                result = self.calendar_integration_handler.process_calendar_events(account_type)
                self._log_operation_end(f"–æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}", result)
                return result
            
            # –ï—Å–ª–∏ calendar_integration_handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            # –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ universal script (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏)
            self.logger.info(f"üìÖ Calendar integration handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {account_type}")
            result = self._create_success_result(0, [f"–ê–∫–∫–∞—É–Ω—Ç {account_type} –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)"])
            self._log_operation_end(f"–æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}")
    
    def _is_account_enabled(self, account_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∫–ª—é—á–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if account_type == 'personal':
            return self.config_manager.is_personal_enabled()
        elif account_type == 'work':
            return self.config_manager.is_work_enabled()
        else:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            return False
    
    def _run_universal_script(self, account_type: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ universal script.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            emoji = "üë§" if account_type == "personal" else "üè¢"
            account_name = "–ª–∏—á–Ω–æ–≥–æ" if account_type == "personal" else "—Ä–∞–±–æ—á–µ–≥–æ"
            
            self.logger.info(f"{emoji} –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {account_name} –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            cmd = [
                sys.executable,
                'meeting_automation_universal.py',
                'calendar',
                '--account', account_type
            ]
            
            self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            if process.returncode == 0:
                self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ {account_name} –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {
                    "status": "success",
                    "output": process.stdout,
                    "processed": 0,  # –ù–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
                    "errors": 0,
                    "details": [f"–ê–∫–∫–∞—É–Ω—Ç {account_type} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ universal script"]
                }
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {account_name} –∞–∫–∫–∞—É–Ω—Ç–∞: {process.stderr}")
                return {
                    "status": "error",
                    "output": process.stderr,
                    "processed": 0,
                    "errors": 1,
                    "details": [f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è universal script –¥–ª—è {account_type}"]
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ universal script –¥–ª—è {account_type}: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return self._create_error_result(e, f"–∑–∞–ø—É—Å–∫ universal script –¥–ª—è {account_type}")
    
    def process_both_accounts(self) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
        
        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self._log_operation_start("–æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            results = {}
            total_processed = 0
            total_errors = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self._is_account_enabled('personal'):
                personal_result = self.process_account('personal')
                results['personal'] = personal_result
                total_processed += personal_result.get('processed', 0)
                total_errors += personal_result.get('errors', 0)
            else:
                results['personal'] = {"status": "skipped", "output": "–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω"}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self._is_account_enabled('work'):
                work_result = self.process_account('work')
                results['work'] = work_result
                total_processed += work_result.get('processed', 0)
                total_errors += work_result.get('errors', 0)
            else:
                results['work'] = {"status": "skipped", "output": "–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            overall_result = {
                "status": "success" if total_errors == 0 else "partial_success",
                "personal": results['personal'],
                "work": results['work'],
                "total_processed": total_processed,
                "total_errors": total_errors
            }
            
            self._log_operation_end("–æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", overall_result)
            return overall_result
            
        except Exception as e:
            return self._create_error_result(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    def get_account_config(self, account_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ None
        """
        try:
            if account_type == 'personal':
                return self.config_manager.get_personal_config()
            elif account_type == 'work':
                return self.config_manager.get_work_config()
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
                return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {account_type}: {e}")
            return None
