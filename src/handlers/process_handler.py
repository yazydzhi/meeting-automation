#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö
"""

import os
from typing import Dict, Any, List, Callable, Optional
from .base_handler import BaseHandler


class ProcessHandler(BaseHandler):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö."""
    
    def __init__(self, config_manager, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
    
    def process_with_accounts(self, 
                            process_type: str,
                            handler_method: str,
                            folder_method: str,
                            stats_key: str) -> Dict[str, Any]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.
        
        Args:
            process_type: –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            handler_method: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞
            folder_method: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
            stats_key: –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self._log_operation_start(f"–≥–µ–Ω–µ—Ä–∞—Ü–∏—é {process_type}")
            
            stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
            has_files = False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ {process_type} –≤ –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = getattr(self, folder_method)(personal_folder, "personal")
                    if personal_result["processed"] > 0:
                        has_files = True
                        stats["details"].append(personal_result)
                        stats["processed"] += personal_result.get("processed", 0)
                        stats["errors"] += personal_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç {process_type} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ {process_type} –≤ –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = getattr(self, folder_method)(work_folder, "work")
                    if work_result["processed"] > 0:
                        has_files = True
                        stats["details"].append(work_result)
                        stats["processed"] += work_result.get("processed", 0)
                        stats["errors"] += work_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç {process_type} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            if not has_files:
                self.logger.info(f"üìÇ –ù–µ—Ç {process_type} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                stats["status"] = "no_files"
            
            self.logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {process_type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['processed']}, –æ—à–∏–±–æ–∫ {stats['errors']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            setattr(self, stats_key, stats)
            
            return stats
            
        except Exception as e:
            return self._create_error_result(e, f"–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {process_type}")
    
    def process_folder_files(self, 
                           folder_path: str, 
                           account_type: str, 
                           file_extension: str,
                           should_process_func: Callable[[str], bool],
                           process_file_func: Callable[[str], bool]) -> Dict[str, Any]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            file_extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            should_process_func: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_file_func: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
        """
        try:
            result = {
                "account": account_type, 
                "folder": folder_path, 
                "processed": 0, 
                "errors": 0, 
                "files": []
            }
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            files_to_process = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(file_extension):
                        file_path = os.path.join(root, file)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                        if should_process_func(file_path):
                            files_to_process.append(file_path)
            
            if not files_to_process:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return result
            
            self.logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for file_path in files_to_process:
                try:
                    if process_file_func(file_path):
                        result["processed"] += 1
                        result["files"].append(file_path)
                        self.logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {file_path}")
                    else:
                        result["errors"] += 1
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
                    result["errors"] += 1
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            result["errors"] += 1
            return result
    
    def count_files_by_extension(self, folder_path: str, file_extension: str) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            file_extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(file_extension):
                        count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ {file_extension} –≤ {folder_path}: {e}")
            return 0
    
    def find_files_by_extension(self, folder_path: str, file_extension: str) -> List[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            file_extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        """
        try:
            files = []
            for root, dirs, filenames in os.walk(folder_path):
                for filename in filenames:
                    if filename.lower().endswith(file_extension):
                        file_path = os.path.join(root, filename)
                        files.append(file_path)
            return files
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ {file_extension} –≤ {folder_path}: {e}")
            return []
    
    def should_process_file(self, file_path: str, output_file_path: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –∏–Ω–∞—á–µ
        """
        try:
            if not os.path.exists(file_path):
                return False
            
            # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å
            if output_file_path is None:
                base_path = os.path.splitext(file_path)[0]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if file_path.lower().endswith('.mp3'):
                    output_file_path = base_path + '_transcript.txt'
                elif file_path.lower().endswith('_transcript.txt'):
                    output_file_path = base_path + '_summary.txt'
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(output_file_path):
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            return False
