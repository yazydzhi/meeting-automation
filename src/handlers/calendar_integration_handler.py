#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–∞–ø–æ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü Notion.
–°–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Notion.
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone
from pathlib import Path
from .base_handler import BaseHandler, retry
from .calendar_handler import CalendarHandler


class CalendarIntegrationHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–∞–ø–∫–∞–º–∏ –∏ Notion."""
    
    def __init__(self, config_manager, notion_handler=None, calendar_handler=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            notion_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Notion
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        self.notion_handler = notion_handler
        self.calendar_handler = calendar_handler or CalendarHandler(config_manager, logger)
        self.calendar_events_cache = {}
        self.folder_notion_mapping = {}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process(self, account_type: str = "personal") -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('personal' –∏–ª–∏ 'work')
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        """
        try:
            self._log_operation_start("–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è", account_type=account_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
            if not self._is_account_enabled(account_type):
                self.logger.info(f"‚è≠Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account_type} –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                return self._create_success_result(0, [f"–ê–∫–∫–∞—É–Ω—Ç {account_type} –æ—Ç–∫–ª—é—á–µ–Ω"])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_events = self._load_calendar_events(account_type)
            if not calendar_events:
                self.logger.info(f"üìÖ –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return self._create_success_result(0, [f"–°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"])
            
            self.logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(calendar_events)} —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            processed_events = 0
            created_folders = 0
            created_notion_pages = 0
            errors = 0
            
            for event in calendar_events:
                try:
                    event_result = self._process_single_event(event, account_type)
                    if event_result['status'] == 'success':
                        processed_events += 1
                        if event_result.get('folder_created'):
                            created_folders += 1
                        if event_result.get('notion_page_created'):
                            created_notion_pages += 1
                    else:
                        errors += 1
                        self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {event_result.get('message', 'Unknown error')}")
                except Exception as e:
                    errors += 1
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "status": "success",
                "processed": processed_events,
                "folders_created": created_folders,
                "notion_pages_created": created_notion_pages,
                "errors": errors,
                "details": [
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {processed_events}",
                    f"–°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: {created_folders}",
                    f"–°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {created_notion_pages}",
                    f"–û—à–∏–±–æ–∫: {errors}"
                ]
            }
            
            self._log_operation_end(f"–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è {account_type}", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è {account_type}")
    
    def _load_calendar_events(self, account_type: str) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        """
        try:
            if self.calendar_handler:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π CalendarHandler
                events = self.calendar_handler.get_calendar_events(account_type, days_ahead=7)
                self.logger.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type}")
                return events
            else:
                # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.logger.warning("‚ö†Ô∏è CalendarHandler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                if account_type == "personal":
                    return self._get_sample_personal_events()
                elif account_type == "work":
                    return self._get_sample_work_events()
                else:
                    return []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type}: {e}")
            # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if account_type == "personal":
                return self._get_sample_personal_events()
            elif account_type == "work":
                return self._get_sample_work_events()
            else:
                return []
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if account_type == 'personal':
                return self._get_sample_personal_events()
            elif account_type == 'work':
                return self._get_sample_work_events()
            else:
                return []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type}: {e}")
            return []
    
    def _process_single_event(self, event: Dict[str, Any], account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
        """
        try:
            event_id = event.get('id', 'unknown')
            event_title = event.get('title', 'Unknown Event')
            
            self.logger.info(f"üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ: {event_title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if self._is_event_processed(event_id, account_type):
                self.logger.info(f"‚è≠Ô∏è –°–æ–±—ã—Ç–∏–µ {event_title} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return {"status": "skipped", "message": "Event already processed"}
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
            folder_result = self._create_meeting_folder(event, account_type)
            if not folder_result['success']:
                return {"status": "error", "message": f"Failed to create folder: {folder_result['message']}"}
            
            folder_path = folder_result['folder_path']
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
            notion_result = self._create_notion_page(event, folder_path, account_type)
            if not notion_result['success']:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion –¥–ª—è {event_title}: {notion_result['message']}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
            
            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            self._mark_event_processed(event_id, account_type)
            
            return {
                "status": "success",
                "folder_created": True,
                "notion_page_created": notion_result.get('success', False),
                "folder_path": folder_path,
                "notion_page_id": notion_result.get('page_id')
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {e}")
            return {"status": "error", "message": str(e)}
    
    def _create_meeting_folder(self, event: Dict[str, Any], account_type: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
            folder_name = self._generate_folder_name(event)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
            account_config = self._get_account_config(account_type)
            if not account_config:
                return {"success": False, "message": f"Account configuration not found for {account_type}"}
            
            base_path = account_config.get('local_drive_root')
            if not base_path:
                return {"success": False, "message": f"Local drive root not configured for {account_type}"}
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
            folder_path = os.path.join(base_path, folder_name)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
                self.logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_path}")
            else:
                self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
            self._create_status_file(folder_path, event, account_type)
            
            return {"success": True, "folder_path": folder_path}
            
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def _generate_folder_name(self, event: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            
        Returns:
            –ò–º—è –ø–∞–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH-MM –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            start_time_str = event.get('start', '')
            if start_time_str:
                # –£–±–∏—Ä–∞–µ–º 'Z' –∏ –ø–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç
                start_time_str = start_time_str.replace('Z', '+00:00')
                start_time = datetime.fromisoformat(start_time_str)
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ
                start_time = datetime.now()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
            time_part = start_time.strftime('%Y-%m-%d %H-%M')
            title_part = event.get('title', 'Unknown Event')
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
            title_part = self._sanitize_folder_name(title_part)
            
            folder_name = f"{time_part} {title_part}"
            return folder_name
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return f"meeting_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    def _sanitize_folder_name(self, name: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏.
        
        Args:
            name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        """
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
        for char in invalid_chars:
            name = name.replace(char, '_')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        name = ' '.join(name.split())
        name = name.replace(' ', '_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(name) > 100:
            name = name[:100]
        
        return name
    
    def _create_status_file(self, folder_path: str, event: Dict[str, Any], account_type: str):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            status_file_path = os.path.join(folder_path, "processing_status.md")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞
            status_content = self._generate_status_content(event, account_type)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(status_file_path, 'w', encoding='utf-8') as f:
                f.write(status_content)
            
            self.logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞: {status_file_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _generate_status_content(self, event: Dict[str, Any], account_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        title = event.get('title', 'Unknown Event')
        start_time = event.get('start', 'Unknown')
        end_time = event.get('end', 'Unknown')
        attendees_count = event.get('attendees_count', 0)
        
        content = f"""# üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏

## üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
- **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}
- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {start_time} - {end_time}
- **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {attendees_count}
- **–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:** {account_type}
- **–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìÅ –§–∞–π–ª—ã –≤—Å—Ç—Ä–µ—á–∏
- **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
- **–°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
- **–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
- **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
- **–°–∞–º–º–∞—Ä–∏:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
- **–ê–Ω–∞–ª–∏–∑:** –Ω–µ –Ω–∞–π–¥–µ–Ω

## üìù –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
- **–≠—Ç–∞–ø 1 (–ö–∞–ª–µ–Ω–¥–∞—Ä—å):** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–≠—Ç–∞–ø 2 (–ú–µ–¥–∏–∞):** ‚è≥ –û–∂–∏–¥–∞–µ—Ç
- **–≠—Ç–∞–ø 3 (–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è):** ‚è≥ –û–∂–∏–¥–∞–µ—Ç
- **–≠—Ç–∞–ø 4 (–°–∞–º–º–∞—Ä–∏):** ‚è≥ –û–∂–∏–¥–∞–µ—Ç
- **–≠—Ç–∞–ø 5 (Notion):** ‚è≥ –û–∂–∏–¥–∞–µ—Ç

## üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        return content
    
    def _create_notion_page(self, event: Dict[str, Any], folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å—Ç—Ä–µ—á–∏ –≤ Notion.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
        """
        try:
            if not self.notion_handler:
                return {"success": False, "message": "Notion handler not available"}
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ NotionHandler
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –¥–ª—è {event.get('title', 'Unknown')} (–∑–∞–≥–ª—É—à–∫–∞)")
            
            return {
                "success": True,
                "page_id": f"notion_page_{account_type}_{event.get('id', 'unknown')}",
                "page_id": f"notion_page_{account_type}_{event.get('id', 'unknown')}",
                "message": "Notion page creation not yet implemented"
            }
            
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def _get_account_config(self, account_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ None
        """
        try:
            if account_type == 'personal':
                return self.config_manager.get_personal_config()
            elif account_type == 'work':
                return self.config_manager.get_work_config()
            else:
                return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
            return None
    
    def _is_event_processed(self, event_id: str, account_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
        
        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            cache_key = f"{account_type}_{event_id}"
            return cache_key in self.calendar_events_cache
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
            return False
    
    def _mark_event_processed(self, event_id: str, account_type: str):
        """
        –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ.
        
        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            cache_key = f"{account_type}_{event_id}"
            self.calendar_events_cache[cache_key] = {
                "processed_at": datetime.now().isoformat(),
                "account_type": account_type
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
    
    def _is_account_enabled(self, account_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∫–ª—é—á–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            if account_type == 'personal':
                return self.config_manager.is_personal_enabled()
            elif account_type == 'work':
                return self.config_manager.is_work_enabled()
            else:
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
            return False
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def _get_sample_personal_events(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        return [
            {
                "id": "personal_test_1",
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                "start": "2025-08-29T15:00:00Z",
                "end": "2025-08-29T16:00:00Z",
                "attendees_count": 2
            }
        ]
    
    def _get_sample_work_events(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        return [
            {
                "id": "work_test_1",
                "title": "–†–∞–±–æ—á–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                "end": "2025-08-29T11:00:00Z",
                "attendees_count": 5
            }
        ]
