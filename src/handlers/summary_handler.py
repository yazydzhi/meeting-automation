#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
"""

import os
from typing import Dict, Any, List
from .process_handler import ProcessHandler
from .base_handler import retry
from prompt_manager import PromptManager


class SummaryHandler(ProcessHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."""
    
    def __init__(self, config_manager, transcription_handler=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∞–º–º–∞—Ä–∏.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            transcription_handler: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        self.transcription_handler = transcription_handler
        
        # TASK-3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_manager = PromptManager(config_manager)
        self.logger.info("üîß PromptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ SummaryHandler")
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process(self, *args, **kwargs) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
        """
        try:
            self._log_operation_start("–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.transcription_handler:
                result = self.transcription_handler.process_summaries()
                self._log_operation_end("–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏", result)
                return result
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            result = self._process_summaries()
            self._log_operation_end("–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏")
    
    def _process_summaries(self) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        return self.process_with_accounts(
            process_type="—Å–∞–º–º–∞—Ä–∏",
            handler_method="process_summaries",
            folder_method="_process_folder_summaries",
            stats_key="last_summary_stats"
        )
    
    def _process_folder_summaries(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ.
        
        TASK-2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –≤ –ø–∞–ø–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏
        """
        try:
            result = {
                "account": account_type, 
                "folder": folder_path, 
                "processed": 0, 
                "errors": 0, 
                "files": []
            }
            
            # TASK-2: –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ
            transcript_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        file_path = os.path.join(root, file)
                        transcript_files.append(file_path)
            
            if not transcript_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                return result
            
            self.logger.info(f"üìÑ TASK-2: –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # TASK-2: –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
            if len(transcript_files) > 1:
                self.logger.info(f"üîÑ TASK-2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ, —Å–æ–∑–¥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏")
                return self._process_multiple_transcripts(transcript_files, account_type, folder_path)
            else:
                # –û–¥–∏–Ω —Ñ–∞–π–ª - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                return self.process_folder_files(
                    folder_path=folder_path,
                    account_type=account_type,
                    file_extension='_transcript.txt',
                    should_process_func=self._should_process_transcript_file,
                    process_file_func=self._process_transcript_file
                )
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            result["errors"] += 1
            return result
    
    def _should_process_transcript_file(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        TASK-2: –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –≤ –ø–∞–ø–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –∏–Ω–∞—á–µ
        """
        try:
            if not os.path.exists(file_path):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if not file_path.lower().endswith('_transcript.txt'):
                return False
            
            # TASK-2: –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–∞–º–º–∞—Ä–∏/–∞–Ω–∞–ª–∏–∑–∞
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {file_path}: {e}")
            return False
    
    def _process_transcript_file(self, file_path: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {os.path.basename(file_path)}")
            
            # TASK-3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                prompt = self.prompt_manager.get_prompt('summary')
                settings = self.prompt_manager.get_prompt_settings('summary')
                
                self.logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {settings}")
                
                # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å OpenAI API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
                # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –≤—ã—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
            base_path = file_path.replace('_transcript.txt', '')
            summary_file = base_path + '_summary.txt'
            analysis_file = base_path + '_analysis.json'
            
            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI API
            try:
                openai_config = self.get_openai_config()
                if not openai_config:
                    self.logger.warning("‚ö†Ô∏è OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏")
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ API
                    with open(summary_file, 'w', encoding='utf-8') as f:
                        f.write(f"# –°–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(file_path)}\n\n")
                        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                        f.write(f"–°—Ç–∞—Ç—É—Å: –ë–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ (OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)\n\n")
                        f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                        f.write("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –≤ .env —Ñ–∞–π–ª–µ\n")
                else:
                    # –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API
                    self.logger.info("üîß OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏...")
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcript_content = ""
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            transcript_content = f.read()
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                        transcript_content = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
                    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:
{transcript_content}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—é—â–µ–µ:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
2. –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
3. –î–µ–π—Å—Ç–≤–∏—è –∏ –∑–∞–¥–∞—á–∏
4. –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã

–°–∞–º–º–∞—Ä–∏:"""
                    
                    # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
                    import openai
                    client = openai.OpenAI(api_key=openai_config['api_key'])
                    
                    response = client.chat.completions.create(
                        model=openai_config.get('model', 'gpt-4o-mini'),
                        messages=[
                            {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤—Å—Ç—Ä–µ—á. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=openai_config.get('temperature', 0.3),
                        max_tokens=1000
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    summary_text = response.choices[0].message.content
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏
                    with open(summary_file, 'w', encoding='utf-8') as f:
                        f.write(f"# –°–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(file_path)}\n\n")
                        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                        f.write(f"–°—Ç–∞—Ç—É—Å: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ OpenAI API\n")
                        f.write(f"–ú–æ–¥–µ–ª—å: {openai_config.get('model', 'gpt-4o-mini')}\n\n")
                        f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                        f.write(summary_text)
                    
                    self.logger.info(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ OpenAI API: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
            except ImportError:
                self.logger.error("‚ùå –ú–æ–¥—É–ª—å openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
                with open(summary_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –°–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(file_path)}\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - –º–æ–¥—É–ª—å openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n")
                    f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                    f.write("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: pip install openai\n")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
                with open(summary_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –°–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(file_path)}\n\n")
                    f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ OpenAI API - {str(e)}\n\n")
                    f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                    f.write("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI API\n")
                    f.write(f"–û—à–∏–±–∫–∞: {str(e)}\n")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞
            with open(analysis_file, 'w', encoding='utf-8') as f:
                f.write('{\n')
                f.write('  "file": "' + os.path.basename(file_path) + '",\n')
                f.write('  "created": "' + self._get_current_timestamp() + '",\n')
                f.write('  "status": "generated",\n')
                f.write('  "analysis": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",\n')
                f.write('  "method": "openai_api",\n')
                f.write('  "quality": "standard"\n')
                f.write('}\n')
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑: {summary_file}, {analysis_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {file_path}: {e}")
            return False
    
    def _process_multiple_transcripts(self, transcript_files: List[str], account_type: str, folder_path: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏.
        
        TASK-2: –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ.
        
        Args:
            transcript_files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            result = {
                "account": account_type, 
                "folder": folder_path, 
                "processed": 0, 
                "errors": 0, 
                "files": []
            }
            
            self.logger.info(f"üîÑ TASK-2: –°–æ–∑–¥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è {len(transcript_files)} —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
            folder_name = os.path.basename(folder_path)
            complex_summary_dir = os.path.join(folder_path, "complex_summary")
            os.makedirs(complex_summary_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
            timestamp = self._get_current_timestamp().replace(':', '-').replace(' ', '_')
            complex_summary_file = os.path.join(complex_summary_dir, f"{folder_name}_complex_summary_{timestamp}.txt")
            complex_analysis_file = os.path.join(complex_summary_dir, f"{folder_name}_complex_analysis_{timestamp}.json")
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            all_transcripts = []
            for transcript_file in transcript_files:
                try:
                    with open(transcript_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        filename = os.path.basename(transcript_file)
                        all_transcripts.append({
                            "file": filename,
                            "content": content,
                            "path": transcript_file
                        })
                        self.logger.debug(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {filename}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {transcript_file}: {e}")
                    result["errors"] += 1
                    continue
            
            if not all_transcripts:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                result["errors"] += 1
                return result
            
                            # TASK-3: –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API
                    openai_config = self.get_openai_config()
                    if openai_config and openai_config.get('api_key'):
                        self.logger.info("üîß OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏...")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        all_content = "\n\n".join([
                            f"=== {t['file']} ===\n{t['content']}"
                            for t in all_transcripts
                        ])
                        
                        complex_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –∏ —Å–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:

{all_content}

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—é—â–µ–µ:
1. –û–±—â–∏–µ —Ç–µ–º—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
2. –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏
3. –î–µ–π—Å—Ç–≤–∏—è –∏ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Å–µ–º –≤—Å—Ç—Ä–µ—á–∞–º
4. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è
5. –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
6. –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:"""
                        
                        # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
                        import openai
                        client = openai.OpenAI(api_key=openai_config['api_key'])
                        
                        response = client.chat.completions.create(
                            model=openai_config.get('model', 'gpt-4o-mini'),
                            messages=[
                                {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤—Å—Ç—Ä–µ—á. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                                {"role": "user", "content": complex_prompt}
                            ],
                            temperature=openai_config.get('temperature', 0.3),
                            max_tokens=2000
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        complex_summary_text = response.choices[0].message.content
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
                        with open(complex_summary_file, 'w', encoding='utf-8') as f:
                            f.write(f"# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–∞–ø–∫–∏: {folder_name}\n\n")
                            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(all_transcripts)}\n")
                            f.write(f"–ú–æ–¥–µ–ª—å: {openai_config.get('model', 'gpt-4o-mini')}\n\n")
                            
                            f.write("## –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n")
                            for transcript in all_transcripts:
                                f.write(f"- {transcript['file']}\n")
                            f.write("\n")
                            
                            f.write("## –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:\n")
                            f.write(complex_summary_text)
                        
                        self.logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ OpenAI API: {len(complex_summary_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                    else:
                        self.logger.warning("‚ö†Ô∏è OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞—é –±–∞–∑–æ–≤–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏")
                        
                        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏
                        with open(complex_summary_file, 'w', encoding='utf-8') as f:
                            f.write(f"# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–∞–ø–∫–∏: {folder_name}\n\n")
                            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(all_transcripts)}\n\n")
                            
                            f.write("## –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n")
                            for transcript in all_transcripts:
                                f.write(f"- {transcript['file']}\n")
                            f.write("\n")
                            
                            f.write("## –û–±—â–µ–µ —Ä–µ–∑—é–º–µ:\n")
                            f.write("–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ.\n")
                            f.write("–ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑.\n\n")
                            
                            f.write("## –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–π–ª–∞–º:\n")
                            for i, transcript in enumerate(all_transcripts, 1):
                                f.write(f"### {i}. {transcript['file']}\n")
                                f.write("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: [–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]\n\n")
                            
                            f.write("## –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:\n")
                            f.write("- OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n")
                            f.write("- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n")
                            f.write("- –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –≤ .env —Ñ–∞–π–ª–µ\n")
                
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏: {e}")
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    with open(complex_summary_file, 'w', encoding='utf-8') as f:
                        f.write(f"# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–∞–ø–∫–∏: {folder_name}\n\n")
                        f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                        f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(all_transcripts)}\n\n")
                        f.write(f"## –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:\n")
                        f.write(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏: {str(e)}\n")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ JSON
                complex_analysis = {
                    "folder_name": folder_name,
                    "created": self._get_current_timestamp(),
                    "total_videos": len(all_transcripts),
                    "files_processed": [t["file"] for t in all_transcripts],
                    "summary_type": "complex",
                    "status": "success"
                }
                
                with open(complex_analysis_file, 'w', encoding='utf-8') as f:
                    import json
                    json.dump(complex_analysis, f, ensure_ascii=False, indent=2)
                
                self.logger.info(f"‚úÖ TASK-2: –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏: {complex_summary_file}")
                self.logger.info(f"‚úÖ TASK-2: –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {complex_analysis_file}")
                
                result["processed"] = len(all_transcripts)
                result["files"] = [t["file"] for t in all_transcripts]
                
                # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                for transcript in all_transcripts:
                    try:
                        if self._process_transcript_file(transcript["path"]):
                            self.logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è: {transcript['file']}")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è: {transcript['file']}")
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è {transcript['file']}: {e}")
                        result["errors"] += 1
                
                return result
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏: {e}")
                result["errors"] += 1
                return result
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {e}")
            result["errors"] += 1
            return result
    
    def _get_current_timestamp(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        """
        from datetime import datetime
        return datetime.now().isoformat()
    
    def count_transcript_files(self, folder_path: str) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        transcript_path = os.path.join(root, file)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                        if self._should_process_transcript_file(transcript_path):
                            count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {e}")
            return 0
    
    def get_openai_config(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏.
        
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            if hasattr(self.config_manager, 'get_openai_config'):
                return self.config_manager.get_openai_config()
            else:
                self.logger.warning("‚ö†Ô∏è ConfigManager –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç get_openai_config")
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI: {e}")
            return {}
    
    def validate_openai_config(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI.
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            openai_config = self.get_openai_config()
            api_key = openai_config.get('api_key')
            
            if not api_key:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á OpenAI")
                return False
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI: {e}")
            return False
