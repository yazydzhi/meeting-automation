#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
"""

import os
import logging
from typing import Dict, Any, List
from .base_handler import BaseHandler
from .process_handler import ProcessHandler


class SummaryHandler(ProcessHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."""
    
    def __init__(self, config_manager, transcription_handler=None, logger=None):
        super().__init__(config_manager, logger)
        self.transcription_handler = transcription_handler
        try:
            from prompt_manager import PromptManager
            self.prompt_manager = PromptManager(config_manager)
        except ImportError:
            self.prompt_manager = None
            self.logger.warning("‚ö†Ô∏è PromptManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    def process(self, account_type: str = 'both') -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('personal', 'work', 'both')
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info("üìã –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏...")
            
            results = []
            total_processed = 0
            total_errors = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if account_type in ['personal', 'both'] and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = self._process_folder_summaries(personal_folder, "personal")
                    results.append(personal_result)
                    total_processed += personal_result.get("processed", 0)
                    total_errors += personal_result.get("errors", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if account_type in ['work', 'both'] and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = self._process_folder_summaries(work_folder, "work")
                    results.append(work_result)
                    total_processed += work_result.get("processed", 0)
                    total_errors += work_result.get("errors", 0)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {total_errors} –æ—à–∏–±–æ–∫")
            return {
                "status": "success",
                "message": "Summary processing completed",
                "results": results,
                "total_processed": total_processed,
                "total_errors": total_errors
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return {"status": "error", "message": str(e)}
    
    def _process_folder_summaries(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            transcript_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        transcript_files.append(os.path.join(root, file))
            
            if not transcript_files:
                self.logger.info(f"üìÅ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {folder_path}")
                return result
            
            self.logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            for transcript_file in transcript_files:
                try:
                    if self._should_process_transcript_file(transcript_file):
                        if self._process_transcript_file(transcript_file):
                            result["processed"] += 1
                            result["files"].append({
                                "file": os.path.basename(transcript_file),
                                "status": "success"
                            })
                        else:
                            result["errors"] += 1
                            result["files"].append({
                                "file": os.path.basename(transcript_file),
                                "status": "error"
                            })
                    else:
                        result["files"].append({
                            "file": os.path.basename(transcript_file),
                            "status": "already_processed"
                        })
                        
                except Exception as e:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(transcript_file),
                        "status": "error",
                        "error": str(e)
                    })
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}
    
    def _should_process_transcript_file(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –∏–Ω–∞—á–µ
        """
        try:
            if not os.path.exists(file_path):
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
            base_path = os.path.splitext(file_path)[0]
            summary_file = base_path + '_summary.txt'
            analysis_file = base_path + '_analysis.json'
            
            # TASK-2: –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def _process_transcript_file(self, file_path: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {os.path.basename(file_path)}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            base_path = os.path.splitext(file_path)[0]
            summary_file = base_path + '_summary.txt'
            analysis_file = base_path + '_analysis.json'
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(f"# –°–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(file_path)}\n\n")
                f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self._get_current_timestamp()}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: –ë–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏\n\n")
                f.write("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n")
                f.write("–ë–∞–∑–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞
            with open(analysis_file, 'w', encoding='utf-8') as f:
                f.write('{\n')
                f.write('  "file": "' + os.path.basename(file_path) + '",\n')
                f.write('  "created": "' + self._get_current_timestamp() + '",\n')
                f.write('  "status": "generated",\n')
                f.write('  "analysis": "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"\n')
                f.write('}\n')
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑: {summary_file}, {analysis_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {file_path}: {e}")
            return False
    
    def _get_current_timestamp(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp.
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        """
        from datetime import datetime
        return datetime.now().isoformat()
    
    def count_transcript_files(self, folder_path: str) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        transcript_path = os.path.join(root, file)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                        if self._should_process_transcript_file(transcript_path):
                            count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {e}")
            return 0
    
    def get_openai_config(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏.
        
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            if hasattr(self.config_manager, 'get_openai_config'):
                return self.config_manager.get_openai_config()
            else:
                self.logger.warning("‚ö†Ô∏è ConfigManager –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç get_openai_config")
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI: {e}")
            return {}
    
    def validate_openai_config(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI.
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            openai_config = self.get_openai_config()
            api_key = openai_config.get('api_key')
            
            if not api_key:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á OpenAI")
                return False
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI: {e}")
            return False
