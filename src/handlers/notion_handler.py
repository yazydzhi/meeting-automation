#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
"""

from typing import Dict, Any, List
from .base_handler import BaseHandler, retry
import os
import pytz
from datetime import datetime


class NotionHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion."""
    
    def __init__(self, config_manager, notion_handler=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Notion.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            notion_handler: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Notion (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger: –õ–æ–≥–≥–µ—Ä
        """
        super().__init__(config_manager, logger)
        self.notion_handler = notion_handler
        self.last_notion_stats = {}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process(self, *args, **kwargs) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            self._log_operation_start("—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.notion_handler:
                result = self.notion_handler.sync_with_notion()
                self.last_notion_stats = result
                self._log_operation_end("—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion", result)
                return result
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            result = self._sync_with_notion()
            self.last_notion_stats = result
            self._log_operation_end("—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion", result)
            return result
            
        except Exception as e:
            return self._create_error_result(e, "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion")
    
    def _sync_with_notion(self) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            self.logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Notion
            if not self._validate_notion_config():
                return self._create_error_result(
                    Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion"), 
                    "–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                )
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ NotionHandler
            
            notion_stats = {
                "status": "success", 
                "synced": 0, 
                "errors": 0, 
                "details": ["–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            self.last_notion_stats = notion_stats
            
            return notion_stats
            
        except Exception as e:
            return self._create_error_result(e, "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion")
    
    def _validate_notion_config(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Notion.
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            notion_config = self.config_manager.get_notion_config()
            token = notion_config.get('token')
            database_id = notion_config.get('database_id')
            
            if not token:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Notion —Ç–æ–∫–µ–Ω")
                return False
            
            if not database_id:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion")
                return False
            
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Notion: {e}")
            return False
    
    def get_notion_config(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Notion.
        
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            if hasattr(self.config_manager, 'get_notion_config'):
                return self.config_manager.get_notion_config()
            else:
                self.logger.warning("‚ö†Ô∏è ConfigManager –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç get_notion_config")
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Notion: {e}")
            return {}
    
    def create_meeting_page(self, event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        TASK-4: –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å—Ç—Ä–µ—á–∏ –≤ Notion —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω.
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            self.logger.info(f"üîß TASK-4: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω")
            self.logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._validate_notion_config():
                return self._create_error_result(
                    Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion"), 
                    "—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏"
                )
            
            # TASK-4: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã
            timezone_str = self.config_manager.get_general_config().get('timezone', 'Europe/Moscow')
            timezone = pytz.timezone(timezone_str)
            
            self.logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–π–º–∑–æ–Ω–∞: {timezone_str}")
            
            # TASK-4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            start_dt = event_data.get('start')
            end_dt = event_data.get('end')
            
            if start_dt and end_dt:
                try:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ datetime –æ–±—ä–µ–∫—Ç—ã –∏–º–µ—é—Ç —Ç–∞–π–º–∑–æ–Ω—É
                    if not start_dt.tzinfo:
                        start_dt = timezone.localize(start_dt)
                    if not end_dt.tzinfo:
                        end_dt = timezone.localize(end_dt)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à—É —Ç–∞–π–º–∑–æ–Ω—É
                    start_dt = start_dt.astimezone(timezone)
                    end_dt = end_dt.astimezone(timezone)
                    
                    self.logger.info(f"üîß –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ {timezone}: {start_dt.strftime('%Y-%m-%d %H:%M %Z')}")
                    self.logger.info(f"üîß –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ {timezone}: {end_dt.strftime('%Y-%m-%d %H:%M %Z')}")
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            
            # TASK-4: –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            properties = self._create_meeting_properties(event_data, timezone)
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –∫ Notion
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω
            
            result = {
                "status": "success",
                "page_id": "test_page_id_tz_fixed",
                "message": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω (–∑–∞–≥–ª—É—à–∫–∞)"
            }
            
            self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–Ω–∞: {result['page_id']}")
            return result
            
        except Exception as e:
            return self._create_error_result(e, "—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏")
    
    def update_meeting_page(self, page_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å—Ç—Ä–µ—á–∏ –≤ Notion.
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            update_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            self.logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏: {page_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._validate_notion_config():
                return self._create_error_result(
                    Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion"), 
                    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏"
                )
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            
            result = {
                "status": "success",
                "page_id": page_id,
                "message": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"
            }
            
            self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {page_id}")
            return result
            
        except Exception as e:
            return self._create_error_result(e, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏")
    
    def search_meeting_page(self, title: str, date: str) -> Dict[str, Any]:
        """
        –ò—â–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Å—Ç—Ä–µ—á–∏ –≤ Notion.
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            date: –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        """
        try:
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏: {title} ({date})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._validate_notion_config():
                return self._create_error_result(
                    Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notion"), 
                    "–ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏"
                )
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            
            result = {
                "status": "success",
                "found": False,
                "page_id": None,
                "message": "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)"
            }
            
            self.logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {result['found']}")
            return result
            
        except Exception as e:
            return self._create_error_result(e, "–ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏")
    
    def get_notion_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion.
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        return self.last_notion_stats
    
    def reset_notion_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion."""
        self.last_notion_stats = {}
        self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Notion —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def _create_meeting_properties(self, event_data: Dict[str, Any], timezone: pytz.timezone) -> Dict[str, Any]:
        """
        TASK-4: –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω.
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            timezone: –û–±—ä–µ–∫—Ç —Ç–∞–π–º–∑–æ–Ω—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–≤–æ–π—Å—Ç–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            properties = {}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            if event_data.get('title'):
                properties['Name'] = {
                    "title": [
                        {
                            "text": {
                                "content": str(event_data['title'])
                            }
                        }
                    ]
                }
            
            # TASK-4: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω—ã
            start_dt = event_data.get('start')
            end_dt = event_data.get('end')
            
            if start_dt and end_dt:
                try:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ datetime –æ–±—ä–µ–∫—Ç—ã –∏–º–µ—é—Ç —Ç–∞–π–º–∑–æ–Ω—É
                    if not start_dt.tzinfo:
                        start_dt = timezone.localize(start_dt)
                    if not end_dt.tzinfo:
                        end_dt = timezone.localize(end_dt)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à—É —Ç–∞–π–º–∑–æ–Ω—É
                    start_dt = start_dt.astimezone(timezone)
                    end_dt = end_dt.astimezone(timezone)
                    
                    properties['Date & Time'] = {
                        "date": {
                            "start": start_dt.isoformat(),
                            "end": end_dt.isoformat()
                        }
                    }
                    
                    self.logger.info(f"üîß –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π: {start_dt.strftime('%Y-%m-%d %H:%M')} - {end_dt.strftime('%H:%M')}")
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if event_data.get('description'):
                properties['Description'] = {
                    "rich_text": [
                        {
                            "text": {
                                "content": str(event_data['description'])
                            }
                        }
                    ]
                }
            
            # –ú–µ—Å—Ç–æ
            if event_data.get('location'):
                properties['Location'] = {
                    "rich_text": [
                        {
                            "text": {
                                "content": str(event_data['location'])
                            }
                        }
                    ]
                }
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            if event_data.get('attendees'):
                attendees = event_data.get('attendees')
                if isinstance(attendees, list):
                    attendee_text = ", ".join([str(attendee) for attendee in attendees])
                else:
                    attendee_text = str(attendees)
                
                properties['Attendees'] = {
                    "rich_text": [
                        {
                            "text": {
                                "content": attendee_text
                            }
                        }
                    ]
                }
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
            if event_data.get('meeting_link'):
                properties['Meeting Link'] = {
                    "url": str(event_data['meeting_link'])
                }
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É
            if event_data.get('folder_link'):
                properties['Folder Link'] = {
                    "url": str(event_data['folder_link'])
                }
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            if event_data.get('calendar_source'):
                properties['Calendar Source'] = {
                    "select": {
                        "name": str(event_data['calendar_source'])
                    }
                }
            
            # –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            if event_data.get('account_type'):
                properties['Account Type'] = {
                    "select": {
                        "name": str(event_data['account_type'])
                    }
                }
            
            # TASK-4: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–π–º–∑–æ–Ω–µ
            properties['Timezone'] = {
                "rich_text": [
                    {
                        "text": {
                            "content": str(timezone)
                        }
                    }
                ]
            }
            
            properties['Created At'] = {
                "date": {
                    "start": timezone.localize(datetime.now()).isoformat()
                }
            }
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(properties)} —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏")
            return properties
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏: {e}")
            return {}
