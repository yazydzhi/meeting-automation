"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü Notion.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤—Å—Ç—Ä–µ—á.
"""

import json
import os
from typing import Dict, Any, List
from datetime import datetime


def load_meeting_template(template_path: str = "templates/meeting_page_template.json") -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞.
    
    Args:
        template_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —à–∞–±–ª–æ–Ω–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        json.JSONDecodeError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON
    """
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            template = json.load(f)
        return template
    except FileNotFoundError:
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
    except json.JSONDecodeError as e:
        raise json.JSONDecodeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —à–∞–±–ª–æ–Ω–µ: {e}", e.doc, e.pos)


def create_customized_template(
    title: str,
    start_time: str,
    end_time: str,
    attendees: List[str],
    meeting_link: str = "",
    drive_link: str = ""
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
        end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
        attendees: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        meeting_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        drive_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É Google Drive
        
    Returns:
        –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = load_meeting_template()
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    customized_template = {
        "children": []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏
    customized_template["children"].append({
        "object": "block",
        "type": "heading_1",
        "heading_1": {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": f"üìã {title}"
                    }
                }
            ]
        }
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    if start_time and end_time:
        try:
            start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            end_dt = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            
            time_info = f"‚è∞ {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}"
            
            customized_template["children"].append({
                "object": "block",
                "type": "callout",
                "callout": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": time_info
                            }
                        }
                    ],
                    "icon": {
                        "type": "emoji",
                        "emoji": "‚è∞"
                    },
                    "color": "blue_background"
                }
            })
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if attendees:
        attendees_text = ", ".join(attendees)
        customized_template["children"].append({
            "object": "block",
            "type": "callout",
            "callout": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees_text}"
                        }
                    }
                ],
                "icon": {
                    "type": "emoji",
                    "emoji": "üë•"
                },
                "color": "yellow_background"
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    customized_template["children"].append({
        "object": "block",
        "type": "divider",
        "divider": {}
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    for block in base_template["children"]:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
        if block.get("type") in ["heading_1"]:
            continue
        if (block.get("type") == "callout" and 
            block.get("callout", {}).get("rich_text", [{}])[0].get("text", {}).get("content", "").startswith("–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏")):
            continue
            
        customized_template["children"].append(block)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü
    if meeting_link or drive_link:
        customized_template["children"].append({
            "object": "block",
            "type": "divider",
            "divider": {}
        })
        
        customized_template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
                        }
                    }
                ]
            }
        })
        
        if meeting_link:
            customized_template["children"].append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìπ "
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É",
                                "link": {
                                    "url": meeting_link
                                }
                            }
                        }
                    ]
                }
            })
        
        if drive_link:
            customized_template["children"].append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìÅ "
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "–ü–∞–ø–∫–∞ Google Drive",
                                "link": {
                                    "url": drive_link
                                }
                            }
                        }
                    ]
                }
            })
    
    return customized_template


def apply_template_to_page(
    notion_token: str,
    page_id: str,
    template: Dict[str, Any]
) -> bool:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ Notion.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ children –∏–∑ —à–∞–±–ª–æ–Ω–∞
        if "children" in template:
            template_data = {"children": template["children"]}
        else:
            print(f"‚ö†Ô∏è –í —à–∞–±–ª–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'children'")
            return False
            
        response = requests.patch(url, headers=headers, json=template_data)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚úñ –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            print(f"   –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
        return False


def add_meeting_details_to_page(
    notion_token: str,
    page_id: str,
    event_data: Dict[str, Any],
    logger=None
) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        True –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    detail_blocks = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("description"):
        detail_blocks.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {event_data.get('description', '')}"
                        }
                    }
                ]
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("location"):
        detail_blocks.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {event_data.get('location', '')}"
                        }
                    }
                ]
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("attendees") and len(event_data.get("attendees", [])) > 0:
        attendees_text = ", ".join(event_data.get("attendees", [])[:10])
        detail_blocks.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees_text}"
                        }
                    }
                ]
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("meeting_link"):
        detail_blocks.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: "
                        }
                    },
                    {
                        "type": "text",
                        "text": {
                            "content": event_data.get("meeting_link", ""),
                            "link": {
                                "url": event_data.get("meeting_link", "")
                            }
                        }
                    }
                ]
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if event_data.get("calendar_source"):
        detail_blocks.append({
            "object": "block",
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üìÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {event_data.get('calendar_source', '')}"
                        }
                    }
                ]
            }
        })
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if detail_blocks:
        try:
            url = f"https://api.notion.com/v1/blocks/{page_id}/children"
            response = requests.patch(url, headers=headers, json={"children": detail_blocks})
            response.raise_for_status()
            
            if logger:
                logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}")
            else:
                print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}")
            
            return True
            
        except Exception as e:
            if logger:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}: {e}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}: {e}")
            return False
    
    return True  # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º


def create_simple_notion_page(
    notion_token: str,
    database_id: str,
    event_data: Dict[str, Any],
    logger=None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion –±–µ–∑ —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    notion_properties = {
        "Name": {
            "title": [
                {
                    "type": "text",
                    "text": {
                        "content": event_data.get("title", "–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    }
                }
            ]
        }
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("date") and event_data.get("start_time"):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
        date_str = event_data.get("date", "")
        start_time = event_data.get("start_time", "")
        end_time = event_data.get("end_time", "")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
        # –í—Ä–µ–º—è —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º +03:00
        date_obj = {
            "start": f"{date_str}T{start_time}:00"  # –ë–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã, Notion –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if end_time:
            date_obj["end"] = f"{date_str}T{end_time}:00"
        
        notion_properties["Date"] = {"date": date_obj}
        
        if logger:
            logger.info(f"üïê –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ –≤ Notion: {date_str} {start_time}-{end_time}")
    elif event_data.get("date"):
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        notion_properties["Date"] = {
            "date": {
                "start": event_data.get("date", "")
            }
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("attendees"):
        attendees_list = event_data.get("attendees", [])
        if isinstance(attendees_list, list) and attendees_list:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            attendees_text = ", ".join(attendees_list[:10])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            notion_properties["Attendees"] = {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": attendees_text
                        }
                    }
                ]
            }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("meeting_link"):
        notion_properties["Meeting Link"] = {
            "url": event_data.get("meeting_link", "")
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if event_data.get("account_type"):
        notion_properties["Calendar"] = {
            "select": {
                "name": event_data.get("account_type", "unknown")
            }
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Drive, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("folder_link"):
        notion_properties["Drive Folder"] = {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": event_data.get("folder_link", "")
                    }
                }
            ]
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º Event ID, –µ—Å–ª–∏ –µ—Å—Ç—å
    if event_data.get("event_id"):
        notion_properties["Event ID"] = {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": str(event_data.get("event_id", ""))
                    }
                }
            ]
        }
    
    create_data = {
        "parent": {"database_id": database_id},
        "properties": notion_properties
    }
    
    try:
        if logger:
            logger.info(f"üîß –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion...")
            logger.info(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id}")
            logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data.get('title', '–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            logger.info(f"   –°–≤–æ–π—Å—Ç–≤–∞: {list(notion_properties.keys())}")
        else:
            print(f"üîß –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion...")
            print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data.get('title', '–í—Å—Ç—Ä–µ—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –°–≤–æ–π—Å—Ç–≤–∞: {list(notion_properties.keys())}")
        
        response = requests.post(
            "https://api.notion.com/v1/pages",
            headers=headers,
            json=create_data
        )
        
        if response.status_code != 200:
            if logger:
                logger.error(f"‚úñ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                logger.error(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            else:
                print(f"‚úñ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return ""
            
        response.raise_for_status()
        page_data = response.json()
        page_id = page_data["id"]
        
        if logger:
            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {page_id}")
        else:
            print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {page_id}")
        return page_id
        
    except Exception as e:
        if logger:
            logger.error(f"‚úñ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        else:
            print(f"‚úñ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return ""


def check_page_exists(
    notion_token: str,
    database_id: str,
    event_title: str,
    event_date: str,
    logger=None
) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        event_date: –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
        
    Returns:
        ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    
    query_data = {
        "filter": {
            "and": [
                {
                    "property": "Name",
                    "title": {
                        "equals": event_title
                    }
                },
                {
                    "property": "Date",
                    "date": {
                        "equals": event_date
                    }
                }
            ]
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=query_data)
        response.raise_for_status()
        
        results = response.json().get("results", [])
        
        if results:
            existing_page_id = results[0]["id"]
            if logger:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {existing_page_id}")
            else:
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {existing_page_id}")
            return existing_page_id
        
        return ""
        
    except Exception as e:
        if logger:
            logger.error(f"‚úñ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        else:
            print(f"‚úñ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return ""


def create_page_with_template(
    notion_token: str,
    database_id: str,
    event_data: Dict[str, Any],
    template: Dict[str, Any],
    logger=None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    existing_page_id = check_page_exists(
        notion_token, 
        database_id, 
        event_data.get("title", ""), 
        event_data.get("date", ""),
        logger
    )
    
    if existing_page_id:
        if logger:
            logger.info(f"‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ: {existing_page_id}")
        else:
            print(f"‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ: {existing_page_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if logger:
            logger.info(f"üîß –î–æ–±–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {existing_page_id}...")
        else:
            print(f"üîß –î–æ–±–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {existing_page_id}...")
        
        add_meeting_details_to_page(notion_token, existing_page_id, event_data, logger)
        
        return existing_page_id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_id = create_simple_notion_page(notion_token, database_id, event_data, logger)
    if not page_id:
        return ""
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
    if logger:
        logger.info(f"üîß –ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}...")
    else:
        print(f"üîß –ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}...")
        
    if apply_template_to_page(notion_token, page_id, template):
        if logger:
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
        if logger:
            logger.info(f"üîß –î–æ–±–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}...")
        else:
            print(f"üîß –î–æ–±–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_id}...")
        
        add_meeting_details_to_page(notion_token, page_id, event_data, logger)
        
        return page_id
    else:
        if logger:
            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —à–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω: {page_id}")
        else:
            print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —à–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω: {page_id}")
        return page_id
