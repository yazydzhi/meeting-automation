"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü Notion.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤—Å—Ç—Ä–µ—á.
"""

import json
import os
from typing import Dict, Any, List
from datetime import datetime


def load_meeting_template(template_path: str = "templates/meeting_page_template.json") -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞.
    
    Args:
        template_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —à–∞–±–ª–æ–Ω–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        json.JSONDecodeError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π JSON
    """
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            template = json.load(f)
        return template
    except FileNotFoundError:
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
    except json.JSONDecodeError as e:
        raise json.JSONDecodeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —à–∞–±–ª–æ–Ω–µ: {e}", e.doc, e.pos)


def create_customized_template(
    title: str,
    start_time: str,
    end_time: str,
    attendees: List[str],
    meeting_link: str = "",
    drive_link: str = ""
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
        end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
        attendees: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        meeting_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        drive_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É Google Drive
        
    Returns:
        –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = load_meeting_template()
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    customized_template = {
        "children": []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–µ—á–∏
    customized_template["children"].append({
        "object": "block",
        "type": "heading_1",
        "heading_1": {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": f"üìã {title}"
                    }
                }
            ]
        }
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    if start_time and end_time:
        try:
            start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
            end_dt = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
            
            time_info = f"‚è∞ {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}"
            
            customized_template["children"].append({
                "object": "block",
                "type": "callout",
                "callout": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": time_info
                            }
                        }
                    ],
                    "icon": {
                        "type": "emoji",
                        "emoji": "‚è∞"
                    },
                    "color": "blue_background"
                }
            })
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
            pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if attendees:
        attendees_text = ", ".join(attendees)
        customized_template["children"].append({
            "object": "block",
            "type": "callout",
            "callout": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees_text}"
                        }
                    }
                ],
                "icon": {
                    "type": "emoji",
                    "emoji": "üë•"
                },
                "color": "yellow_background"
            }
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    customized_template["children"].append({
        "object": "block",
        "type": "divider",
        "divider": {}
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    for block in base_template["children"]:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—Ä–µ–º—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
        if block.get("type") in ["heading_1"]:
            continue
        if (block.get("type") == "callout" and 
            block.get("callout", {}).get("rich_text", [{}])[0].get("text", {}).get("content", "").startswith("–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏")):
            continue
            
        customized_template["children"].append(block)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü
    if meeting_link or drive_link:
        customized_template["children"].append({
            "object": "block",
            "type": "divider",
            "divider": {}
        })
        
        customized_template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
                        }
                    }
                ]
            }
        })
        
        if meeting_link:
            customized_template["children"].append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìπ "
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É",
                                "link": {
                                    "url": meeting_link
                                }
                            }
                        }
                    ]
                }
            })
        
        if drive_link:
            customized_template["children"].append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìÅ "
                            }
                        },
                        {
                            "type": "text",
                            "text": {
                                "content": "–ü–∞–ø–∫–∞ Google Drive",
                                "link": {
                                    "url": drive_link
                                }
                            }
                        }
                    ]
                }
            })
    
    return customized_template


def apply_template_to_page(
    notion_token: str,
    page_id: str,
    template: Dict[str, Any]
) -> bool:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ Notion.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    try:
        response = requests.patch(url, headers=headers, json=template)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚úñ –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_id}: {e}")
        return False


def create_page_with_template(
    notion_token: str,
    database_id: str,
    properties: Dict[str, Any],
    template: Dict[str, Any]
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        properties: –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
    Returns:
        ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    import requests
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
    create_data = {
        "parent": {"database_id": database_id},
        "properties": properties
    }
    
    try:
        response = requests.post(
            "https://api.notion.com/v1/pages",
            headers=headers,
            json=create_data
        )
        response.raise_for_status()
        page_data = response.json()
        page_id = page_data["id"]
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if apply_template_to_page(notion_token, page_id, template):
            return page_id
        else:
            print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —à–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω: {page_id}")
            return page_id
            
    except Exception as e:
        print(f"‚úñ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —à–∞–±–ª–æ–Ω–æ–º: {e}")
        return ""
