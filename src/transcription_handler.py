#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
"""

import os
import sys
import re
import json
import logging
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from src.config_manager import ConfigManager
    from src.transcript_analyzer import TranscriptAnalyzer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class TranscriptionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, config_manager: ConfigManager, logger: Optional[logging.Logger] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config_manager = config_manager
        self.logger = logger or logging.getLogger(__name__)
    
    def process_transcription(self) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
            
            transcription_stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            has_audio_files = False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_audio_files = self._count_audio_files(personal_folder)
                    if personal_audio_files > 0:
                        self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {personal_audio_files} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                        has_audio_files = True
                        self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                        personal_result = self._process_folder_transcription(personal_folder, "personal")
                        transcription_stats["details"].append(personal_result)
                        transcription_stats["processed"] += personal_result.get("processed", 0)
                        transcription_stats["errors"] += personal_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_audio_files = self._count_audio_files(work_folder)
                    if work_audio_files > 0:
                        self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {work_audio_files} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                        has_audio_files = True
                        self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                        work_result = self._process_folder_transcription(work_folder, "work")
                        transcription_stats["details"].append(work_result)
                        transcription_stats["processed"] += work_result.get("processed", 0)
                        transcription_stats["errors"] += work_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            if not has_audio_files:
                self.logger.info("üìÇ –ù–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                transcription_stats["status"] = "no_files"
            
            self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats['processed']}, –æ—à–∏–±–æ–∫ {transcription_stats['errors']}")
            
            return transcription_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            return error_stats
    
    def process_summaries(self) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            self.logger.info("üìù –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
            
            summary_stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            has_transcriptions = False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = self._process_folder_summaries(personal_folder, "personal")
                    if personal_result["processed"] > 0:
                        has_transcriptions = True
                        summary_stats["details"].append(personal_result)
                        summary_stats["processed"] += personal_result.get("processed", 0)
                        summary_stats["errors"] += personal_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = self._process_folder_summaries(work_folder, "work")
                    if work_result["processed"] > 0:
                        has_transcriptions = True
                        summary_stats["details"].append(work_result)
                        summary_stats["processed"] += work_result.get("processed", 0)
                        summary_stats["errors"] += work_result.get("errors", 0)
                    else:
                        self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            if not has_transcriptions:
                self.logger.info("üìÇ –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                summary_stats["status"] = "no_files"
            
            self.logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats['processed']}, –æ—à–∏–±–æ–∫ {summary_stats['errors']}")
            
            return summary_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            return error_stats
    
    def _count_audio_files(self, folder_path: str) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        """
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3') and not file.lower().endswith('_compressed.mp3'):
                        mp3_path = os.path.join(root, file)
                        transcript_file = mp3_path.replace('.mp3', '_transcript.txt')
                        if not os.path.exists(transcript_file):
                            count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {e}")
            return 0
    
    def _process_folder_transcription(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3') and not file.lower().endswith('_compressed.mp3'):
                        mp3_path = os.path.join(root, file)
                        transcript_file = mp3_path.replace('.mp3', '_transcript.txt')
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                        if os.path.exists(transcript_file):
                            continue
                        
                        try:
                            self.logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é: {file}")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Whisper
                            whisper_config = self.config_manager.get_whisper_config()
                            model_type = whisper_config.get('model_type', 'base')
                            language = whisper_config.get('language', 'ru')
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ meeting_automation_universal.py
                            cmd = [
                                sys.executable,
                                'meeting_automation_universal.py',
                                'transcribe',
                                '--file', mp3_path,
                                '--model', model_type,
                                '--language', language
                            ]
                            
                            self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                            process = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 –º–∏–Ω—É—Ç
                            
                            if process.returncode == 0:
                                if os.path.exists(transcript_file):
                                    self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {os.path.basename(transcript_file)}")
                                    result["processed"] += 1
                                    result["files"].append({
                                        "file": os.path.basename(mp3_path),
                                        "output": os.path.basename(transcript_file),
                                        "status": "success"
                                    })
                                else:
                                    self.logger.error(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, —Ö–æ—Ç—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {os.path.basename(mp3_path)}")
                                    result["errors"] += 1
                                    result["files"].append({
                                        "file": os.path.basename(mp3_path),
                                        "status": "error",
                                        "error": "–§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω"
                                    })
                            else:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {process.stderr}")
                                result["errors"] += 1
                                result["files"].append({
                                    "file": os.path.basename(mp3_path),
                                    "status": "error",
                                    "error": process.stderr
                                })
                                
                        except subprocess.TimeoutExpired:
                            self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {file}")
                            result["errors"] += 1
                            result["files"].append({
                                "file": os.path.basename(mp3_path),
                                "status": "error",
                                "error": "Timeout"
                            })
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {file}: {e}")
                            result["errors"] += 1
                            result["files"].append({
                                "file": os.path.basename(mp3_path),
                                "status": "error",
                                "error": str(e)
                            })
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}
    
    def _process_folder_summaries(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ.
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            transcript_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å–∞–º–º–∞—Ä–∏
                        transcript_path = os.path.join(root, file)
                        summary_file = transcript_path.replace('_transcript.txt', '_summary.txt')
                        analysis_file = transcript_path.replace('_transcript.txt', '_analysis.json')
                        
                        # –ï—Å–ª–∏ —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
                        if os.path.exists(summary_file) or os.path.exists(analysis_file):
                            continue
                        
                        transcript_files.append(transcript_path)
            
            if not transcript_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return result
            
            self.logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
            openai_config = self.config_manager.get_openai_config()
            openai_api_key = openai_config.get('api_key')
            
            if not openai_api_key:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á OpenAI")
                result["errors"] += 1
                return result
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            analyzer = TranscriptAnalyzer(
                api_key=openai_api_key,
                model=openai_config.get('analysis_model', 'gpt-4o-mini')
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            for transcript_path in transcript_files:
                try:
                    file_name = os.path.basename(transcript_path)
                    self.logger.info(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {file_name}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    meeting_title = ""
                    meeting_date = ""
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    date_match = re.search(r'(\d{4}-\d{2}-\d{2})', file_name)
                    if date_match:
                        meeting_date = date_match.group(1)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
                    if meeting_date:
                        title_match = re.search(rf'{meeting_date}.*?_transcript\.txt', file_name)
                        if title_match:
                            meeting_title = title_match.group(0).replace(f"{meeting_date} ", "").replace("_transcript.txt", "")
                    
                    # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    with open(transcript_path, 'r', encoding='utf-8') as f:
                        transcript_text = f.read()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    analysis_result = analyzer.analyze_meeting_transcript(
                        transcript=transcript_text,
                        meeting_title=meeting_title,
                        meeting_date=meeting_date
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON
                    analysis_file = transcript_path.replace('_transcript.txt', '_analysis.json')
                    with open(analysis_file, 'w', encoding='utf-8') as f:
                        json.dump(analysis_result, f, ensure_ascii=False, indent=2)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
                    summary_file = transcript_path.replace('_transcript.txt', '_summary.txt')
                    with open(summary_file, 'w', encoding='utf-8') as f:
                        summary = analysis_result.get('meeting_summary', {})
                        f.write(f"# {summary.get('title', '–í—Å—Ç—Ä–µ—á–∞')}\n\n")
                        f.write(f"–î–∞—Ç–∞: {meeting_date}\n\n")
                        f.write(f"## –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞\n{summary.get('main_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n")
                        
                        # –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
                        f.write("## –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n")
                        for decision in summary.get('key_decisions', []):
                            f.write(f"- {decision}\n")
                        f.write("\n")
                        
                        # –î–µ–π—Å—Ç–≤–∏—è
                        f.write("## –î–µ–π—Å—Ç–≤–∏—è\n")
                        for action in summary.get('action_items', []):
                            f.write(f"- {action}\n")
                        f.write("\n")
                        
                        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
                        f.write("## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n")
                        for step in summary.get('next_steps', []):
                            f.write(f"- {step}\n")
                        f.write("\n")
                        
                        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                        f.write("## –£—á–∞—Å—Ç–Ω–∏–∫–∏\n")
                        for participant in summary.get('participants', []):
                            f.write(f"- {participant}\n")
                    
                    result["processed"] += 1
                    result["files"].append({
                        "file": file_name,
                        "status": "success",
                        "output": os.path.basename(summary_file)
                    })
                    
                    self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {file_name}")
                    
                except Exception as e:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(transcript_path),
                        "status": "error",
                        "error": str(e)
                    })
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {os.path.basename(transcript_path)}: {e}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}


def get_transcription_handler(config_manager: ConfigManager, logger: Optional[logging.Logger] = None) -> TranscriptionHandler:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
    
    Args:
        config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger: –õ–æ–≥–≥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    """
    return TranscriptionHandler(config_manager, logger)
