"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ OpenAI API.
–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Notion.
"""

import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from openai import OpenAI


class TranscriptAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ OpenAI API"""
    
    def __init__(self, api_key: str, model: str = "gpt-4o-mini"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            api_key: OpenAI API –∫–ª—é—á
            model: –ú–æ–¥–µ–ª—å GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.client = OpenAI(api_key=api_key)
        self.model = model
        self.logger = logging.getLogger(__name__)
        
    def analyze_meeting_transcript(
        self, 
        transcript: str, 
        meeting_title: str = "",
        meeting_date: str = ""
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            transcript: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            meeting_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            meeting_date: –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            self.logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._create_analysis_prompt(transcript, meeting_title, meeting_date)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.3,
                max_tokens=4000
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            analysis_text = response.choices[0].message.content
            self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {analysis_text[:200]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            analysis_data = self._extract_json_from_response(analysis_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            analysis_data['analysis_metadata'] = {
                'analyzed_at': datetime.now().isoformat(),
                'model_used': self.model,
                'meeting_title': meeting_title,
                'meeting_date': meeting_date,
                'transcript_length': len(transcript)
            }
            
            return analysis_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return self._create_fallback_analysis(transcript, meeting_title, meeting_date)
    
    def _create_analysis_prompt(self, transcript: str, meeting_title: str, meeting_date: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–µ–ª–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {meeting_title}
–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {meeting_date}

–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø:
{transcript}

–°–æ–∑–¥–∞–π JSON —Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

{{
    "meeting_summary": {{
        "title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏",
        "main_topic": "–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
        "key_decisions": ["–ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è", "..."],
        "action_items": ["–î–µ–π—Å—Ç–≤–∏—è", "..."],
        "next_steps": ["–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏", "..."],
        "participants": ["–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏", "..."],
        "duration_minutes": "–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö"
    }},
    "topics_discussed": [
        {{
            "topic": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
            "decisions": ["–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è"],
            "action_items": ["–î–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–µ–º–µ"],
            "participants_involved": ["–£—á–∞—Å—Ç–Ω–∏–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ –æ–±—Å—É–∂–¥–∞–≤—à–∏–µ —Ç–µ–º—É"]
        }}
    ],
    "key_quotes": [
        {{
            "quote": "–í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞",
            "speaker": "–ö—Ç–æ —Å–∫–∞–∑–∞–ª",
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è"
        }}
    ],
    "financial_mentions": [
        {{
            "amount": "–°—É–º–º–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω",
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "type": "–¢–∏–ø (–±—é–¥–∂–µ—Ç, –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)"
        }}
    ],
    "deadlines": [
        {{
            "deadline": "–°—Ä–æ–∫",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "responsible": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
        }}
    ],
    "risks_issues": [
        {{
            "type": "–¢–∏–ø (—Ä–∏—Å–∫/–ø—Ä–æ–±–ª–µ–º–∞)",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "severity": "–í–∞–∂–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)",
            "mitigation": "–°–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è"
        }}
    ],
    "success_metrics": [
        {{
            "metric": "–ú–µ—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—Ö–∞",
            "target": "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            "current_status": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
        }}
    ]
}}

–í–ê–ñ–ù–û:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —è–≤–Ω–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π null –∏–ª–∏ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
3. –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–µ—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
4. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
5. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
"""
        
        return prompt
    
    def _extract_json_from_response(self, response_text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            
            # –ò—â–µ–º JSON –±–ª–æ–∫
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_text = json_match.group(0)
                self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω JSON –±–ª–æ–∫: {json_text[:100]}...")
                return json.loads(json_text)
            
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            self.logger.warning("‚ö†Ô∏è JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞—é—Å—å –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç")
            return json.loads(response_text)
            
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            self.logger.error(f"üìù –û—Ç–≤–µ—Ç OpenAI: {response_text}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—à–∏–±–∫–æ–π
            return {
                "meeting_summary": {
                    "title": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
                    "main_topic": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é",
                    "key_decisions": [],
                    "action_items": [],
                    "next_steps": [],
                    "participants": [],
                    "duration_minutes": None
                },
                "topics_discussed": [],
                "key_quotes": [],
                "financial_mentions": [],
                "deadlines": [],
                "risks_issues": [],
                "success_metrics": [],
                "parsing_error": str(e),
                "raw_response": response_text[:500]
            }
    
    def _create_fallback_analysis(self, transcript: str, meeting_title: str, meeting_date: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ OpenAI API"""
        
        self.logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ OpenAI API")
        
        return {
            "meeting_summary": {
                "title": meeting_title or "–í—Å—Ç—Ä–µ—á–∞",
                "main_topic": "–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è",
                "key_decisions": [],
                "action_items": [],
                "next_steps": [],
                "participants": [],
                "duration_minutes": None
            },
            "topics_discussed": [],
            "key_quotes": [],
            "financial_mentions": [],
            "deadlines": [],
            "risks_issues": [],
            "success_metrics": [],
            "analysis_metadata": {
                "analyzed_at": datetime.now().isoformat(),
                "model_used": "fallback",
                "meeting_title": meeting_title,
                "meeting_date": meeting_date,
                "transcript_length": len(transcript),
                "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        }
    
    def create_notion_page_data(self, analysis_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis_data: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion
        """
        try:
            self.logger.info("üìù –°–æ–∑–¥–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            summary = analysis_data.get('meeting_summary', {})
            topics = analysis_data.get('topics_discussed', [])
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_data = {
                "properties": {
                    "Title": {
                        "title": [
                            {
                                "text": {
                                    "content": summary.get('title', '–í—Å—Ç—Ä–µ—á–∞')
                                }
                            }
                        ]
                    },
                    "Main Topic": {
                        "rich_text": [
                            {
                                "text": {
                                    "content": summary.get('main_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                }
                            }
                        ]
                    },
                    "Status": {
                        "select": {
                            "name": "Completed"
                        }
                    },
                    "Date": {
                        "date": {
                            "start": datetime.now().isoformat()
                        }
                    }
                },
                "children": []
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            page_data["children"].append({
                "object": "block",
                "type": "heading_1",
                "heading_1": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": f"üìã {summary.get('title', '–í—Å—Ç—Ä–µ—á–∞')}"
                            }
                        }
                    ]
                }
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if summary.get('main_topic'):
                page_data["children"].append({
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "icon": {"type": "emoji", "emoji": "üéØ"},
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: {summary['main_topic']}"
                                }
                            }
                        ]
                    }
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
            if summary.get('key_decisions'):
                page_data["children"].append({
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for decision in summary['key_decisions']:
                    page_data["children"].append({
                        "object": "block",
                        "type": "bulleted_list_item",
                        "bulleted_list_item": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": decision
                                    }
                                }
                            ]
                        }
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            if summary.get('action_items'):
                page_data["children"].append({
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üìã –î–µ–π—Å—Ç–≤–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for action in summary['action_items']:
                    page_data["children"].append({
                        "object": "block",
                        "type": "to_do",
                        "to_do": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": action
                                    }
                                }
                            ]
                        }
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            if topics:
                page_data["children"].append({
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üí¨ –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for topic in topics:
                    page_data["children"].append({
                        "object": "block",
                        "type": "heading_3",
                        "heading_3": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": topic.get('topic', '–¢–µ–º–∞')
                                    }
                                }
                            ]
                        }
                    })
                    
                    if topic.get('description'):
                        page_data["children"].append({
                            "object": "block",
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [
                                    {
                                        "type": "text",
                                        "text": {
                                            "content": topic['description']
                                        }
                                    }
                                ]
                            }
                        })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            metadata = analysis_data.get('analysis_metadata', {})
            if metadata:
                page_data["children"].append({
                    "object": "block",
                    "type": "divider"
                })
                
                page_data["children"].append({
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "icon": {"type": "emoji", "emoji": "ü§ñ"},
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {metadata.get('analyzed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | –ú–æ–¥–µ–ª—å: {metadata.get('model_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                                }
                            }
                        ]
                    }
                })
            
            self.logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return page_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Notion: {e}")
            return {}
    
    def save_analysis_to_file(self, analysis_data: Dict[str, Any], output_path: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            analysis_data: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
