"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –º–µ–∂–¥—É Google Drive –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ.
"""

import os
import hashlib
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import requests
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.errors import HttpError
import io


class DriveSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å Google Drive."""
    
    def __init__(self, drive_service, sync_root: str = "data/synced"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            drive_service: –°–µ—Ä–≤–∏—Å Google Drive API
            sync_root: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        self.drive_service = drive_service
        self.sync_root = Path(sync_root)
        self.sync_root.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_status_file = self.sync_root / ".sync_status.json"
        self.sync_status = self._load_sync_status()
    
    def _load_sync_status(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        if self.sync_status_file.exists():
            try:
                with open(self.sync_status_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        return {}
    
    def _save_sync_status(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        try:
            with open(self.sync_status_file, 'w', encoding='utf-8') as f:
                json.dump(self.sync_status, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def _get_file_hash(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞."""
        hash_md5 = hashlib.md5()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception:
            return ""
    
    def _get_drive_file_hash(self, file_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞ –∏–∑ Google Drive."""
        try:
            file_metadata = self.drive_service.files().get(
                fileId=file_id, 
                fields="md5Checksum"
            ).execute()
            return file_metadata.get('md5Checksum', '')
        except Exception:
            return ""
    
    def _needs_sync(self, file_id: str, local_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ Google Drive
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        """
        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        if not os.path.exists(local_path):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏
        local_hash = self._get_file_hash(local_path)
        drive_hash = self._get_drive_file_hash(file_id)
        
        if not drive_hash:
            return True
        
        return local_hash != drive_hash
    
    def sync_folder(self, folder_id: str, folder_name: str, 
                   file_types: Optional[List[str]] = None) -> Dict[str, any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É Google Drive —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
        
        Args:
            folder_id: ID –ø–∞–ø–∫–∏ –≤ Google Drive
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            file_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (None = –≤—Å–µ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        results = {
            'folder_id': folder_id,
            'folder_name': folder_name,
            'files_found': 0,
            'files_synced': 0,
            'files_skipped': 0,
            'errors': [],
            'sync_time': 0
        }
        
        start_time = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
            local_folder = self.sync_root / folder_name
            local_folder.mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            query = f"'{folder_id}' in parents and trashed=false"
            if file_types:
                type_filters = [f"mimeType='{mime_type}'" for mime_type in file_types]
                query += f" and ({' or '.join(type_filters)})"
            
            files_result = self.drive_service.files().list(
                q=query,
                fields="files(id,name,mimeType,size,md5Checksum,webViewLink)"
            ).execute()
            
            files = files_result.get('files', [])
            results['files_found'] = len(files)
            
            print(f"üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏: {folder_name}")
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            
            for file_info in files:
                try:
                    file_id = file_info['id']
                    file_name = file_info['name']
                    file_size = int(file_info.get('size', 0))
                    mime_type = file_info.get('mimeType', '')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                    local_file_path = local_folder / file_name
                    
                    print(f"  üìÑ {file_name} ({self._format_size(file_size)})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                    if self._needs_sync(file_id, str(local_file_path)):
                        print(f"    üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é...")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        if self._download_file(file_id, str(local_file_path)):
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            self.sync_status[file_id] = {
                                'name': file_name,
                                'local_path': str(local_file_path),
                                'size': file_size,
                                'mime_type': mime_type,
                                'synced_at': datetime.now().isoformat(),
                                'local_hash': self._get_file_hash(str(local_file_path))
                            }
                            
                            results['files_synced'] += 1
                            print(f"    ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        else:
                            results['errors'].append(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {file_name}")
                    else:
                        print(f"    ‚è≠Ô∏è –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        results['files_skipped'] += 1
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_info.get('name', 'Unknown')}: {e}"
                    print(f"    ‚ùå {error_msg}")
                    results['errors'].append(error_msg)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self._save_sync_status()
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}"
            print(f"‚ùå {error_msg}")
            results['errors'].append(error_msg)
        
        results['sync_time'] = (datetime.now() - start_time).total_seconds()
        
        return results
    
    def _download_file(self, file_id: str, local_path: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Google Drive.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ Google Drive
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = local_path + '.tmp'
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            request = self.drive_service.files().get_media(fileId=file_id)
            
            with open(temp_path, 'wb') as f:
                downloader = MediaIoBaseDownload(f, request)
                done = False
                while not done:
                    status, done = downloader.next_chunk()
                    if status:
                        print(f"      üì• –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(status.progress() * 100)}%")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.rename(temp_path, local_path)
            
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}"
            print(f"      ‚ùå {error_msg}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if os.path.exists(temp_path):
                try:
                    os.remove(temp_path)
                except:
                    pass
            
            return False
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ."""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def get_local_path(self, folder_name: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
        
        Args:
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            
        Returns:
            –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
        """
        return str(self.sync_root / folder_name)
    
    def cleanup_old_files(self, max_age_days: int = 30) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
        
        Args:
            max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ –¥–Ω—è—Ö
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        deleted_count = 0
        cutoff_time = datetime.now().timestamp() - (max_age_days * 24 * 3600)
        
        try:
            for folder_path in self.sync_root.iterdir():
                if folder_path.is_dir() and not folder_path.name.startswith('.'):
                    for file_path in folder_path.iterdir():
                        if file_path.is_file():
                            try:
                                file_age = file_path.stat().st_mtime
                                if file_age < cutoff_time:
                                    file_path.unlink()
                                    deleted_count += 1
                                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                            except Exception:
                                pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
        return deleted_count
    
    def get_sync_stats(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        total_files = len(self.sync_status)
        total_size = sum(info.get('size', 0) for info in self.sync_status.values())
        
        return {
            'total_files': total_files,
            'total_size': total_size,
            'total_size_formatted': self._format_size(total_size),
            'last_sync': max((info.get('synced_at', '') for info in self.sync_status.values()), default=''),
            'folders_count': len(set(Path(info['local_path']).parent.name for info in self.sync_status.values()))
        }


def get_drive_sync(drive_service, sync_root: str = "data/synced") -> DriveSync:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DriveSync.
    
    Args:
        drive_service: –°–µ—Ä–≤–∏—Å Google Drive API
        sync_root: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä DriveSync
    """
    return DriveSync(drive_service, sync_root)
