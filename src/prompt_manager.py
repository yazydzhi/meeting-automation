#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á

TASK-3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import json
import logging
from typing import Dict, Any, Optional, List
from pathlib import Path
from config.prompts import (
    TRANSCRIPTION_PROMPT,
    SUMMARY_PROMPT,
    ANALYSIS_PROMPT,
    COMPLEX_ANALYSIS_PROMPT,
    TITLE_GENERATION_PROMPT,
    KEYWORDS_EXTRACTION_PROMPT,
    SENTIMENT_ANALYSIS_PROMPT
)
from config.prompt_settings import (
    DEFAULT_PROMPT_SETTINGS,
    QUALITY_SETTINGS,
    LANGUAGE_SETTINGS,
    STYLE_SETTINGS,
    OUTPUT_FORMAT_SETTINGS
)


class PromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏."""
    
    def __init__(self, config_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_manager = config_manager
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        self.base_prompts = {
            'transcription': TRANSCRIPTION_PROMPT,
            'summary': SUMMARY_PROMPT,
            'analysis': ANALYSIS_PROMPT,
            'complex_analysis': COMPLEX_ANALYSIS_PROMPT,
            'title_generation': TITLE_GENERATION_PROMPT,
            'keywords_extraction': KEYWORDS_EXTRACTION_PROMPT,
            'sentiment_analysis': SENTIMENT_ANALYSIS_PROMPT
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_settings = DEFAULT_PROMPT_SETTINGS
        self.quality_settings = QUALITY_SETTINGS
        self.language_settings = LANGUAGE_SETTINGS
        self.style_settings = STYLE_SETTINGS
        self.output_format_settings = OUTPUT_FORMAT_SETTINGS
        
        self.logger.info("üîß PromptManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_prompt(self, prompt_type: str, custom_prompt: str = None) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            custom_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            if custom_prompt and custom_prompt.strip():
                self.logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è {prompt_type}")
                return custom_prompt
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            if prompt_type in self.base_prompts:
                self.logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è {prompt_type}")
                return self.base_prompts[prompt_type]
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞: {prompt_type}")
                return ""
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
            return ""
    
    def get_prompt_settings(self, prompt_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_settings = self.config_manager.get_prompt_config(prompt_type)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if prompt_type in self.default_settings:
                default = self.default_settings[prompt_type].copy()
                default.update(config_settings)
                return default
            else:
                return config_settings
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
            return {}
    
    def get_quality_settings(self, quality_level: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Args:
            quality_level: –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        try:
            if not quality_level:
                quality_level = self.config_manager.get_prompt_general_config().get('quality_level', 'balanced')
            
            if quality_level in self.quality_settings:
                return self.quality_settings[quality_level]
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {quality_level}, –∏—Å–ø–æ–ª—å–∑—É–µ–º balanced")
                return self.quality_settings['balanced']
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return self.quality_settings['balanced']
    
    def get_language_settings(self, language: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞.
        
        Args:
            language: –Ø–∑—ã–∫
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
        """
        try:
            if not language:
                language = self.config_manager.get_prompt_general_config().get('language', 'russian')
            
            if language in self.language_settings:
                return self.language_settings[language]
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫: {language}, –∏—Å–ø–æ–ª—å–∑—É–µ–º russian")
                return self.language_settings['russian']
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞: {e}")
            return self.language_settings['russian']
    
    def get_style_settings(self, style: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è.
        
        Args:
            style: –°—Ç–∏–ª—å
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        """
        try:
            if not style:
                style = self.config_manager.get_prompt_general_config().get('style', 'professional')
            
            if style in self.style_settings:
                return self.style_settings[style]
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style}, –∏—Å–ø–æ–ª—å–∑—É–µ–º professional")
                return self.style_settings['professional']
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–ª—è: {e}")
            return self.style_settings['professional']
    
    def get_output_format_settings(self, output_format: str = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞.
        
        Args:
            output_format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
        """
        try:
            if not output_format:
                output_format = self.config_manager.get_prompt_general_config().get('output_format', 'json')
            
            if output_format in self.output_format_settings:
                return self.output_format_settings[output_format]
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {output_format}, –∏—Å–ø–æ–ª—å–∑—É–µ–º json")
                return self.output_format_settings['json']
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞: {e}")
            return self.output_format_settings['json']
    
    def customize_prompt(self, base_prompt: str, customizations: Dict[str, Any]) -> str:
        """
        –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.
        
        Args:
            base_prompt: –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            customizations: –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        try:
            customized_prompt = base_prompt
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
            for key, value in customizations.items():
                if isinstance(value, str) and value:
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç–µ
                    placeholder = f"{{{key}}}"
                    if placeholder in customized_prompt:
                        customized_prompt = customized_prompt.replace(placeholder, str(value))
            
            self.logger.info(f"üîß –ü—Ä–æ–º–ø—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(customizations)} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            return customized_prompt
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return base_prompt
    
    def save_debug_prompt(self, prompt_type: str, prompt: str, settings: Dict[str, Any]):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            prompt: –ü—Ä–æ–º–ø—Ç
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        try:
            general_config = self.config_manager.get_prompt_general_config()
            if not general_config.get('debug_save', False):
                return
            
            debug_dir = general_config.get('debug_dir', 'logs/prompts')
            os.makedirs(debug_dir, exist_ok=True)
            
            debug_file = Path(debug_dir) / f"{prompt_type}_debug_{int(os.time.time())}.json"
            
            debug_data = {
                "prompt_type": prompt_type,
                "timestamp": os.time.time(),
                "prompt": prompt,
                "settings": settings,
                "config_source": "prompt_manager"
            }
            
            with open(debug_file, 'w', encoding='utf-8') as f:
                json.dump(debug_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üîß –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {debug_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {e}")
    
    def get_full_prompt_config(self, prompt_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        try:
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
            prompt_settings = self.get_prompt_settings(prompt_type)
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            general_settings = self.config_manager.get_prompt_general_config()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_settings = self.get_quality_settings(general_settings.get('quality_level'))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
            language_settings = self.get_language_settings(general_settings.get('language'))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
            style_settings = self.get_style_settings(general_settings.get('style'))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
            output_format_settings = self.get_output_format_settings(general_settings.get('output_format'))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            full_config = {
                "prompt_type": prompt_type,
                "prompt_settings": prompt_settings,
                "general_settings": general_settings,
                "quality_settings": quality_settings,
                "language_settings": language_settings,
                "style_settings": style_settings,
                "output_format_settings": output_format_settings
            }
            
            return full_config
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return {}
    
    def validate_prompt_config(self, prompt_type: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            config = self.get_full_prompt_config(prompt_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['prompt_settings', 'general_settings']
            for field in required_fields:
                if field not in config or not config[field]:
                    self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
            prompt_settings = config['prompt_settings']
            if not prompt_settings.get('model'):
                self.logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}")
                return False
            
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} –≤–∞–ª–∏–¥–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return False
    
    def list_available_prompts(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        return list(self.base_prompts.keys())
    
    def get_prompt_info(self, prompt_type: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ.
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ
        """
        try:
            if prompt_type not in self.base_prompts:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞: {prompt_type}"}
            
            prompt = self.base_prompts[prompt_type]
            settings = self.get_prompt_settings(prompt_type)
            
            return {
                "type": prompt_type,
                "description": self._get_prompt_description(prompt_type),
                "length": len(prompt),
                "settings": settings,
                "available_customizations": list(settings.keys())
            }
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"}
    
    def _get_prompt_description(self, prompt_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞."""
        descriptions = {
            'transcription': '–ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏',
            'summary': '–ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏',
            'analysis': '–ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏',
            'complex_analysis': '–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—Å—Ç—Ä–µ—á',
            'title_generation': '–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
            'keywords_extraction': '–ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
            'sentiment_analysis': '–ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
        }
        return descriptions.get(prompt_type, '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
