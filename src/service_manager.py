#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dual-account —Å–∏—Å—Ç–µ–º—É (–ª–∏—á–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç—ã)
"""

import os
import sys
import time
import json
import signal
import logging
import uuid
from logging.handlers import RotatingFileHandler
import threading
import subprocess
import traceback
import concurrent.futures
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from pathlib import Path
import functools
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ dotenv: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
    sys.exit(1)



# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
try:
    from src.handlers import (
        CalendarHandler,
        CalendarIntegrationHandler,
        AccountHandler,
        TranscriptionHandler,
        SummaryHandler,
        MediaHandler,
        NotionHandler,
        MetricsHandler
    )
    from src.handlers.smart_report_generator import SmartReportGenerator
    from src.handlers.state_manager import StateManager
    NEW_HANDLERS_AVAILABLE = True
    print("‚úÖ –ù–æ–≤—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    print("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –º–æ–¥—É–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    sys.exit(1)


def retry(max_attempts=3, delay=5, backoff=2, exceptions=(Exception,)):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(self, *args, **kwargs):
            mtries, mdelay = max_attempts, delay
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            func_name = func.__name__
            
            while mtries > 1:
                try:
                    return func(self, *args, **kwargs)
                except exceptions as e:
                    msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ {func_name} (–ø–æ–ø—ã—Ç–∫–∞ {max_attempts - mtries + 1}/{max_attempts}): {e}"
                    self.logger.warning(msg)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
                    
                    mtries -= 1
                    if mtries == 1:
                        self.logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func_name}")
                        break
                        
                    self.logger.info(f"‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {mdelay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(mdelay)
                    mdelay *= backoff
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            return func(self, *args, **kwargs)
        return wrapper
    return decorator


class MeetingAutomationService:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self, config_file: str = '.env', 
                 interval: int = 300, 
                 media_interval: int = 1800,
                 log_level: str = 'INFO'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            media_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.config_file = config_file
        self.interval = interval
        self.media_check_interval = media_interval
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = self._setup_logging(log_level)
        self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self._load_config():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.last_media_check = 0
        self.last_media_stats = {}
        self.last_transcription_stats = {}
        self.last_notion_stats = {}
        self.last_telegram_stats = {}
        self.last_summary_stats = {}
        self.last_notion_update_stats = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.previous_cycle_state = {}
        self.current_cycle_state = {}
        self.cycle_counter = 0  # –°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
        self.running = False
        self.thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.cache = {
            'processed_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'transcribed_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'summarized_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'notion_pages': {},  # –°–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü Notion (–∫–ª—é—á - ID –ø–∞–ø–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ - ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            'last_update': datetime.now()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'cpu_usage': [],
            'memory_usage': [],
            'disk_usage': [],
            'cycle_times': []
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._load_cache()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._init_handlers()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._log_configuration()
        
        self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á."""
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º notion_handler
            self.notion_handler = NotionHandler(self.config_manager, None, self.logger)
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º notion_handler
            self.notion_handler = NotionHandler(self.config_manager, None, self.logger)
            
            # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º account_handler —Å notion_handler
            self.account_handler = AccountHandler(self.config_manager, None, self.notion_handler, self.logger)
            self.transcription_handler_new = TranscriptionHandler(self.config_manager, None, self.logger)
            self.summary_handler = SummaryHandler(self.config_manager, None, self.logger)
            # –ü–µ—Ä–µ–¥–∞–µ–º self (ServiceManager) –≤ MediaHandler –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
            self.media_handler = MediaHandler(self.config_manager, None, self.logger, service_manager=self)
            self.calendar_handler = CalendarHandler(self.config_manager, self.logger)
            self.logger.info(f"üìÖ CalendarHandler —Å–æ–∑–¥–∞–Ω: {type(self.calendar_handler).__name__}")
            
            self.calendar_integration_handler = CalendarIntegrationHandler(self.config_manager, self.notion_handler, self.calendar_handler, self.logger)
            self.logger.info(f"üìÖ CalendarIntegrationHandler —Å–æ–∑–¥–∞–Ω —Å calendar_handler: {type(self.calendar_integration_handler.calendar_handler).__name__}")
            self.metrics_handler = MetricsHandler(self.config_manager, self.logger)
            self.smart_report_generator = SmartReportGenerator(self.logger)
            self.state_manager = StateManager(logger=self.logger)
            self.logger.info("‚úÖ SmartReportGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.logger.info("‚úÖ StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.logger.info("‚úÖ CalendarHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.logger.info("‚úÖ CalendarIntegrationHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            raise
    
    def _setup_logging(self, log_level: str) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –ª–æ–≥–≥–µ—Ä –∫–∞–∂–¥—ã–π —Ä–∞–∑
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        logger_name = f"meeting_automation_service_{id(self)}"
        logger = logging.getLogger(logger_name)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ propagate
        logger.setLevel(logging.getLevelName(log_level))
        logger.propagate = False
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        while logger.handlers:
            logger.removeHandler(logger.handlers[0])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—á–∏—â–∞–µ–º –í–°–ï –ª–æ–≥–≥–µ—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        for existing_logger_name in logging.root.manager.loggerDict:
            if existing_logger_name.startswith("meeting_automation_service"):
                existing_logger = logging.getLogger(existing_logger_name)
                while existing_logger.handlers:
                    existing_logger.removeHandler(existing_logger.handlers[0])
                print(f"üßπ –û—á–∏—â–µ–Ω –ª–æ–≥–≥–µ—Ä: {existing_logger_name}")
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ (INFO –∏ –≤—ã—à–µ)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
        max_bytes = int(os.getenv("LOG_MAX_SIZE_MB", "100")) * 1024 * 1024
        backup_count = int(os.getenv("LOG_BACKUP_COUNT", "5"))
        
        # –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        file_handler = RotatingFileHandler(
            log_dir / "service.log",
            maxBytes=max_bytes,
            backupCount=backup_count,
            encoding="utf-8"
        )
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        logger.addHandler(file_handler)
        
        # –ö–û–ù–°–û–õ–¨–ù–´–ô –•–ï–ù–î–õ–ï–† –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        # console_handler = logging.StreamHandler()
        # console_handler.setLevel(logging.INFO)
        # console_handler.setFormatter(formatter)
        # logger.addHandler(console_handler)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        print(f"üîç –õ–æ–≥–≥–µ—Ä '{logger.name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {len(logger.handlers)} —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏")
        print(f"üîç ID –ª–æ–≥–≥–µ—Ä–∞: {id(logger)}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        for i, handler in enumerate(logger.handlers):
            print(f"üîç –•–µ–Ω–¥–ª–µ—Ä {i}: {type(handler).__name__}")
        
        return logger
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            cache_file = Path('data/service_cache.json')
            if cache_file.exists():
                with open(cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                self.cache['processed_files'] = set(cache_data.get('processed_files', []))
                self.cache['transcribed_files'] = set(cache_data.get('transcribed_files', []))
                self.cache['summarized_files'] = set(cache_data.get('summarized_files', []))
                self.cache['notion_pages'] = cache_data.get('notion_pages', {})
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                last_update_str = cache_data.get('last_update')
                if last_update_str:
                    self.cache['last_update'] = datetime.fromisoformat(last_update_str)
                
                self.logger.info(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {cache_file}")
                self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {len(self.cache['processed_files'])} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, {len(self.cache['transcribed_files'])} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            else:
                self.logger.info("‚ö†Ô∏è –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cache_dir = Path('data')
            cache_dir.mkdir(exist_ok=True)
            
            cache_file = cache_dir / 'service_cache.json'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
            cache_data = {
                'processed_files': list(self.cache['processed_files']),
                'transcribed_files': list(self.cache['transcribed_files']),
                'summarized_files': list(self.cache['summarized_files']),
                'notion_pages': self.cache['notion_pages'],
                'last_update': datetime.now().isoformat()
            }
            
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {cache_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")

    def _is_file_processed(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."""
        return file_path in self.cache['processed_files']

    def _mark_file_processed(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π."""
        self.cache['processed_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _is_file_transcribed(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω."""
        return file_path in self.cache['transcribed_files']

    def _mark_file_transcribed(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."""
        self.cache['transcribed_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _is_file_summarized(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."""
        return file_path in self.cache['summarized_files']

    def _mark_file_summarized(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."""
        self.cache['summarized_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _get_notion_page_id(self, folder_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –ø–æ ID –ø–∞–ø–∫–∏."""
        return self.cache['notion_pages'].get(folder_id)

    def _set_notion_page_id(self, folder_id: str, page_id: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –¥–ª—è –ø–∞–ø–∫–∏."""
        self.cache['notion_pages'][folder_id] = page_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    @retry(max_attempts=3, delay=5, backoff=2)
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
            if os.path.exists(self.config_file):
                load_dotenv(self.config_file)
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥: {self.config_file}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigManager
                from src.config_manager import ConfigManager
                self.config_manager = ConfigManager()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                general_config = self.config_manager.get_general_config()
                self.interval = general_config.get('service_check_interval', 300)
                self.media_check_interval = general_config.get('service_media_interval', 1800)
                
                self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval} —Å–µ–∫—É–Ω–¥")
                self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                if self.config_manager.validate_config():
                    self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞")
                    return True
                else:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return False
            else:
                self.logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_file}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _log_configuration(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ê:")
            
            # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            general_config = self.config_manager.get_general_config()
            self.logger.info("‚öôÔ∏è –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            for key, value in general_config.items():
                self.logger.info(f"   ‚Ä¢ {key}: {value}")
            
            # –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            self.logger.info("üë• –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
            self.logger.info(f"   ‚Ä¢ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.config_manager.is_personal_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.config_manager.is_work_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                self.logger.info("üë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {personal_config.get('calendar_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞: {personal_config.get('drive_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {personal_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                self.logger.info("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {work_config.get('calendar_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞: {work_config.get('drive_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {work_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞
            media_config = self.config_manager.get_media_config()
            self.logger.info("üé¨ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            self.logger.info(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {media_config.get('quality', 'medium')}")
            self.logger.info(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç: {media_config.get('output_format', 'mp4')}")
            self.logger.info(f"   ‚Ä¢ –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if media_config.get('video_compression', True) else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            whisper_config = self.config_manager.get_whisper_config()
            self.logger.info("üé§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
            self.logger.info(f"   ‚Ä¢ –ú–µ—Ç–æ–¥: {whisper_config.get('transcription_method', 'local')}")
            self.logger.info(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {whisper_config.get('whisper_model', 'base')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Notion
            notion_config = self.config_manager.get_notion_config()
            self.logger.info("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Notion:")
            self.logger.info(f"   ‚Ä¢ –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if notion_config.get('token') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if notion_config.get('database_id') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
            telegram_config = self.config_manager.get_telegram_config()
            self.logger.info("üì± –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram:")
            self.logger.info(f"   ‚Ä¢ –ë–æ—Ç —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_config.get('bot_token') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –ß–∞—Ç ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_config.get('chat_id') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def run_personal_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            return self.account_handler.process_account('personal')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "output": str(e)}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def run_work_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            return self.account_handler.process_account('work')
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "output": str(e)}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_media_files(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            if hasattr(self, 'last_media_check') and (current_time - self.last_media_check) < self.media_check_interval:
                self.logger.info("‚è∞ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0}
            
            self.last_media_check = current_time
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            media_stats = self.media_handler.process('medium')
            self.last_media_stats = media_stats
            return media_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "processed": 0, "synced": 0, "cleanup": 0, "errors": 1}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_audio_transcription(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
        try:
            transcription_stats = self.transcription_handler_new.process()
            self.last_transcription_stats = transcription_stats
            return transcription_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            self.last_transcription_stats = error_stats
            return error_stats
    

    
    @retry(max_attempts=2, delay=3, backoff=2)
    def sync_with_notion(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion."""
        try:
            self.logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ NotionHandler
            
            notion_stats = {"status": "success", "synced": 0, "errors": 0, "details": []}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            self.last_notion_stats = notion_stats
            
            return notion_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "synced": 0, "errors": 1, "details": [str(e)]}
            self.last_notion_stats = error_stats
            return error_stats
    
    def _has_changes(self, current_state: Dict[str, Any], previous_state: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, False –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
        """
        try:
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: previous_state={bool(previous_state)}")
            
            if not previous_state:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                # –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—à–∏–±–∫–∏, etc.)
                personal_processed = current_state.get('personal_events', {}).get('processed', 0)
                work_processed = current_state.get('work_events', {}).get('processed', 0)
                media_processed = current_state.get('media_processed', {}).get('count', 0)
                transcriptions = current_state.get('transcriptions', {}).get('count', 0)
                notion_synced = current_state.get('notion_synced', {}).get('count', 0)
                errors_count = current_state.get('errors_count', 0)
                
                self.logger.info(f"üîç –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: personal={personal_processed}, work={work_processed}, media={media_processed}, transcriptions={transcriptions}, notion={notion_synced}, errors={errors_count}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (personal_processed > 0 or work_processed > 0 or 
                    media_processed > 0 or transcriptions > 0 or 
                    notion_synced > 0 or errors_count > 0):
                    self.logger.info("üîç –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                    return True
                else:
                    self.logger.info("üîç –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
            current_metrics = {
                'personal_events': current_state.get('personal_events', {}).get('processed', 0),
                'work_events': current_state.get('work_events', {}).get('processed', 0),
                'media_processed': current_state.get('media_processed', {}).get('count', 0),
                'transcriptions': current_state.get('transcriptions', {}).get('count', 0),
                'notion_synced': current_state.get('notion_synced', {}).get('count', 0),
                'errors_count': current_state.get('errors_count', 0)
            }
            
            previous_metrics = {
                'personal_events': previous_state.get('personal_events', {}).get('processed', 0),
                'work_events': previous_state.get('work_events', {}).get('processed', 0),
                'media_processed': previous_state.get('media_processed', {}).get('count', 0),
                'transcriptions': previous_state.get('transcriptions', {}).get('count', 0),
                'notion_synced': previous_state.get('notion_synced', {}).get('count', 0),
                'errors_count': previous_state.get('errors_count', 0)
            }
            
            self.logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: current={current_metrics}, previous={previous_metrics}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö (—Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏)
            for key in current_metrics:
                if current_metrics[key] != previous_metrics[key]:
                    # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
                    if current_metrics[key] > previous_metrics[key]:
                        self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {key}: {previous_metrics[key]} -> {current_metrics[key]}")
                        return True
                    elif key == 'errors_count' and current_metrics[key] > 0:
                        # –û—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
                        self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ {key}: {previous_metrics[key]} -> {current_metrics[key]}")
                        return True
                    else:
                        # –°–Ω–∏–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º (–∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫)
                        self.logger.debug(f"üîç –°–Ω–∏–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ {key}: {previous_metrics[key]} -> {current_metrics[key]} (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
            current_statuses = {
                'personal_status': current_state.get('personal_events', {}).get('status', ''),
                'work_status': current_state.get('work_events', {}).get('status', ''),
                'media_status': current_state.get('media_processed', {}).get('status', ''),
                'transcription_status': current_state.get('transcriptions', {}).get('status', ''),
                'notion_status': current_state.get('notion_synced', {}).get('status', '')
            }
            
            previous_statuses = {
                'personal_status': previous_state.get('personal_events', {}).get('status', ''),
                'work_status': previous_state.get('work_events', {}).get('status', ''),
                'media_status': previous_state.get('media_processed', {}).get('status', ''),
                'transcription_status': previous_state.get('transcriptions', {}).get('status', ''),
                'notion_status': previous_state.get('notion_synced', {}).get('status', '')
            }
            
            self.logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤: current={current_statuses}, previous={previous_statuses}")
            
            for key in current_statuses:
                if current_statuses[key] != previous_statuses[key]:
                    # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç—É—Å—É 'error' –∏–ª–∏ –æ—Ç 'error' –∫ –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
                    if (current_statuses[key] == 'error' or 
                        (previous_statuses[key] == 'error' and current_statuses[key] != 'error')):
                        self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ {key}: {previous_statuses[key]} -> {current_statuses[key]}")
                        return True
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ —Å—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–∏–º—ã–º–∏
                        self.logger.debug(f"üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ {key}: {previous_statuses[key]} -> {current_statuses[key]} (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø—É—Å—Ç–æ–µ)
            current_time = current_state.get('last_update', '')
            previous_time = previous_state.get('last_update', '')
            
            if current_time != previous_time and current_time and previous_time:
                self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {previous_time} -> {current_time}")
                return True
            elif current_time != previous_time:
                # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –≤—Ä–µ–º–µ–Ω –ø—É—Å—Ç–æ–µ, –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
                self.logger.debug(f"üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–ø—É—Å—Ç–æ–µ): {previous_time} -> {current_time} (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
            personal_new = current_state.get('personal_events', {}).get('new', 0)
            work_new = current_state.get('work_events', {}).get('new', 0)
            
            if personal_new > 0 or work_new > 0:
                self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –ª–∏—á–Ω—ã–π {personal_new}, —Ä–∞–±–æ—á–∏–π {work_new}")
                return True
            
            self.logger.info("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    def _format_detailed_report(self, current_state: Dict[str, Any] = None) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram."""
        try:
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            report = f"ü§ñ <b>–û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            report += f"‚è∞ <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {current_time}\n"
            report += f"üîÑ <b>–¶–∏–∫–ª:</b> #{current_state.get('cycle_number', 'N/A') if current_state else 'N/A'}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if self.config_manager:
                report += "üìã <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
                if self.config_manager.is_personal_enabled():
                    report += "   üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    report += "   üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                
                if self.config_manager.is_work_enabled():
                    report += "   üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    report += "   üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ
            if current_state:
                report += "\nüìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
                
                # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                personal_events = current_state.get('personal_events', {})
                work_events = current_state.get('work_events', {})
                
                report += "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n"
                if personal_events.get('status') == 'success':
                    processed = personal_events.get('processed', 0)
                    total = personal_events.get('total', 0)
                    new = personal_events.get('new', 0)
                    already_processed = personal_events.get('already_processed', 0)
                    
                    if processed > 0:
                        report += f"   üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                        report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {already_processed}\n"
                    elif new > 0:
                        report += f"   üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚è≠Ô∏è {new} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏)\n"
                        report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {already_processed}\n"
                    else:
                        report += f"   üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚è≠Ô∏è –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç\n"
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
                        if total > 0:
                            report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}\n"
                else:
                    report += f"   üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚ùå {personal_events.get('message', '–û—à–∏–±–∫–∞')}\n"
                
                if work_events.get('status') == 'success':
                    processed = work_events.get('processed', 0)
                    total = work_events.get('total', 0)
                    new = work_events.get('new', 0)
                    already_processed = work_events.get('already_processed', 0)
                    
                    if processed > 0:
                        report += f"   üè¢ <b>–†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π\n"
                        report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {already_processed}\n"
                    elif new > 0:
                        report += f"   üè¢ <b>–†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚è≠Ô∏è {new} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏)\n"
                        report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {already_processed}\n"
                    else:
                        report += f"   üè¢ <b>–†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚è≠Ô∏è –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç\n"
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
                        if total > 0:
                            report += f"      üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total}\n"
                else:
                    report += f"   üè¢ <b>–†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b> ‚ùå {work_events.get('message', '–û—à–∏–±–∫–∞')}\n"
                
                # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                media_processed = current_state.get('media_processed', {})
                report += "\nüé¨ <b>–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:</b>\n"
                if media_processed.get('count', 0) > 0:
                    report += f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {media_processed.get('count', 0)} —Ñ–∞–π–ª–æ–≤\n"
                    if media_processed.get('total_size'):
                        report += f"   üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {media_processed.get('total_size', 'N/A')}\n"
                else:
                    report += "   ‚è≠Ô∏è –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç\n"
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                transcriptions = current_state.get('transcriptions', {})
                report += "\nüé§ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:</b>\n"
                if transcriptions.get('count', 0) > 0:
                    report += f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcriptions.get('count', 0)} —Ñ–∞–π–ª–æ–≤\n"
                    if transcriptions.get('total_duration'):
                        report += f"   ‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcriptions.get('total_duration', 'N/A')}\n"
                else:
                    report += "   ‚è≠Ô∏è –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç\n"
                
                # Notion —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                notion_synced = current_state.get('notion_synced', {})
                report += "\nüìù <b>Notion —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</b>\n"
                if notion_synced.get('count', 0) > 0:
                    report += f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {notion_synced.get('count', 0)} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                    if notion_synced.get('updated'):
                        report += f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {notion_synced.get('updated', 0)} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                else:
                    report += "   ‚è≠Ô∏è –ù–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç\n"
                
                # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                execution_time = current_state.get('execution_time', 0)
                if execution_time > 0:
                    report += f"\n‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞:</b> {execution_time:.2f} —Å–µ–∫—É–Ω–¥\n"
                
                # –û—à–∏–±–∫–∏
                errors_count = current_state.get('errors_count', 0)
                if errors_count > 0:
                    report += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏:</b> {errors_count} –æ—à–∏–±–æ–∫\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º
                folders_processed = current_state.get('folders_processed', {})
                if folders_processed:
                    report += f"\nüìÅ <b>–ü–∞–ø–∫–∏:</b> –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {folders_processed.get('count', 0)} –ø–∞–ø–æ–∫\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if errors_count > 0:
                    report += "\nüîç <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
                    report += "```\n"
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    error_details = []
                    
                    # –û—à–∏–±–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    personal_errors = personal_events.get('errors', [])
                    work_errors = work_events.get('errors', [])
                    if personal_errors:
                        error_details.extend([f"–õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {error}" for error in personal_errors])
                    if work_errors:
                        error_details.extend([f"–†–∞–±–æ—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {error}" for error in work_errors])
                    
                    # –û—à–∏–±–∫–∏ –º–µ–¥–∏–∞
                    media_errors = media_processed.get('errors', [])
                    if media_errors:
                        error_details.extend([f"–ú–µ–¥–∏–∞: {error}" for error in media_errors])
                    
                    # –û—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcription_errors = transcriptions.get('errors', [])
                    if transcription_errors:
                        error_details.extend([f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {error}" for error in transcription_errors])
                    
                    # –û—à–∏–±–∫–∏ Notion
                    notion_errors = notion_synced.get('errors', [])
                    if notion_errors:
                        error_details.extend([f"Notion: {error}" for error in notion_errors])
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    if error_details:
                        for error in error_details[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                            report += f"{error}\n"
                    else:
                        report += "–û–±—â–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
                    
                    report += "```\n"
            
            report += "\nüéØ <b>–°—Ç–∞—Ç—É—Å:</b> "
            if current_state and current_state.get('errors_count', 0) == 0:
                report += "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
            else:
                report += "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ"
            
            return report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def send_telegram_notifications(self, current_state: Dict[str, Any], previous_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram."""
        try:
            self.logger.info("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            import os
            force_send = os.getenv('TELEGRAM_ALWAYS_SEND', 'false').lower() == 'true'
            self.logger.info(f"üì± TELEGRAM_ALWAYS_SEND: {force_send}")
            
            if not force_send:
                self.logger.info("üì± –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ StateManager...")
                has_changes = self.state_manager.has_changes(current_state)
                self.logger.info(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {has_changes}")
                
                if not has_changes:
                    self.logger.info("‚è≠Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    return {"status": "skipped", "message": "No changes detected"}
                else:
                    self.logger.info("üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç")
            else:
                self.logger.info("üì± –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ SmartReportGenerator
            self.logger.info("üîç –ò—Å–ø–æ–ª—å–∑—É—é SmartReportGenerator –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞...")
            try:
                report = self.smart_report_generator.generate_smart_report(
                    current_state, previous_state, 
                    current_state.get('execution_time', 0) if current_state else 0
                )
                self.logger.info(f"üîç SmartReportGenerator –≤–µ—Ä–Ω—É–ª: {type(report)}, –¥–ª–∏–Ω–∞: {len(report) if report else 0}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ SmartReportGenerator: {e}")
                self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
                report = None
            
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            if not report:
                self.logger.info("‚è≠Ô∏è SmartReportGenerator –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
                return {"status": "skipped", "message": "No changes detected by SmartReportGenerator"}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
            self.logger.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram...")
            self.logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {report[:200]}...")
            self.logger.info(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report}")
            
            cmd = [
                sys.executable,
                'meeting_automation_universal.py',
                'notify',
                '--message', report,
                '--notification_type', 'detailed'
            ]
            
            self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd[:4])}...")
            
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            self.logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: returncode={process.returncode}")
            if process.stdout:
                self.logger.info(f"üîç stdout: {process.stdout}")
            if process.stderr:
                self.logger.info(f"üîç stderr: {process.stderr}")
            
            if process.returncode == 0:
                self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —É—Å–ø–µ—à–Ω–æ")
                return {"status": "success", "message": "Detailed report sent"}
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {process.stderr}")
                return {"status": "error", "message": process.stderr}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "message": str(e)}
    
    def _format_status_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è Telegram."""
        try:
            message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if self.config_manager:
                if self.config_manager.is_personal_enabled():
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                
                if self.config_manager.is_work_enabled():
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
            
            message += "\nüéØ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ</b>"
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    def create_status_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
        try:
            self.logger.info("üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            if self.config_manager and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                self.logger.info(f"üîç –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –ø–∞–ø–∫–∞ = {personal_folder}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {os.path.exists(personal_folder) if personal_folder else False}")
                if personal_folder and os.path.exists(personal_folder):
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
                    self._create_folder_status_file(personal_folder, "personal")
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
                    self._create_meeting_status_files(personal_folder, "personal")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {personal_folder}")
            
            if self.config_manager and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                self.logger.info(f"üîç –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –ø–∞–ø–∫–∞ = {work_folder}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {os.path.exists(work_folder) if work_folder else False}")
                if work_folder and os.path.exists(work_folder):
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
                    self._create_folder_status_file(work_folder, "work")
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
                    self._create_meeting_status_files(work_folder, "work")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {work_folder}")
            
            self.logger.info("‚úÖ –§–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _create_folder_status_file(self, folder_path: str, account_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
        try:
            status_file_path = os.path.join(folder_path, "processing_status.md")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
            status_info = self._analyze_folder_status(folder_path, account_type)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
            with open(status_file_path, 'w', encoding='utf-8') as f:
                f.write(status_info)
            
            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º (—É–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã)
            try:
                import subprocess
                subprocess.run(['chflags', 'nohidden', status_file_path], check=False)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ chflags –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            self.logger.info(f"‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω: {status_file_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {folder_path}: {e}")
    
    def _create_meeting_status_files(self, root_folder: str, account_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏."""
        try:
            # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á (–ø–∞–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏)
            meeting_folders = []
            for item in os.listdir(root_folder):
                item_path = os.path.join(root_folder, item)
                if os.path.isdir(item_path) and any(char.isdigit() for char in item):
                    meeting_folders.append(item_path)
            
            for meeting_folder in meeting_folders:
                try:
                    self._create_folder_status_file(meeting_folder, account_type)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ {meeting_folder}: {e}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á: {e}")
    
    def _analyze_folder_status(self, folder_path: str, account_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
        try:
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            status_report = f"""üìä –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ü–ö–ò
{'='*50}
üìÅ –ü–∞–ø–∫–∞: {folder_path}
üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_type}
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}
{'='*50}

üé¨ –í–ò–î–ï–û –§–ê–ô–õ–´:
"""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
            video_files = []
            compressed_videos = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.mov', '.mp4', '.avi', '.mkv')):
                        file_path = os.path.join(root, file)
                        if 'compressed' in file.lower():
                            compressed_videos.append(file)
                        else:
                            video_files.append(file)
            
            if video_files:
                status_report += f"üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: {len(video_files)}\n"
                for video in video_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    status_report += f"   ‚Ä¢ {video}\n"
                if len(video_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(video_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            if compressed_videos:
                status_report += f"üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: {len(compressed_videos)}\n"
                for video in compressed_videos[:3]:
                    status_report += f"   ‚Ä¢ {video}\n"
            else:
                status_report += "üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
            status_report += "\nüéµ –ê–£–î–ò–û –§–ê–ô–õ–´:\n"
            audio_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3'):
                        audio_files.append(file)
            
            if audio_files:
                status_report += f"üé§ MP3 —Ñ–∞–π–ª—ã: {len(audio_files)}\n"
                for audio in audio_files[:5]:
                    status_report += f"   ‚Ä¢ {audio}\n"
                if len(audio_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(audio_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üé§ MP3 —Ñ–∞–π–ª—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            status_report += "\nüìù –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:\n"
            transcription_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.txt', '.md', '.csv')):
                        transcription_files.append(file)
            
            if transcription_files:
                status_report += f"üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(transcription_files)}\n"
                for trans in transcription_files[:5]:
                    status_report += f"   ‚Ä¢ {trans}\n"
                if len(transcription_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(transcription_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            status_report += f"""

{'='*50}
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∂–∞—Ç—ã—Ö –≤–µ—Ä—Å–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å MP3 —Ñ–∞–π–ª—ã –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram
üìù –ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Notion
{'='*50}

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π meeting_automation
üìÖ {current_time}
"""
            
            return status_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏: {str(e)}"
    
    def _monitor_performance(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_info = psutil.virtual_memory()
            memory_percent = memory_info.percent
            disk_info = psutil.disk_usage('/')
            disk_percent = disk_info.percent
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.performance_stats['cpu_usage'].append(cpu_percent)
            self.performance_stats['memory_usage'].append(memory_percent)
            self.performance_stats['disk_usage'].append(disk_percent)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–æ–≤
            max_stats = 100
            if len(self.performance_stats['cpu_usage']) > max_stats:
                self.performance_stats['cpu_usage'] = self.performance_stats['cpu_usage'][-max_stats:]
            if len(self.performance_stats['memory_usage']) > max_stats:
                self.performance_stats['memory_usage'] = self.performance_stats['memory_usage'][-max_stats:]
            if len(self.performance_stats['disk_usage']) > max_stats:
                self.performance_stats['disk_usage'] = self.performance_stats['disk_usage'][-max_stats:]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            self.logger.info(f"üñ•Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:")
            self.logger.info(f"   CPU: {cpu_percent:.1f}%")
            self.logger.info(f"   –ü–∞–º—è—Ç—å: {memory_percent:.1f}% ({memory_info.used / (1024 ** 3):.1f} –ì–ë / {memory_info.total / (1024 ** 3):.1f} –ì–ë)")
            self.logger.info(f"   –î–∏—Å–∫: {disk_percent:.1f}% ({disk_info.used / (1024 ** 3):.1f} –ì–ë / {disk_info.total / (1024 ** 3):.1f} –ì–ë)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
            self._save_performance_stats()
            
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory_percent,
                'disk_percent': disk_percent
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {}

    def _save_performance_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            stats_dir = Path('data')
            stats_dir.mkdir(exist_ok=True)
            
            stats_file = stats_dir / 'performance_stats.json'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.performance_stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
    
    def run_service_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤
            self.cycle_counter += 1
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
            self._cycle_start_time = time.time()
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
            print(f"üîç –¶–∏–∫–ª #{self.cycle_counter}: –ª–æ–≥–≥–µ—Ä '{self.logger.name}' –∏–º–µ–µ—Ç {len(self.logger.handlers)} —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤")
            
            start_time = time.time()
            self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ #{self.cycle_counter}...")
            self.logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            self._monitor_performance()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.previous_cycle_state = self._load_previous_state()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ü–∏–∫–ª–∞
            self._load_cache()
            
            # –≠—Ç–∞–ø 1: –ö–∞–ª–µ–Ω–¥–∞—Ä—å ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á –∏ —Å—Ç—Ä–∞–Ω–∏—Ü Notion
            self.logger.info("üìÖ –≠–¢–ê–ü 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á...")
            personal_stats = {"status": "skipped", "output": ""}
            work_stats = {"status": "skipped", "output": ""}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                personal_future = None
                work_future = None
                
                if self.config_manager and self.config_manager.is_personal_enabled():
                    self.logger.info("üë§ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
                    personal_future = executor.submit(self.run_personal_automation)
                else:
                    self.logger.info("‚è≠Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                
                if self.config_manager and self.config_manager.is_work_enabled():
                    self.logger.info("üè¢ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
                    work_future = executor.submit(self.run_work_automation)
                else:
                    self.logger.info("‚è≠Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if personal_future:
                    personal_start = time.time()
                    personal_stats = personal_future.result()
                    personal_duration = time.time() - personal_start
                    self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                if work_future:
                    work_start = time.time()
                    work_stats = work_future.result()
                    work_duration = time.time() - work_start
                    self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –≠—Ç–∞–ø 2: –°–∂–∞—Ç–∏–µ –º–µ–¥–∏–∞ ‚Üí –≤—ã–¥–µ–ª–µ–Ω–∏–µ MP3
            self.logger.info("üé¨ –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
            media_start = time.time()
            media_stats = self.process_media_files()
            media_duration = time.time() - media_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {media_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {media_stats}")
            
            # –≠—Ç–∞–ø 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            self.logger.info("üé§ –≠–¢–ê–ü 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...")
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
            transcription_start = time.time()
            transcription_stats = self.process_audio_transcription()
            transcription_duration = time.time() - transcription_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcription_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {transcription_stats.get('errors', 0)}")
            
            # –≠—Ç–∞–ø 4: –°–∞–º–º–∞—Ä–∏ –∏ –¥—Ä—É–≥–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            summary_config = self.config_manager.get_summary_config()
            if summary_config.get('enable_general_summary', False) or summary_config.get('enable_complex_summary', False):
                self.logger.info("üìã –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
                summary_start = time.time()
                summary_stats, notion_update_stats = self.process_summaries()
                summary_duration = time.time() - summary_start
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {summary_duration:.2f} —Å–µ–∫—É–Ω–¥")
                self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {summary_stats.get('errors', 0)}")
            else:
                self.logger.info("üìã –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                summary_stats = {"status": "skipped", "processed": 0, "errors": 0, "message": "General summary disabled"}
                notion_update_stats = {"status": "skipped", "message": "Notion updates not implemented"}
            
            # –≠—Ç–∞–ø 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion
            self.logger.info("üìù –≠–¢–ê–ü 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion...")
            notion_start = time.time()
            notion_stats = self.sync_with_notion()
            notion_duration = time.time() - notion_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {notion_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {notion_stats}")
            
            # –≠—Ç–∞–ø 5.5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.logger.info("üìù –≠–¢–ê–ü 5.5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            notion_update_start = time.time()
            notion_update_stats = self._update_notion_with_results()
            notion_update_duration = time.time() - notion_update_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {notion_update_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {notion_update_stats}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞
            self.current_cycle_state = self._create_cycle_state(
                personal_stats, work_stats, media_stats, transcription_stats, notion_stats, summary_stats, notion_update_stats
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ SQLite
            cycle_id = getattr(self, 'cycle_count', 0) + 1
            self.state_manager.save_system_state(self.current_cycle_state, cycle_id)
            self.cycle_count = cycle_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            self._save_state(self.current_cycle_state)
            
            # –≠—Ç–∞–ø 6: –û—Ç—á–µ—Ç –≤ Telegram –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
            self.logger.info("üì± –≠–¢–ê–ü 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞...")
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                telegram_future = executor.submit(self.send_telegram_notifications, self.current_cycle_state, self.previous_cycle_state)
                status_future = executor.submit(self.create_status_files)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                telegram_start = time.time()
                telegram_stats = telegram_future.result()
                telegram_duration = time.time() - telegram_start
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {telegram_duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                status_start = time.time()
                status_future.result()
                status_duration = time.time() - status_start
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: {status_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            self._save_state(self.current_cycle_state)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            self._save_cache()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_duration = time.time() - start_time
            self.performance_stats['cycle_times'].append(total_duration)
            if len(self.performance_stats['cycle_times']) > 100:
                self.performance_stats['cycle_times'] = self.performance_stats['cycle_times'][-100:]
            
            self.logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê:")
            self.logger.info(f"   üë§ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {personal_stats['status']}")
            self.logger.info(f"   üè¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {work_stats['status']}")
            self.logger.info(f"   üé¨ –ú–µ–¥–∏–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {media_stats.get('processed', 0)}, –Ω–∞–π–¥–µ–Ω–æ {media_stats.get('synced', 0)}")
            self.logger.info(f"   üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {transcription_stats.get('errors', 0)}")
            self.logger.info(f"   üìã –°–∞–º–º–∞—Ä–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {summary_stats.get('errors', 0)}")
            self.logger.info(f"   üìù Notion: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {notion_stats.get('synced', 0)}, –æ—à–∏–±–æ–∫ {notion_stats.get('errors', 0)}")
            self.logger.info(f"   üì± Telegram: {telegram_stats.get('status', 'unknown')}")
            self.logger.info(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¶–ò–ö–õ–ê: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._save_performance_stats()
            
            self.logger.info("‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_summaries(self) -> tuple:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."""
        try:
            summary_stats, notion_update_stats = self.summary_handler.process()
            self.last_summary_stats = summary_stats
            return summary_stats, notion_update_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            self.last_summary_stats = error_stats
            return error_stats, {"status": "skipped", "message": "Notion updates not implemented"}
    

    def service_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üë∑ –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                self.run_service_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            self.logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self._load_config():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self.service_worker, daemon=True)
        self.thread.start()
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å...")
        self.running = False
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=10)
            if self.thread.is_alive():
                self.logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        self.logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _load_previous_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            state_file = Path('data/service_state.json')
            if state_file.exists():
                with open(state_file, 'r', encoding='utf-8') as f:
                    state = json.load(f)
                self.logger.info(f"‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {state_file}")
                return state
            else:
                self.logger.info("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {}
    
    def _create_cycle_state(self, personal_stats, work_stats, media_stats, transcription_stats, notion_stats, summary_stats, notion_update_stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            total_time = time.time() - getattr(self, '_cycle_start_time', time.time())
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞
            cycle_state = {
                "timestamp": datetime.now().isoformat(),
                "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "cycle_number": self.cycle_counter,
                "cycle_id": str(uuid.uuid4()),
                "execution_time": round(total_time, 2),
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
                "personal_events": {
                    "status": personal_stats.get("status", "skipped"),
                    "processed": personal_stats.get("processed", 0),
                    "total": personal_stats.get("total", 0),
                    "new": personal_stats.get("new", 0),
                    "already_processed": personal_stats.get("already_processed", 0),
                    "message": personal_stats.get("message", ""),
                    "duration": personal_stats.get("duration", 0),
                    "errors": personal_stats.get("errors", 0)
                },
                "work_events": {
                    "status": work_stats.get("status", "skipped"),
                    "processed": work_stats.get("processed", 0),
                    "total": work_stats.get("total", 0),
                    "new": work_stats.get("new", 0),
                    "already_processed": work_stats.get("already_processed", 0),
                    "message": work_stats.get("message", ""),
                    "duration": work_stats.get("duration", 0),
                    "errors": work_stats.get("errors", 0)
                },
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–¥–∏–∞
                "media_processed": {
                    "status": media_stats.get("status", "skipped"),
                    "count": media_stats.get("processed", 0),
                    "total_size": media_stats.get("total_size", "N/A"),
                    "duration": media_stats.get("duration", 0),
                    "message": media_stats.get("message", ""),
                    "errors": media_stats.get("errors", 0)
                },
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º
                "transcriptions": {
                    "status": transcription_stats.get("status", "skipped"),
                    "count": transcription_stats.get("processed", 0),
                    "total_duration": transcription_stats.get("total_duration", "N/A"),
                    "duration": transcription_stats.get("duration", 0),
                    "errors": transcription_stats.get("errors", 0),
                    "message": transcription_stats.get("message", "")
                },
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Notion
                "notion_synced": {
                    "status": notion_stats.get("status", "skipped"),
                    "count": notion_stats.get("processed", 0),
                    "updated": notion_stats.get("updated", 0),
                    "duration": notion_stats.get("duration", 0),
                    "message": notion_stats.get("message", ""),
                    "errors": notion_stats.get("errors", 0)
                },
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∞–º–º–∞—Ä–∏
                "summaries": {
                    "status": summary_stats.get("status", "skipped"),
                    "count": summary_stats.get("processed", 0),
                    "errors": summary_stats.get("errors", 0),
                    "duration": summary_stats.get("duration", 0),
                    "message": summary_stats.get("message", "")
                },
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "total_processed": (
                    personal_stats.get("processed", 0) + 
                    work_stats.get("processed", 0) + 
                    media_stats.get("processed", 0) + 
                    transcription_stats.get("processed", 0) + 
                    notion_stats.get("processed", 0) + 
                    summary_stats.get("processed", 0) + 
                    notion_update_stats.get("processed", 0)
                ),
                "errors_count": (
                    personal_stats.get("errors", 0) + 
                    work_stats.get("errors", 0) + 
                    media_stats.get("errors", 0) + 
                    transcription_stats.get("errors", 0) + 
                    notion_stats.get("errors", 0) + 
                    summary_stats.get("errors", 0) + 
                    notion_update_stats.get("errors", 0)
                ),
                
                "status": "completed"
            }
            
            self.logger.debug(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞ #{self.cycle_counter}: {cycle_state}")
            return cycle_state
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "timestamp": datetime.now().isoformat(),
                "cycle_number": self.cycle_counter,
                "status": "error",
                "error": str(e)
            }

    def _save_state(self, state):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏–∫–ª–∞."""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            pass
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    @retry(max_attempts=2, delay=3, backoff=2)
    def _update_notion_with_results(self) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        try:
            self.logger.info("üìù –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Notion –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            processed_files = []  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            transcribed_files = []  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            summarized_files = []  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            
            update_stats = {
                "status": "success",
                "processed": len(processed_files),
                "updated": 0,
                "duration": 0,
                "message": "Notion pages updated successfully",
                "errors": 0
            }
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Notion: {len(processed_files)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {len(transcribed_files)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ, {len(summarized_files)} —Å–∞–º–º–∞—Ä–∏")
            
            duration = time.time() - start_time
            update_stats["duration"] = duration
            
            self.logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            return update_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {
                "status": "error",
                "processed": 0,
                "updated": 0,
                "duration": 0,
                "message": str(e),
                "errors": 1
            }
            return error_stats
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            state_dir = Path('data')
            state_dir.mkdir(exist_ok=True)
            
            state_file = state_dir / 'service_state.json'
            
            with open(state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {state_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("--config", default=".env", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--interval", type=int, default=300, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--media-interval", type=int, default=1800, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = MeetingAutomationService(
        config_file=args.config,
        interval=args.interval,
        media_interval=args.media_interval,
        log_level=args.log_level
    )
    
    try:
        service.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
