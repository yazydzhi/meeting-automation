#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dual-account —Å–∏—Å—Ç–µ–º—É (–ª–∏—á–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç—ã)
"""

import os
import sys
import time
import json
import signal
import logging
import threading
import subprocess
import traceback
import concurrent.futures
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from pathlib import Path
import functools
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ dotenv: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
    sys.exit(1)


def retry(max_attempts=3, delay=5, backoff=2, exceptions=(Exception,)):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(self, *args, **kwargs):
            mtries, mdelay = max_attempts, delay
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            func_name = func.__name__
            
            while mtries > 1:
                try:
                    return func(self, *args, **kwargs)
                except exceptions as e:
                    msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ {func_name} (–ø–æ–ø—ã—Ç–∫–∞ {max_attempts - mtries + 1}/{max_attempts}): {e}"
                    self.logger.warning(msg)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
                    
                    mtries -= 1
                    if mtries == 1:
                        self.logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func_name}")
                        break
                        
                    self.logger.info(f"‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {mdelay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(mdelay)
                    mdelay *= backoff
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            return func(self, *args, **kwargs)
        return wrapper
    return decorator


class MeetingAutomationService:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self, config_file: str = '.env', 
                 interval: int = 300, 
                 media_interval: int = 1800,
                 log_level: str = 'INFO'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            media_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.config_file = config_file
        self.interval = interval
        self.media_check_interval = media_interval
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = self._setup_logging(log_level)
        self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.last_media_check = 0
        self.last_media_stats = {}
        self.last_transcription_stats = {}
        self.last_notion_stats = {}
        self.last_telegram_stats = {}
        self.last_summary_stats = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.previous_cycle_state = {}
        self.current_cycle_state = {}
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
        self.running = False
        self.thread = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.cache = {
            'processed_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'transcribed_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'summarized_files': set(),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            'notion_pages': {},  # –°–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü Notion (–∫–ª—é—á - ID –ø–∞–ø–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ - ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            'last_update': datetime.now()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'cpu_usage': [],
            'memory_usage': [],
            'disk_usage': [],
            'cycle_times': []
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._load_cache()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._init_handlers()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._log_configuration()
        
        self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_handlers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á."""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            try:
                from src.calendar_handler import get_calendar_handler
                from src.media_processor import get_media_processor
                from src.transcription_handler import get_transcription_handler
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                self.calendar_handler = get_calendar_handler(self.config_manager, self.logger)
                self.media_processor = get_media_processor(self.config_manager, self.logger)
                self.transcription_handler = get_transcription_handler(self.config_manager, self.logger)
                
                self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç.")
                self.calendar_handler = None
                self.media_processor = None
                self.transcription_handler = None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.calendar_handler = None
            self.media_processor = None
            self.transcription_handler = None
    
    def _setup_logging(self, log_level: str) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger("meeting_automation_service")
        logger.setLevel(logging.getLevelName(log_level))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ (INFO –∏ –≤—ã—à–µ)
        file_handler = logging.FileHandler(log_dir / "service.log")
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ INFO)
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return logger
    
    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            cache_file = Path('data/service_cache.json')
            if cache_file.exists():
                with open(cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                self.cache['processed_files'] = set(cache_data.get('processed_files', []))
                self.cache['transcribed_files'] = set(cache_data.get('transcribed_files', []))
                self.cache['summarized_files'] = set(cache_data.get('summarized_files', []))
                self.cache['notion_pages'] = cache_data.get('notion_pages', {})
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                last_update_str = cache_data.get('last_update')
                if last_update_str:
                    self.cache['last_update'] = datetime.fromisoformat(last_update_str)
                
                self.logger.info(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {cache_file}")
                self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {len(self.cache['processed_files'])} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, {len(self.cache['transcribed_files'])} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            else:
                self.logger.info("‚ö†Ô∏è –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cache_dir = Path('data')
            cache_dir.mkdir(exist_ok=True)
            
            cache_file = cache_dir / 'service_cache.json'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
            cache_data = {
                'processed_files': list(self.cache['processed_files']),
                'transcribed_files': list(self.cache['transcribed_files']),
                'summarized_files': list(self.cache['summarized_files']),
                'notion_pages': self.cache['notion_pages'],
                'last_update': datetime.now().isoformat()
            }
            
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {cache_file}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")

    def _is_file_processed(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."""
        return file_path in self.cache['processed_files']

    def _mark_file_processed(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π."""
        self.cache['processed_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _is_file_transcribed(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω."""
        return file_path in self.cache['transcribed_files']

    def _mark_file_transcribed(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."""
        self.cache['transcribed_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _is_file_summarized(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."""
        return file_path in self.cache['summarized_files']

    def _mark_file_summarized(self, file_path: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π."""
        self.cache['summarized_files'].add(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    def _get_notion_page_id(self, folder_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –ø–æ ID –ø–∞–ø–∫–∏."""
        return self.cache['notion_pages'].get(folder_id)

    def _set_notion_page_id(self, folder_id: str, page_id: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –¥–ª—è –ø–∞–ø–∫–∏."""
        self.cache['notion_pages'][folder_id] = page_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._save_cache()

    @retry(max_attempts=3, delay=5, backoff=2)
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
            if os.path.exists(self.config_file):
                load_dotenv(self.config_file)
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥: {self.config_file}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigManager
                from src.config_manager import ConfigManager
                self.config_manager = ConfigManager(self.config_file)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                general_config = self.config_manager.get_general_config()
                self.interval = general_config.get('service_check_interval', 300)
                self.media_check_interval = general_config.get('service_media_interval', 1800)
                
                self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval} —Å–µ–∫—É–Ω–¥")
                self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                if self.config_manager.validate_config():
                    self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞")
                    return True
                else:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return False
            else:
                self.logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_file}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _log_configuration(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            self.logger.info("üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ê:")
            
            # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            general_config = self.config_manager.get_general_config()
            self.logger.info("‚öôÔ∏è –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            for key, value in general_config.items():
                self.logger.info(f"   ‚Ä¢ {key}: {value}")
            
            # –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            self.logger.info("üë• –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
            self.logger.info(f"   ‚Ä¢ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.config_manager.is_personal_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.config_manager.is_work_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                self.logger.info("üë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {personal_config.get('calendar_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞: {personal_config.get('drive_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {personal_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                self.logger.info("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {work_config.get('calendar_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞: {work_config.get('drive_provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                self.logger.info(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {work_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞
            media_config = self.config_manager.get_media_config()
            self.logger.info("üé¨ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            self.logger.info(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {media_config.get('quality', 'medium')}")
            self.logger.info(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç: {media_config.get('output_format', 'mp4')}")
            self.logger.info(f"   ‚Ä¢ –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if media_config.get('video_compression', True) else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            whisper_config = self.config_manager.get_whisper_config()
            self.logger.info("üé§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:")
            self.logger.info(f"   ‚Ä¢ –ú–µ—Ç–æ–¥: {whisper_config.get('transcription_method', 'local')}")
            self.logger.info(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {whisper_config.get('whisper_model', 'base')}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Notion
            notion_config = self.config_manager.get_notion_config()
            self.logger.info("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Notion:")
            self.logger.info(f"   ‚Ä¢ –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if notion_config.get('token') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if notion_config.get('database_id') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
            telegram_config = self.config_manager.get_telegram_config()
            self.logger.info("üì± –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram:")
            self.logger.info(f"   ‚Ä¢ –ë–æ—Ç —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_config.get('bot_token') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            self.logger.info(f"   ‚Ä¢ –ß–∞—Ç ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_config.get('chat_id') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def run_personal_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            if self.calendar_handler:
                return self.calendar_handler.process_account('personal')
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ universal script
                self.logger.info("üë§ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
                
                cmd = [
                    sys.executable,
                    'meeting_automation_universal.py',
                    'account',
                    '--type', 'personal'
                ]
                
                self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
                
                process = subprocess.run(cmd, capture_output=True, text=True)
                
                if process.returncode == 0:
                    self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return {"status": "success", "output": process.stdout}
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {process.stderr}")
                    return {"status": "error", "output": process.stderr}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "output": str(e)}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def run_work_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            if self.calendar_handler:
                return self.calendar_handler.process_account('work')
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ universal script
                self.logger.info("üè¢ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
                
                cmd = [
                    sys.executable,
                    'meeting_automation_universal.py',
                    'account',
                    '--type', 'work'
                ]
                
                self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
                
                process = subprocess.run(cmd, capture_output=True, text=True)
                
                if process.returncode == 0:
                    self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return {"status": "success", "output": process.stdout}
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {process.stderr}")
                    return {"status": "error", "output": process.stderr}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "output": str(e)}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_media_files(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            if hasattr(self, 'last_media_check') and (current_time - self.last_media_check) < self.media_check_interval:
                self.logger.info("‚è∞ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0}
            
            self.last_media_check = current_time
            
            if self.media_processor:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
                media_stats = self.media_processor.process_media('medium')
                self.last_media_stats = media_stats
                return media_stats
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ universal script
                self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
                
                cmd = [
                    sys.executable,
                    'meeting_automation_universal.py',
                    'media',
                    '--quality', 'medium'
                ]
                
                self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
                
                process = subprocess.run(cmd, capture_output=True, text=True)
                
                if process.returncode == 0:
                    self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –≤—ã–≤–æ–¥–∞
                    try:
                        import json
                        import re
                        
                        # –ò—â–µ–º JSON –≤ –≤—ã–≤–æ–¥–µ
                        json_match = re.search(r'({.*})', process.stdout, re.DOTALL)
                        if json_match:
                            media_stats = json.loads(json_match.group(1))
                            self.last_media_stats = media_stats
                            return media_stats
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞: {e}")
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    return {"status": "success", "processed": 1, "synced": 1, "cleanup": 0, "errors": 0}
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {process.stderr}")
                    return {"status": "error", "processed": 0, "synced": 0, "cleanup": 0, "errors": 1}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "processed": 0, "synced": 0, "cleanup": 0, "errors": 1}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_audio_transcription(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
        try:
            if self.transcription_handler:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
                transcription_stats = self.transcription_handler.process_transcription()
                self.last_transcription_stats = transcription_stats
                return transcription_stats
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                self.logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
                
                transcription_stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                has_audio_files = False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                if self.config_manager and self.config_manager.is_personal_enabled():
                    personal_config = self.config_manager.get_personal_config()
                    personal_folder = personal_config.get('local_drive_root')
                    if personal_folder and os.path.exists(personal_folder):
                        self.logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                        personal_audio_files = self._count_audio_files(personal_folder)
                        if personal_audio_files > 0:
                            self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {personal_audio_files} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                            has_audio_files = True
                            self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                            personal_result = self._process_folder_transcription(personal_folder, "personal")
                            transcription_stats["details"].append(personal_result)
                            transcription_stats["processed"] += personal_result.get("processed", 0)
                            transcription_stats["errors"] += personal_result.get("errors", 0)
                        else:
                            self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
                if self.config_manager and self.config_manager.is_work_enabled():
                    work_config = self.config_manager.get_work_config()
                    work_folder = work_config.get('local_drive_root')
                    if work_folder and os.path.exists(work_folder):
                        self.logger.info(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                        work_audio_files = self._count_audio_files(work_folder)
                        if work_audio_files > 0:
                            self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {work_audio_files} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ")
                            has_audio_files = True
                            self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                            work_result = self._process_folder_transcription(work_folder, "work")
                            transcription_stats["details"].append(work_result)
                            transcription_stats["processed"] += work_result.get("processed", 0)
                            transcription_stats["errors"] += work_result.get("errors", 0)
                        else:
                            self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                
                if not has_audio_files:
                    self.logger.info("üìÇ –ù–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                    transcription_stats["status"] = "no_files"
                
                self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats['processed']}, –æ—à–∏–±–æ–∫ {transcription_stats['errors']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
                self.last_transcription_stats = transcription_stats
                
                return transcription_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            self.last_transcription_stats = error_stats
            return error_stats
    
    def _count_audio_files(self, folder_path: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
        try:
            count = 0
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3') and not file.lower().endswith('_compressed.mp3'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                        mp3_path = os.path.join(root, file)
                        transcript_file = mp3_path.replace('.mp3', '_transcript.txt')
                        if not os.path.exists(transcript_file):
                            count += 1
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {e}")
            return 0
    
    def _process_folder_transcription(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            mp3_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3'):
                        mp3_files.append(os.path.join(root, file))
            
            if not mp3_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                return result
            
            self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(mp3_files)} MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            for mp3_file in mp3_files:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcript_file = mp3_file.replace('.mp3', '_transcript.txt')
                    if os.path.exists(transcript_file):
                        self.logger.info(f"üìÑ –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(transcript_file)}")
                        result["processed"] += 1
                        result["files"].append({
                            "file": os.path.basename(mp3_file),
                            "status": "already_exists",
                            "output": transcript_file
                        })
                        continue
                    
                    self.logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é: {os.path.basename(mp3_file)}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcription_result = subprocess.run([
                        sys.executable, "meeting_automation_universal.py", "transcribe", 
                        "--account", account_type, "--file", mp3_file
                    ], capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —Ñ–∞–π–ª
                    
                    if transcription_result.returncode == 0:
                        result["processed"] += 1
                        result["files"].append({
                            "file": os.path.basename(mp3_file),
                            "status": "success",
                            "output": transcription_result.stdout
                        })
                        self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {os.path.basename(mp3_file)}")
                    else:
                        result["errors"] += 1
                        result["files"].append({
                            "file": os.path.basename(mp3_file),
                            "status": "error",
                            "error": transcription_result.stderr
                        })
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(mp3_file)}")
                        
                except subprocess.TimeoutExpired:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "timeout",
                        "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    })
                    self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(mp3_file)}")
                except Exception as e:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "error",
                        "error": str(e)
                    })
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {os.path.basename(mp3_file)}: {e}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def sync_with_notion(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion."""
        try:
            self.logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ NotionHandler
            
            notion_stats = {"status": "success", "synced": 0, "errors": 0, "details": []}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            self.last_notion_stats = notion_stats
            
            return notion_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "synced": 0, "errors": 1, "details": [str(e)]}
            self.last_notion_stats = error_stats
            return error_stats
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def send_telegram_notifications(self, current_state: Dict[str, Any], previous_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram."""
        try:
            self.logger.info("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            force_send = self.config_manager.get('TELEGRAM_ALWAYS_SEND', False)
            
            if not force_send and not self._has_changes(current_state, previous_state):
                self.logger.info("‚è≠Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return {"status": "skipped", "message": "No changes"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = self._format_detailed_report()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.logger.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...")
            
            cmd = [
                sys.executable,
                'meeting_automation_universal.py',
                'notify',
                '--message', report
            ]
            
            self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd[:4])}...")
            
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            if process.returncode == 0:
                self.logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return {"status": "success", "message": "Notification sent"}
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {process.stderr}")
                return {"status": "error", "message": process.stderr}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {"status": "error", "message": str(e)}
    
    def _format_status_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è Telegram."""
        try:
            message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if self.config_manager:
                if self.config_manager.is_personal_enabled():
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                
                if self.config_manager.is_work_enabled():
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
            
            message += "\nüéØ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ</b>"
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    def create_status_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
        try:
            self.logger.info("üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            if self.config_manager and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
                    self._create_folder_status_file(personal_folder, "personal")
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
                    self._create_meeting_status_files(personal_folder, "personal")
            
            if self.config_manager and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
                    self._create_folder_status_file(work_folder, "work")
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏
                    self._create_meeting_status_files(work_folder, "work")
            
            self.logger.info("‚úÖ –§–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _create_folder_status_file(self, folder_path: str, account_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
        try:
            status_file_path = os.path.join(folder_path, "üìä –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò.txt")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
            status_info = self._analyze_folder_status(folder_path, account_type)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
            with open(status_file_path, 'w', encoding='utf-8') as f:
                f.write(status_info)
            
            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º (—É–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã)
            try:
                import subprocess
                subprocess.run(['chflags', 'nohidden', status_file_path], check=False)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ chflags –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            self.logger.info(f"‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω: {status_file_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {folder_path}: {e}")
    
    def _create_meeting_status_files(self, root_folder: str, account_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—Å—Ç—Ä–µ—á–∏."""
        try:
            # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á (–ø–∞–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏)
            meeting_folders = []
            for item in os.listdir(root_folder):
                item_path = os.path.join(root_folder, item)
                if os.path.isdir(item_path) and any(char.isdigit() for char in item):
                    meeting_folders.append(item_path)
            
            for meeting_folder in meeting_folders:
                try:
                    self._create_folder_status_file(meeting_folder, account_type)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ {meeting_folder}: {e}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á: {e}")
    
    def _analyze_folder_status(self, folder_path: str, account_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
        try:
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            status_report = f"""üìä –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ü–ö–ò
{'='*50}
üìÅ –ü–∞–ø–∫–∞: {folder_path}
üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_type}
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}
{'='*50}

üé¨ –í–ò–î–ï–û –§–ê–ô–õ–´:
"""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
            video_files = []
            compressed_videos = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.mov', '.mp4', '.avi', '.mkv')):
                        file_path = os.path.join(root, file)
                        if 'compressed' in file.lower():
                            compressed_videos.append(file)
                        else:
                            video_files.append(file)
            
            if video_files:
                status_report += f"üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: {len(video_files)}\n"
                for video in video_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    status_report += f"   ‚Ä¢ {video}\n"
                if len(video_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(video_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            if compressed_videos:
                status_report += f"üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: {len(compressed_videos)}\n"
                for video in compressed_videos[:3]:
                    status_report += f"   ‚Ä¢ {video}\n"
            else:
                status_report += "üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
            status_report += "\nüéµ –ê–£–î–ò–û –§–ê–ô–õ–´:\n"
            audio_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3'):
                        audio_files.append(file)
            
            if audio_files:
                status_report += f"üé§ MP3 —Ñ–∞–π–ª—ã: {len(audio_files)}\n"
                for audio in audio_files[:5]:
                    status_report += f"   ‚Ä¢ {audio}\n"
                if len(audio_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(audio_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üé§ MP3 —Ñ–∞–π–ª—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            status_report += "\nüìù –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:\n"
            transcription_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.txt', '.md', '.csv')):
                        transcription_files.append(file)
            
            if transcription_files:
                status_report += f"üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(transcription_files)}\n"
                for trans in transcription_files[:5]:
                    status_report += f"   ‚Ä¢ {trans}\n"
                if len(transcription_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(transcription_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            status_report += f"""

{'='*50}
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∂–∞—Ç—ã—Ö –≤–µ—Ä—Å–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å MP3 —Ñ–∞–π–ª—ã –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram
üìù –ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Notion
{'='*50}

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π meeting_automation
üìÖ {current_time}
"""
            
            return status_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏: {str(e)}"
    
    def _monitor_performance(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_info = psutil.virtual_memory()
            memory_percent = memory_info.percent
            disk_info = psutil.disk_usage('/')
            disk_percent = disk_info.percent
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.performance_stats['cpu_usage'].append(cpu_percent)
            self.performance_stats['memory_usage'].append(memory_percent)
            self.performance_stats['disk_usage'].append(disk_percent)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–æ–≤
            max_stats = 100
            if len(self.performance_stats['cpu_usage']) > max_stats:
                self.performance_stats['cpu_usage'] = self.performance_stats['cpu_usage'][-max_stats:]
            if len(self.performance_stats['memory_usage']) > max_stats:
                self.performance_stats['memory_usage'] = self.performance_stats['memory_usage'][-max_stats:]
            if len(self.performance_stats['disk_usage']) > max_stats:
                self.performance_stats['disk_usage'] = self.performance_stats['disk_usage'][-max_stats:]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            self.logger.info(f"üñ•Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:")
            self.logger.info(f"   CPU: {cpu_percent:.1f}%")
            self.logger.info(f"   –ü–∞–º—è—Ç—å: {memory_percent:.1f}% ({memory_info.used / (1024 ** 3):.1f} –ì–ë / {memory_info.total / (1024 ** 3):.1f} –ì–ë)")
            self.logger.info(f"   –î–∏—Å–∫: {disk_percent:.1f}% ({disk_info.used / (1024 ** 3):.1f} –ì–ë / {disk_info.total / (1024 ** 3):.1f} –ì–ë)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
            self._save_performance_stats()
            
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory_percent,
                'disk_percent': disk_percent
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            return {}

    def _save_performance_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            stats_dir = Path('data')
            stats_dir.mkdir(exist_ok=True)
            
            stats_file = stats_dir / 'performance_stats.json'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.performance_stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
    
    def run_service_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            start_time = time.time()
            self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            self.logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            self._monitor_performance()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.previous_cycle_state = self._load_previous_state()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ü–∏–∫–ª–∞
            self._load_cache()
            
            # –≠—Ç–∞–ø 1: –ö–∞–ª–µ–Ω–¥–∞—Ä—å ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –∑–∞–ø–∏—Å–∏ –≤ Notion
            self.logger.info("üìÖ –≠–¢–ê–ü 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á...")
            personal_stats = {"status": "skipped", "output": ""}
            work_stats = {"status": "skipped", "output": ""}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                personal_future = None
                work_future = None
                
                if self.config_manager and self.config_manager.is_personal_enabled():
                    self.logger.info("üë§ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
                    personal_future = executor.submit(self.run_personal_automation)
                else:
                    self.logger.info("‚è≠Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                
                if self.config_manager and self.config_manager.is_work_enabled():
                    self.logger.info("üè¢ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
                    work_future = executor.submit(self.run_work_automation)
                else:
                    self.logger.info("‚è≠Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if personal_future:
                    personal_start = time.time()
                    personal_stats = personal_future.result()
                    personal_duration = time.time() - personal_start
                    self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                if work_future:
                    work_start = time.time()
                    work_stats = work_future.result()
                    work_duration = time.time() - work_start
                    self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –≠—Ç–∞–ø 2: –°–∂–∞—Ç–∏–µ –º–µ–¥–∏–∞ ‚Üí –≤—ã–¥–µ–ª–µ–Ω–∏–µ MP3
            self.logger.info("üé¨ –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
            media_start = time.time()
            media_stats = self.process_media_files()
            media_duration = time.time() - media_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {media_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {media_stats}")
            
            # –≠—Ç–∞–ø 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            self.logger.info("üé§ –≠–¢–ê–ü 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...")
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
            transcription_start = time.time()
            transcription_stats = self.process_audio_transcription()
            transcription_duration = time.time() - transcription_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcription_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {transcription_stats.get('errors', 0)}")
            
            # –≠—Ç–∞–ø 4: –°–∞–º–º–∞—Ä–∏ –∏ –¥—Ä—É–≥–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.logger.info("üìã –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
            summary_start = time.time()
            summary_stats = self.process_summaries()
            summary_duration = time.time() - summary_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {summary_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {summary_stats.get('errors', 0)}")
            
            # –≠—Ç–∞–ø 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Notion
            self.logger.info("üìù –≠–¢–ê–ü 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion...")
            notion_start = time.time()
            notion_stats = self.sync_with_notion()
            notion_duration = time.time() - notion_start
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {notion_duration:.2f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {notion_stats}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞
            self.current_cycle_state = self._create_cycle_state(
                personal_stats, work_stats, media_stats, transcription_stats, notion_stats, summary_stats
            )
            
            # –≠—Ç–∞–ø 6: –û—Ç—á–µ—Ç –≤ Telegram –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
            self.logger.info("üì± –≠–¢–ê–ü 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞...")
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                telegram_future = executor.submit(self.send_telegram_notifications, self.current_cycle_state, self.previous_cycle_state)
                status_future = executor.submit(self.create_status_files)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                telegram_start = time.time()
                telegram_stats = telegram_future.result()
                telegram_duration = time.time() - telegram_start
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {telegram_duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                status_start = time.time()
                status_future.result()
                status_duration = time.time() - status_start
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: {status_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            self._save_current_state(self.current_cycle_state)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            self._save_cache()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_duration = time.time() - start_time
            self.performance_stats['cycle_times'].append(total_duration)
            if len(self.performance_stats['cycle_times']) > 100:
                self.performance_stats['cycle_times'] = self.performance_stats['cycle_times'][-100:]
            
            self.logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¶–ò–ö–õ–ê:")
            self.logger.info(f"   üë§ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {personal_stats['status']}")
            self.logger.info(f"   üè¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {work_stats['status']}")
            self.logger.info(f"   üé¨ –ú–µ–¥–∏–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {media_stats.get('processed', 0)}, –Ω–∞–π–¥–µ–Ω–æ {media_stats.get('synced', 0)}")
            self.logger.info(f"   üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {transcription_stats.get('errors', 0)}")
            self.logger.info(f"   üìã –°–∞–º–º–∞—Ä–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats.get('processed', 0)}, –æ—à–∏–±–æ–∫ {summary_stats.get('errors', 0)}")
            self.logger.info(f"   üìù Notion: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {notion_stats.get('synced', 0)}, –æ—à–∏–±–æ–∫ {notion_stats.get('errors', 0)}")
            self.logger.info(f"   üì± Telegram: {telegram_stats.get('status', 'unknown')}")
            self.logger.info(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¶–ò–ö–õ–ê: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._save_performance_stats()
            
            self.logger.info("‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
    
    @retry(max_attempts=2, delay=3, backoff=2)
    def process_summaries(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."""
        try:
            if self.transcription_handler:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
                summary_stats = self.transcription_handler.process_summaries()
                self.last_summary_stats = summary_stats
                return summary_stats
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                self.logger.info("üìù –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
                
                summary_stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                has_transcriptions = False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                if self.config_manager and self.config_manager.is_personal_enabled():
                    personal_config = self.config_manager.get_personal_config()
                    personal_folder = personal_config.get('local_drive_root')
                    if personal_folder and os.path.exists(personal_folder):
                        self.logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                        personal_result = self._process_folder_summaries(personal_folder, "personal")
                        if personal_result["processed"] > 0:
                            has_transcriptions = True
                            summary_stats["details"].append(personal_result)
                            summary_stats["processed"] += personal_result.get("processed", 0)
                            summary_stats["errors"] += personal_result.get("errors", 0)
                        else:
                            self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
                if self.config_manager and self.config_manager.is_work_enabled():
                    work_config = self.config_manager.get_work_config()
                    work_folder = work_config.get('local_drive_root')
                    if work_folder and os.path.exists(work_folder):
                        self.logger.info(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                        work_result = self._process_folder_summaries(work_folder, "work")
                        if work_result["processed"] > 0:
                            has_transcriptions = True
                            summary_stats["details"].append(work_result)
                            summary_stats["processed"] += work_result.get("processed", 0)
                            summary_stats["errors"] += work_result.get("errors", 0)
                        else:
                            self.logger.info(f"üìÇ –í –ø–∞–ø–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                if not has_transcriptions:
                    self.logger.info("üìÇ –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    summary_stats["status"] = "no_files"
                
                self.logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary_stats['processed']}, –æ—à–∏–±–æ–∫ {summary_stats['errors']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
                self.last_summary_stats = summary_stats
                
                return summary_stats
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            self.logger.debug(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            error_stats = {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
            self.last_summary_stats = error_stats
            return error_stats
    
    def _process_folder_summaries(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ."""
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            transcript_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('_transcript.txt'):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å–∞–º–º–∞—Ä–∏
                        transcript_path = os.path.join(root, file)
                        summary_file = transcript_path.replace('_transcript.txt', '_summary.txt')
                        analysis_file = transcript_path.replace('_transcript.txt', '_analysis.json')
                        
                        # –ï—Å–ª–∏ —Å–∞–º–º–∞—Ä–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
                        if os.path.exists(summary_file) or os.path.exists(analysis_file):
                            continue
                        
                        transcript_files.append(transcript_path)
            
            if not transcript_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return result
            
            self.logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(transcript_files)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
            openai_config = self.config_manager.get_openai_config()
            openai_api_key = openai_config.get('api_key')
            
            if not openai_api_key:
                self.logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á OpenAI")
                result["errors"] += 1
                return result
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            from transcript_analyzer import TranscriptAnalyzer
            analyzer = TranscriptAnalyzer(
                api_key=openai_api_key,
                model=openai_config.get('analysis_model', 'gpt-4o-mini')
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            for transcript_path in transcript_files:
                try:
                    file_name = os.path.basename(transcript_path)
                    self.logger.info(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {file_name}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    meeting_title = ""
                    meeting_date = ""
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    import re
                    date_match = re.search(r'(\d{4}-\d{2}-\d{2})', file_name)
                    if date_match:
                        meeting_date = date_match.group(1)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
                    if meeting_date:
                        title_match = re.search(rf'{meeting_date}.*?_transcript\.txt', file_name)
                        if title_match:
                            meeting_title = title_match.group(0).replace(f"{meeting_date} ", "").replace("_transcript.txt", "")
                    
                    # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    with open(transcript_path, 'r', encoding='utf-8') as f:
                        transcript_text = f.read()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    analysis_result = analyzer.analyze_meeting_transcript(
                        transcript=transcript_text,
                        meeting_title=meeting_title,
                        meeting_date=meeting_date
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON
                    analysis_file = transcript_path.replace('_transcript.txt', '_analysis.json')
                    with open(analysis_file, 'w', encoding='utf-8') as f:
                        import json
                        json.dump(analysis_result, f, ensure_ascii=False, indent=2)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏
                    summary_file = transcript_path.replace('_transcript.txt', '_summary.txt')
                    with open(summary_file, 'w', encoding='utf-8') as f:
                        summary = analysis_result.get('meeting_summary', {})
                        f.write(f"# {summary.get('title', '–í—Å—Ç—Ä–µ—á–∞')}\n\n")
                        f.write(f"–î–∞—Ç–∞: {meeting_date}\n\n")
                        f.write(f"## –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞\n{summary.get('main_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n")
                        
                        # –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
                        f.write("## –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n")
                        for decision in summary.get('key_decisions', []):
                            f.write(f"- {decision}\n")
                        f.write("\n")
                        
                        # –î–µ–π—Å—Ç–≤–∏—è
                        f.write("## –î–µ–π—Å—Ç–≤–∏—è\n")
                        for action in summary.get('action_items', []):
                            f.write(f"- {action}\n")
                        f.write("\n")
                        
                        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
                        f.write("## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n")
                        for step in summary.get('next_steps', []):
                            f.write(f"- {step}\n")
                        f.write("\n")
                        
                        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                        f.write("## –£—á–∞—Å—Ç–Ω–∏–∫–∏\n")
                        for participant in summary.get('participants', []):
                            f.write(f"- {participant}\n")
                    
                    result["processed"] += 1
                    result["files"].append({
                        "file": file_name,
                        "status": "success",
                        "output": os.path.basename(summary_file)
                    })
                    
                    self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {file_name}")
                    
                except Exception as e:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(transcript_path),
                        "status": "error",
                        "error": str(e)
                    })
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {os.path.basename(transcript_path)}: {e}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}
    
    def service_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üë∑ –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                self.run_service_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            self.logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self._load_config():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self.service_worker, daemon=True)
        self.thread.start()
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å...")
        self.running = False
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=10)
            if self.thread.is_alive():
                self.logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        self.logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("--config", default=".env", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--interval", type=int, default=300, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--media-interval", type=int, default=1800, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--log-level", default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = MeetingAutomationService(
        config_file=args.config,
        interval=args.interval,
        media_interval=args.media_interval,
        log_level=args.log_level
    )
    
    try:
        service.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
