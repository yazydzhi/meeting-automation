#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dual-account —Å–∏—Å—Ç–µ–º—É (–ª–∏—á–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç—ã)
"""

import os
import sys
import time
import json
import signal
import logging
import threading
import subprocess
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ dotenv: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
    sys.exit(1)


class MeetingAutomationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π dual-account."""
    
    def __init__(self, config_path: str = ".env"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.config_path = config_path
        self.env = {}
        self.running = False
        self.thread = None
        self.logger = self._setup_logging()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        self.config_manager = None
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        self.media_check_interval = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –º–µ–¥–∏–∞
        self.media_processing_timeout = 1800  # 30 –º–∏–Ω—É—Ç –¥–ª—è –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.last_media_check = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PATH –¥–ª—è ffmpeg
        self._setup_ffmpeg_path()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.previous_cycle_state = None
        self.current_cycle_state = None
        self.state_file_path = "data/service_state.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._ensure_state_directory()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _ensure_state_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            state_dir = Path(self.state_file_path).parent
            state_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _load_previous_state(self) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            if os.path.exists(self.state_file_path):
                with open(self.state_file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
        return None
    
    def _save_current_state(self, state: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            with open(self.state_file_path, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")
    
    def _create_cycle_state(self, personal_stats: Dict[str, Any], work_stats: Dict[str, Any], 
                           media_stats: Dict[str, Any], transcription_stats: Dict[str, Any], 
                           notion_stats: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        return {
            "timestamp": datetime.now().isoformat(),
            "personal_account": {
                "status": personal_stats.get("status", "unknown"),
                "has_changes": personal_stats.get("status") == "success" and personal_stats.get("output", "")
            },
            "work_account": {
                "status": work_stats.get("status", "unknown"),
                "has_changes": work_stats.get("status") == "success" and work_stats.get("output", "")
            },
            "media_processing": {
                "processed": media_stats.get("processed", 0),
                "synced": media_stats.get("synced", 0),
                "errors": media_stats.get("errors", 0),
                "has_changes": (media_stats.get("processed", 0) > 0 or 
                               media_stats.get("synced", 0) > 0 or 
                               media_stats.get("errors", 0) > 0)
            },
            "transcription": {
                "status": transcription_stats.get("status", "unknown"),
                "processed": transcription_stats.get("processed", 0),
                "errors": transcription_stats.get("errors", 0),
                "has_changes": (transcription_stats.get("processed", 0) > 0 or 
                               transcription_stats.get("errors", 0) > 0)
            },
            "notion_sync": {
                "status": notion_stats.get("status", "unknown"),
                "synced": notion_stats.get("synced", 0),
                "errors": notion_stats.get("errors", 0),
                "has_changes": (notion_stats.get("synced", 0) > 0 or 
                               notion_stats.get("errors", 0) > 0)
            }
        }
    
    def _has_significant_changes(self, current_state: Dict[str, Any], previous_state: Optional[Dict[str, Any]]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        if not previous_state:
            return True  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if (current_state["media_processing"]["has_changes"] != previous_state["media_processing"]["has_changes"] or
            current_state["media_processing"]["processed"] != previous_state["media_processing"]["processed"] or
            current_state["media_processing"]["errors"] != previous_state["media_processing"]["errors"]):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if (current_state["transcription"]["has_changes"] != previous_state["transcription"]["has_changes"] or
            current_state["transcription"]["processed"] != previous_state["transcription"]["processed"] or
            current_state["transcription"]["errors"] != previous_state["transcription"]["errors"]):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
        if (current_state["notion_sync"]["has_changes"] != previous_state["notion_sync"]["has_changes"] or
            current_state["notion_sync"]["synced"] != previous_state["notion_sync"]["synced"] or
            current_state["notion_sync"]["errors"] != previous_state["notion_sync"]["errors"]):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if (current_state["personal_account"]["status"] != previous_state["personal_account"]["status"] or
            current_state["work_account"]["status"] != previous_state["work_account"]["status"]):
            return True
        
        return False
    
    def _format_detailed_report(self, current_state: Dict[str, Any], previous_state: Optional[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è Telegram."""
        message = "ü§ñ <b>–û—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes_detected = []
        
        # –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if current_state["media_processing"]["has_changes"]:
            media_info = f"üé¨ <b>–ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞:</b>\n"
            media_info += f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current_state['media_processing']['processed']}\n"
            media_info += f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {current_state['media_processing']['synced']}\n"
            if current_state["media_processing"]["errors"] > 0:
                media_info += f"   ‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {current_state['media_processing']['errors']}\n"
            changes_detected.append(media_info)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if current_state["transcription"]["has_changes"]:
            trans_info = f"üé§ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n"
            trans_info += f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current_state['transcription']['processed']}\n"
            if current_state["transcription"]["errors"] > 0:
                trans_info += f"   ‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {current_state['transcription']['errors']}\n"
            changes_detected.append(trans_info)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion
        if current_state["notion_sync"]["has_changes"]:
            notion_info = f"üìù <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion:</b>\n"
            notion_info += f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {current_state['notion_sync']['synced']}\n"
            if current_state["notion_sync"]["errors"] > 0:
                notion_info += f"   ‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {current_state['notion_sync']['errors']}\n"
            changes_detected.append(notion_info)
        
        # –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        personal_status = "‚úÖ" if current_state["personal_account"]["status"] == "success" else "‚ùå"
        work_status = "‚úÖ" if current_state["work_account"]["status"] == "success" else "‚ùå"
        
        account_info = f"üë• <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
        account_info += f"   ‚Ä¢ –õ–∏—á–Ω—ã–π: {personal_status} {current_state['personal_account']['status']}\n"
        account_info += f"   ‚Ä¢ –†–∞–±–æ—á–∏–π: {work_status} {current_state['work_account']['status']}\n"
        changes_detected.append(account_info)
        
        if changes_detected:
            message += "üîÑ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
            message += "\n".join(changes_detected)
        else:
            message += "‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message += f"\nüìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞:</b>\n"
        message += f"   ‚Ä¢ –ú–µ–¥–∏–∞: {current_state['media_processing']['processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n"
        message += f"   ‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {current_state['transcription']['processed']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n"
        message += f"   ‚Ä¢ Notion: {current_state['notion_sync']['synced']} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n"
        
        total_errors = (current_state["media_processing"]["errors"] + 
                       current_state["transcription"]["errors"] + 
                       current_state["notion_sync"]["errors"])
        
        if total_errors > 0:
            message += f"   ‚Ä¢ ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}\n"
        
        return message
    
    def _setup_ffmpeg_path(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–ª—è ffmpeg."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ ffmpeg –≤ —Ç–µ–∫—É—â–µ–º PATH
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                self.logger.info("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
        except Exception:
            pass
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ffmpeg –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        ffmpeg_paths = [
            "/opt/homebrew/bin/ffmpeg",  # macOS Homebrew
            "/usr/local/bin/ffmpeg",     # macOS/Linux
            "/opt/homebrew/bin/ffmpeg",  # Apple Silicon Homebrew
        ]
        
        for path in ffmpeg_paths:
            if os.path.exists(path):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ PATH
                current_path = os.environ.get('PATH', '')
                if path not in current_path:
                    os.environ['PATH'] = f"{path}:{current_path}"
                    self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ ffmpeg: {path}")
                return
        
        self.logger.warning("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    
    def _kill_hanging_ffmpeg_processes(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        try:
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã ffmpeg
            result = subprocess.run(['pgrep', '-f', 'ffmpeg'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                if pids and pids[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
                    self.logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–∞–≤–∏—Å—à–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã: {pids}")
                    
                    for pid in pids:
                        if pid.strip():
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                                subprocess.run(['kill', '-TERM', pid.strip()], 
                                             capture_output=True, text=True, timeout=5)
                                self.logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª TERM –ø—Ä–æ—Ü–µ—Å—Å—É FFmpeg PID: {pid}")
                            except Exception as e:
                                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg PID {pid}: {e}")
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    time.sleep(2)
                    result = subprocess.run(['pgrep', '-f', 'ffmpeg'], 
                                          capture_output=True, text=True, timeout=10)
                    
                    if result.returncode == 0:
                        remaining_pids = result.stdout.strip().split('\n')
                        if remaining_pids and remaining_pids[0]:
                            self.logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {remaining_pids}")
                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã
                            for pid in remaining_pids:
                                if pid.strip():
                                    try:
                                        subprocess.run(['kill', '-KILL', pid.strip()], 
                                                     capture_output=True, text=True, timeout=5)
                                        self.logger.info(f"üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω FFmpeg PID: {pid}")
                                    except Exception as e:
                                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg PID {pid}: {e}")
                else:
                    self.logger.info("‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                self.logger.info("‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger("meeting_automation_service")
        logger.setLevel(logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ (INFO –∏ –≤—ã—à–µ)
        file_handler = logging.FileHandler(log_dir / "service.log")
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ INFO)
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return logger
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        self.stop()
    
    def load_environment(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª
            if os.path.exists(self.config_path):
                load_dotenv(self.config_path)
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥: {self.config_path}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigManager
                from src.config_manager import ConfigManager
                self.config_manager = ConfigManager(self.config_path)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                general_config = self.config_manager.get_general_config()
                self.check_interval = general_config.get('service_check_interval', 300)
                self.media_check_interval = general_config.get('service_media_interval', 1800)
                self.media_processing_timeout = general_config.get('media_processing_timeout', 1800)
                
                self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
                self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
                self.logger.info(f"‚è∞ –¢–∞–π–º–∞—É—Ç –º–µ–¥–∏–∞: {self.media_processing_timeout} —Å–µ–∫—É–Ω–¥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                if self.config_manager.validate_config():
                    self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                else:
                    self.logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
                
                return True
            else:
                self.logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def run_personal_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            self.logger.info("üë§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            result = subprocess.run([
                sys.executable, "meeting_automation_universal.py", "calendar", "--account", "personal"
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {"status": "success", "output": result.stdout}
            else:
                self.logger.error(f"‚ùå –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.stderr}")
                return {"status": "error", "error": result.stderr}
                
        except subprocess.TimeoutExpired:
            error_msg = "‚è∞ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            self.logger.error(error_msg)
            return {"status": "timeout", "error": error_msg}
        except Exception as e:
            error_msg = f"‚ùå –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            self.logger.error(error_msg)
            return {"status": "error", "error": error_msg}
    
    def run_work_automation(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            self.logger.info("üè¢ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            result = subprocess.run([
                sys.executable, "meeting_automation_universal.py", "calendar", "--account", "work"
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.logger.info("‚úÖ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {"status": "success", "output": result.stdout}
            else:
                self.logger.error(f"‚ùå –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.stderr}")
                return {"status": "error", "error": result.stderr}
                
        except subprocess.TimeoutExpired:
            error_msg = "‚è∞ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
            self.logger.error(error_msg)
            return {"status": "timeout", "error": error_msg}
        except Exception as e:
            error_msg = f"‚ùå –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            self.logger.error(error_msg)
            return {"status": "error", "error": error_msg}
    
    def process_media_files(self) -> Dict[str, int]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
        try:
            self.logger.info("üé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            media_timeout = self.media_processing_timeout
            self.logger.info(f"‚è∞ –¢–∞–π–º–∞—É—Ç –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {media_timeout} —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–µ–¥–∏–∞
            current_time = time.time()
            if hasattr(self, 'last_media_check') and self.last_media_check is not None and current_time - self.last_media_check < self.media_check_interval:
                self.logger.info("‚è∞ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0}
            
            total_processed = 0
            total_synced = 0
            total_errors = 0
            
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            if self.config_manager and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                self.logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –ø–∞–ø–∫–∏: {work_folder}")
                
                self.logger.info("üé• –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PATH –¥–ª—è FFmpeg
                env = os.environ.copy()
                env['PATH'] = f"/opt/homebrew/bin:{env.get('PATH', '')}"

                work_result = subprocess.run([
                    sys.executable, "meeting_automation_universal.py", "media", "--account", "work", "--quality", "medium"
                ], capture_output=True, text=True, timeout=media_timeout, env=env)
            else:
                self.logger.info("üìÅ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                work_result = subprocess.CompletedProcess(
                    args=[], returncode=0, stdout="", stderr=""
                )
            
            if work_result.returncode == 0:
                self.logger.info("‚úÖ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if "üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:" in work_result.stdout:
                    import re
                    synced_match = re.search(r"üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: (\d+)", work_result.stdout)
                    processed_match = re.search(r"üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: (\d+)", work_result.stdout)
                    
                    work_synced = int(synced_match.group(1)) if synced_match else 0
                    work_processed = int(processed_match.group(1)) if processed_match else 0
                    
                    total_synced += work_synced
                    total_processed += work_processed
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_result.stderr}")
                total_errors += 1
            
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
            
            if self.config_manager and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                self.logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –ø–∞–ø–∫–∏: {personal_folder}")
                
                self.logger.info("üé• –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PATH –¥–ª—è FFmpeg
                env = os.environ.copy()
                env['PATH'] = f"/opt/homebrew/bin:{env.get('PATH', '')}"

                personal_result = subprocess.run([
                    sys.executable, "meeting_automation_universal.py", "media", "--account", "personal", "--quality", "medium"
                ], capture_output=True, text=True, timeout=media_timeout, env=env)
            else:
                self.logger.info("üìÅ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                personal_result = subprocess.CompletedProcess(
                    args=[], returncode=0, stdout="", stderr=""
                )
            
            if personal_result.returncode == 0:
                self.logger.info("‚úÖ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                self.logger.info(f"üì§ –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {personal_result.stdout[:500]}...")
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if "üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:" in personal_result.stdout:
                    import re
                    synced_match = re.search(r"üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: (\d+)", personal_result.stdout)
                    processed_match = re.search(r"üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: (\d+)", personal_result.stdout)
                    
                    personal_synced = int(synced_match.group(1)) if synced_match else 0
                    personal_processed = int(processed_match.group(1)) if processed_match else 0
                    
                    total_synced += personal_synced
                    total_processed += personal_processed
                    
                    self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ={personal_synced}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={personal_processed}")
                else:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                    self.logger.info(f"üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤—ã–≤–æ–¥–µ: {personal_result.stdout}")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_result.stderr}")
                self.logger.error(f"üì§ –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {personal_result.stdout}")
                self.logger.error(f"üì§ –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {personal_result.returncode}")
                total_errors += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞
            self.last_media_check = current_time
            
            return {"processed": total_processed, "synced": total_synced, "cleanup": 0, "errors": total_errors}
                
        except subprocess.TimeoutExpired:
            self.logger.error("‚è∞ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã
            self._kill_hanging_ffmpeg_processes()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.last_media_check = current_time
            return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 1}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.last_media_check = current_time
            return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 1}
    
    def send_telegram_notification(self, calendar_stats: Dict[str, Any], media_stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤")
    
    def process_audio_transcription(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
        try:
            self.logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
            
            transcription_stats = {"status": "success", "processed": 0, "errors": 0, "details": []}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self.logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = self._process_folder_transcription(personal_folder, "personal")
                    transcription_stats["details"].append(personal_result)
                    transcription_stats["processed"] += personal_result.get("processed", 0)
                    transcription_stats["errors"] += personal_result.get("errors", 0)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self.logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = self._process_folder_transcription(work_folder, "work")
                    transcription_stats["details"].append(work_result)
                    transcription_stats["processed"] += work_result.get("processed", 0)
                    transcription_stats["errors"] += work_result.get("errors", 0)
            
            self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {transcription_stats['processed']}, –æ—à–∏–±–æ–∫ {transcription_stats['errors']}")
            return transcription_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return {"status": "error", "processed": 0, "errors": 1, "details": [str(e)]}
    
    def _process_folder_transcription(self, folder_path: str, account_type: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
        try:
            result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
            
            # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            mp3_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3'):
                        mp3_files.append(os.path.join(root, file))
            
            if not mp3_files:
                self.logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                return result
            
            self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(mp3_files)} MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            for mp3_file in mp3_files:
                try:
                    self.logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é: {os.path.basename(mp3_file)}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcription_result = subprocess.run([
                        sys.executable, "meeting_automation_universal.py", "transcribe", 
                        "--account", account_type, "--file", mp3_file
                    ], capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ —Ñ–∞–π–ª
                    
                    if transcription_result.returncode == 0:
                        result["processed"] += 1
                        result["files"].append({
                            "file": os.path.basename(mp3_file),
                            "status": "success",
                            "output": transcription_result.stdout
                        })
                        self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {os.path.basename(mp3_file)}")
                    else:
                        result["errors"] += 1
                        result["files"].append({
                            "file": os.path.basename(mp3_file),
                            "status": "error",
                            "error": transcription_result.stderr
                        })
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(mp3_file)}")
                        
                except subprocess.TimeoutExpired:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "timeout",
                        "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    })
                    self.logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {os.path.basename(mp3_file)}")
                except Exception as e:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "error",
                        "error": str(e)
                    })
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {os.path.basename(mp3_file)}: {e}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}
    
    def sync_with_notion(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion."""
        try:
            self.logger.info("üìù –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion...")
            
            notion_stats = {"status": "success", "synced": 0, "errors": 0, "details": []}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
            if not self.config_manager:
                return {"status": "error", "synced": 0, "errors": 1, "details": ["ConfigManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"]}
            
            notion_config = self.config_manager.get_notion_config()
            if not notion_config.get('token'):
                return {"status": "error", "synced": 0, "errors": 1, "details": ["–¢–æ–∫–µ–Ω Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"]}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            try:
                sync_result = subprocess.run([
                    sys.executable, "meeting_automation_universal.py", "notion", "--account", "both"
                ], capture_output=True, text=True, timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                
                if sync_result.returncode == 0:
                    notion_stats["synced"] = 1
                    notion_stats["details"].append("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    self.logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    notion_stats["errors"] = 1
                    notion_stats["details"].append(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_result.stderr}")
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {sync_result.stderr}")
                    
            except subprocess.TimeoutExpired:
                notion_stats["errors"] = 1
                notion_stats["details"].append("–¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion")
                self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion")
            except Exception as e:
                notion_stats["errors"] = 1
                notion_stats["details"].append(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
            
            return notion_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
            return {"status": "error", "synced": 0, "errors": 1, "details": [str(e)]}
    
    def send_telegram_notifications(self, current_state: Dict[str, Any], previous_state: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not self._has_significant_changes(current_state, previous_state):
                self.logger.info("üì± –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return {"status": "skipped", "sent": 0, "errors": 0, "details": ["–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]}
            
            self.logger.info("üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...")
            
            telegram_stats = {"status": "success", "sent": 0, "errors": 0, "details": []}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            if not self.config_manager:
                return {"status": "error", "sent": 0, "errors": 1, "details": ["ConfigManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"]}
            
            telegram_config = self.config_manager.get_telegram_config()
            if not telegram_config.get('bot_token') or not telegram_config.get('chat_id'):
                return {"status": "error", "sent": 0, "errors": 1, "details": ["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ–ø–æ–ª–Ω—ã–µ"]}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            try:
                detailed_message = self._format_detailed_report(current_state, previous_state)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Python requests
                try:
                    import requests
                    
                    message_data = {
                        "chat_id": telegram_config['chat_id'],
                        "text": detailed_message,
                        "parse_mode": "HTML"
                    }
                    
                    response = requests.post(
                        f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage",
                        json=message_data,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        telegram_stats["sent"] = 1
                        telegram_stats["details"].append("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        telegram_stats["errors"] = 1
                        telegram_stats["errors"] = 1
                        telegram_stats["details"].append(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: HTTP {response.status_code}")
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: HTTP {response.status_code}")
                        
                except ImportError:
                    # Fallback –∫ curl –µ—Å–ª–∏ requests –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    import subprocess
                    import json
                    
                    message_data = {
                        "chat_id": telegram_config['chat_id'],
                        "text": detailed_message,
                        "parse_mode": "HTML"
                    }
                    
                    curl_result = subprocess.run([
                        "curl", "-s", "-X", "POST",
                        f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage",
                        "-H", "Content-Type: application/json",
                        "-d", json.dumps(message_data)
                    ], capture_output=True, text=True, timeout=30)
                    
                    if curl_result.returncode == 0:
                        telegram_stats["sent"] = 1
                        telegram_stats["details"].append("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        self.logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    else:
                        telegram_stats["errors"] = 1
                        telegram_stats["details"].append(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {curl_result.stderr}")
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {curl_result.stderr}")
                    
            except subprocess.TimeoutExpired:
                telegram_stats["errors"] = 1
                telegram_stats["details"].append("–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
                self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            except Exception as e:
                telegram_stats["errors"] = 1
                telegram_stats["details"].append(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            
            return telegram_stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return {"status": "error", "sent": 0, "errors": 1, "details": [str(e)]}
    
    def _format_status_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è Telegram."""
        try:
            message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if self.config_manager:
                if self.config_manager.is_personal_enabled():
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üë§ <b>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                
                if self.config_manager.is_work_enabled():
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                else:
                    message += "üè¢ <b>–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
            
            message += "\nüéØ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ</b>"
            
            return message
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    def create_status_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
        try:
            self.logger.info("üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager and self.config_manager.is_personal_enabled():
                personal_config = self.config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    self._create_folder_status_file(personal_folder, "personal")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if self.config_manager and self.config_manager.is_work_enabled():
                work_config = self.config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    self._create_folder_status_file(work_folder, "work")
            
            self.logger.info("‚úÖ –§–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _create_folder_status_file(self, folder_path: str, account_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
        try:
            status_file_path = os.path.join(folder_path, "üìä –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò.txt")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
            status_info = self._analyze_folder_status(folder_path, account_type)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞
            with open(status_file_path, 'w', encoding='utf-8') as f:
                f.write(status_info)
            
            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º (—É–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã)
            try:
                import subprocess
                subprocess.run(['chflags', 'nohidden', status_file_path], check=False)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ chflags –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            self.logger.info(f"‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω: {status_file_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {folder_path}: {e}")
    
    def _analyze_folder_status(self, folder_path: str, account_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
        try:
            from datetime import datetime
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            status_report = f"""üìä –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ü–ö–ò
{'='*50}
üìÅ –ü–∞–ø–∫–∞: {folder_path}
üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_type}
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}
{'='*50}

üé¨ –í–ò–î–ï–û –§–ê–ô–õ–´:
"""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
            video_files = []
            compressed_videos = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.mov', '.mp4', '.avi', '.mkv')):
                        file_path = os.path.join(root, file)
                        if 'compressed' in file.lower():
                            compressed_videos.append(file)
                        else:
                            video_files.append(file)
            
            if video_files:
                status_report += f"üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: {len(video_files)}\n"
                for video in video_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    status_report += f"   ‚Ä¢ {video}\n"
                if len(video_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(video_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            if compressed_videos:
                status_report += f"üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: {len(compressed_videos)}\n"
                for video in compressed_videos[:3]:
                    status_report += f"   ‚Ä¢ {video}\n"
            else:
                status_report += "üé• –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
            status_report += "\nüéµ –ê–£–î–ò–û –§–ê–ô–õ–´:\n"
            audio_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith('.mp3'):
                        audio_files.append(file)
            
            if audio_files:
                status_report += f"üé§ MP3 —Ñ–∞–π–ª—ã: {len(audio_files)}\n"
                for audio in audio_files[:5]:
                    status_report += f"   ‚Ä¢ {audio}\n"
                if len(audio_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(audio_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üé§ MP3 —Ñ–∞–π–ª—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            status_report += "\nüìù –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò:\n"
            transcription_files = []
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if file.lower().endswith(('.txt', '.md', '.csv')):
                        transcription_files.append(file)
            
            if transcription_files:
                status_report += f"üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(transcription_files)}\n"
                for trans in transcription_files[:5]:
                    status_report += f"   ‚Ä¢ {trans}\n"
                if len(transcription_files) > 5:
                    status_report += f"   ... –∏ –µ—â–µ {len(transcription_files) - 5} —Ñ–∞–π–ª–æ–≤\n"
            else:
                status_report += "üìÑ –§–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            status_report += f"""

{'='*50}
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∂–∞—Ç—ã—Ö –≤–µ—Ä—Å–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å MP3 —Ñ–∞–π–ª—ã –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π - –æ–Ω–∏ –±—É–¥—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram
üìù –ó–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Notion
{'='*50}

ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π meeting_automation
üìÖ {current_time}
"""
            
            return status_report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏: {str(e)}"
    
    def run_service_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.previous_cycle_state = self._load_previous_state()
            
            personal_stats = {"status": "skipped", "output": ""}
            work_stats = {"status": "skipped", "output": ""}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager and self.config_manager.is_personal_enabled():
                self.logger.info("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç...")
                personal_stats = self.run_personal_automation()
            else:
                self.logger.info("‚è≠Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.config_manager and self.config_manager.is_work_enabled():
                self.logger.info("üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç...")
                work_stats = self.run_work_automation()
            else:
                self.logger.info("‚è≠Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏)
            media_stats = self.process_media_files()
            
            # üé§ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –ê–£–î–ò–û (–∫–∞–∂–¥—ã–π —Ü–∏–∫–ª)
            self.logger.info("üé§ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
            transcription_stats = self.process_audio_transcription()
            
            # üìù –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° NOTION (–∫–∞–∂–¥—ã–π —Ü–∏–∫–ª)
            self.logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
            notion_stats = self.sync_with_notion()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞
            self.current_cycle_state = self._create_cycle_state(
                personal_stats, work_stats, media_stats, transcription_stats, notion_stats
            )
            
            # üì± –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
            self.logger.info("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram...")
            telegram_stats = self.send_telegram_notifications(
                self.current_cycle_state, self.previous_cycle_state
            )
            
            # üìÅ –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í –°–¢–ê–¢–£–°–ê (–∫–∞–∂–¥—ã–π —Ü–∏–∫–ª)
            self.logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–∞...")
            self.create_status_files()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            self._save_current_state(self.current_cycle_state)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ü–∏–∫–ª–∞:")
            self.logger.info(f"   üë§ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {personal_stats['status']}")
            self.logger.info(f"   üè¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {work_stats['status']}")
            self.logger.info(f"   üé¨ –ú–µ–¥–∏–∞: {media_stats}")
            self.logger.info(f"   üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription_stats}")
            self.logger.info(f"   üìù Notion: {notion_stats}")
            self.logger.info(f"   üì± Telegram: {telegram_stats}")
            
            self.logger.info("‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
    
    def service_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üë∑ –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                self.run_service_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            self.logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.load_environment():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self.service_worker, daemon=True)
        self.thread.start()
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å...")
        self.running = False
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=10)
            if self.thread.is_alive():
                self.logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        self.logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("--config", default=".env", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--interval", type=int, default=300, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--media-interval", type=int, default=1800, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = MeetingAutomationService(args.config)
    service.check_interval = args.interval
    service.media_check_interval = args.media_interval
    
    try:
        service.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
