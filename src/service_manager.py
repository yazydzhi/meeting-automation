#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import sys
import time
import signal
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from meeting_automation_personal_only import load_env_or_fail, get_google_services
    from src.media_processor import get_media_processor
    from src.drive_sync import get_drive_sync
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class MeetingAutomationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á."""
    
    def __init__(self, config_path: str = ".env"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.config_path = config_path
        self.env = {}
        self.running = False
        self.thread = None
        self.logger = self._setup_logging()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        self.media_check_interval = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –º–µ–¥–∏–∞
        self.last_media_check = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PATH –¥–ª—è ffmpeg
        self._setup_ffmpeg_path()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_ffmpeg_path(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH –¥–ª—è ffmpeg."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ ffmpeg –≤ —Ç–µ–∫—É—â–µ–º PATH
            import subprocess
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                self.logger.info("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
        except Exception:
            pass
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ffmpeg –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        ffmpeg_paths = [
            "/opt/homebrew/bin/ffmpeg",  # macOS Homebrew
            "/usr/local/bin/ffmpeg",     # macOS/Linux
            "/usr/bin/ffmpeg",           # Linux
            "/opt/homebrew/bin/ffmpeg",  # Apple Silicon Homebrew
        ]
        
        for path in ffmpeg_paths:
            if os.path.exists(path):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ PATH
                current_path = os.environ.get('PATH', '')
                if path not in current_path:
                    os.environ['PATH'] = f"{path}:{current_path}"
                    self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ ffmpeg: {path}")
                return
        
        self.logger.warning("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger("meeting_automation_service")
        logger.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        file_handler = logging.FileHandler(
            log_dir / f"service_{datetime.now().strftime('%Y%m%d')}.log"
        )
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return logger
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        self.stop()
    
    def load_environment(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        try:
            self.env = load_env_or_fail()
            self.logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False
    
    def check_google_services(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google —Å–µ—Ä–≤–∏—Å–æ–≤."""
        try:
            cal_svc, drive_svc = get_google_services(self.env)
            self.env["drive_svc"] = drive_svc
            self.env["cal_svc"] = cal_svc  # –°–æ—Ö—Ä–∞–Ω—è–µ–º cal_svc –≤ env
            self.logger.info("‚úÖ Google —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def process_calendar_events(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            from meeting_automation_personal_only import (
                get_upcoming_events, should_process_event, process_event
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
            cal_id = self.env["PERSONAL_CALENDAR_ID"]
            cal_svc = self.env.get("cal_svc")
            
            if not cal_svc:
                self.logger.warning("‚ö†Ô∏è Google Calendar —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {"processed": 0, "excluded": 0, "errors": 0, "details": []}
            
            events = get_upcoming_events(cal_id, cal_svc, 24, self.env["TIMEZONE"])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            filtered_events = []
            excluded_events = []
            
            for ev in events:
                title = ev.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                if should_process_event(title):
                    filtered_events.append(ev)
                else:
                    excluded_events.append(title)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            processed_count = 0
            processed_details = []
            for ev in filtered_events:
                try:
                    result = process_event(self.env, ev)
                    processed_count += 1
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    event_title = ev.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    event_time = ev.get("start", {}).get("dateTime", "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                    
                    detail = {
                        "title": event_title,
                        "time": event_time,
                        "result": result
                    }
                    processed_details.append(detail)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {ev.get('summary')}: {e}")
            
            result = {
                "total": len(events),
                "processed": processed_count,
                "excluded": len(excluded_events),
                "errors": 0,
                "details": processed_details
            }
            
            if processed_count > 0:
                self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –≤—Å—Ç—Ä–µ—á")
            else:
                self.logger.info("üìÖ –ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return {"processed": 0, "excluded": 0, "errors": 1, "details": []}
    
    def process_media_files(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
        try:
            if not get_media_processor or not get_drive_sync:
                self.logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0, "details": []}
            
            drive_svc = self.env.get("drive_svc")
            if not drive_svc:
                self.logger.warning("‚ö†Ô∏è Google Drive —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0, "details": []}
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            drive_sync = get_drive_sync(drive_svc, self.env["MEDIA_SYNC_ROOT"])
            media_processor = get_media_processor(
                drive_svc, 
                self.env["MEDIA_OUTPUT_FORMAT"],
                video_compression=self.env.get("VIDEO_COMPRESSION", "true").lower() == "true",
                video_quality=self.env.get("VIDEO_QUALITY", "medium"),
                video_codec=self.env.get("VIDEO_CODEC", "h264")
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            parent_id = self.env.get("PERSONAL_DRIVE_PARENT_ID")
            if not parent_id:
                self.logger.warning("‚ö†Ô∏è PERSONAL_DRIVE_PARENT_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
                return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0, "details": []}
            
            # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            query = f"'{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
            folders_result = drive_svc.files().list(
                q=query,
                fields="files(id,name,createdTime)",
                orderBy="createdTime desc"
            ).execute()
            
            folders = folders_result.get("files", [])
            total_processed = 0
            total_synced = 0
            total_errors = 0
            media_details = []
            
            for folder in folders[:5]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∞–ø–æ–∫
                folder_id = folder['id']
                folder_name = folder['name']
                
                try:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                    sync_results = drive_sync.sync_folder(
                        folder_id, 
                        folder_name,
                        file_types=['video/*']
                    )
                    
                    total_synced += sync_results['files_synced']
                    
                    if sync_results['files_synced'] > 0:
                        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                        local_path = drive_sync.get_local_path(folder_name)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                        media_results = media_processor.process_folder(
                            folder_id, 
                            folder_name, 
                            local_path
                        )
                        
                        total_processed += media_results['files_processed']
                        total_errors += len(media_results['errors'])
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if media_results['files_processed'] > 0:
                            media_details.append({
                                "folder": folder_name,
                                "files_processed": media_results['files_processed'],
                                "files_found": media_results['files_found'],
                                "processing_time": media_results['processing_time']
                            })
                        
                        self.logger.info(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–∞–ø–∫–∞ {folder_name}: {media_results['files_processed']} —Ñ–∞–π–ª–æ–≤")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}")
                    total_errors += 1
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            cleanup_count = drive_sync.cleanup_old_files(self.env["MEDIA_CLEANUP_DAYS"])
            if cleanup_count > 0:
                self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleanup_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
            result = {
                "processed": total_processed,
                "synced": total_synced,
                "cleanup": cleanup_count,
                "errors": total_errors,
                "details": media_details
            }
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {"processed": 0, "synced": 0, "cleanup": 0, "errors": 1, "details": []}
    
    def send_telegram_notification(self, calendar_stats: Dict[str, Any], media_stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
        try:
            from meeting_automation_personal_only import notify
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = "ü§ñ *–û–¢–ß–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –í–°–¢–†–ï–ß*\n"
            report += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            if calendar_stats["processed"] > 0:
                report += f"üìÖ *–ö–ê–õ–ï–ù–î–ê–†–¨:*\n"
                report += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å—Ç—Ä–µ—á: {calendar_stats['processed']}\n"
                if calendar_stats['excluded'] > 0:
                    report += f"‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ: {calendar_stats['excluded']}\n"
                report += "\n"
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –≤—Å—Ç—Ä–µ—á–µ
                if calendar_stats.get('details'):
                    report += "*–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:*\n"
                    for detail in calendar_stats['details']:
                        title = detail.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        time_str = detail.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                        try:
                            if 'T' in str(time_str):
                                # ISO —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                                dt = datetime.fromisoformat(str(time_str).replace('Z', '+00:00'))
                                time_formatted = dt.strftime('%H:%M')
                            else:
                                time_formatted = str(time_str)
                        except:
                            time_formatted = str(time_str)
                        
                        report += f"  üïê {time_formatted} | {title}\n"
                    report += "\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞
            if (media_stats["processed"] > 0 or media_stats["synced"] > 0 or 
                media_stats["cleanup"] > 0):
                report += f"üé¨ *–ú–ï–î–ò–ê –û–ë–†–ê–ë–û–¢–ö–ê:*\n"
                if media_stats["processed"] > 0:
                    report += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {media_stats['processed']}\n"
                if media_stats["synced"] > 0:
                    report += f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {media_stats['synced']}\n"
                if media_stats["cleanup"] > 0:
                    report += f"‚Ä¢ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {media_stats['cleanup']}\n"
                report += "\n"
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if media_stats.get('details'):
                    report += "*–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:*\n"
                    for detail in media_stats['details']:
                        folder = detail.get('folder', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞–ø–∫–∞')
                        processed = detail.get('files_processed', 0)
                        found = detail.get('files_found', 0)
                        time_sec = detail.get('processing_time', 0)
                        
                        report += f"  üìÅ {folder}\n"
                        report += f"    üé• –ù–∞–π–¥–µ–Ω–æ: {found} | ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}\n"
                        if time_sec > 0:
                            report += f"    ‚è±Ô∏è –í—Ä–µ–º—è: {time_sec:.1f} —Å–µ–∫\n"
                    report += "\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            has_changes = (
                calendar_stats["processed"] > 0 or 
                media_stats["processed"] > 0 or 
                media_stats["synced"] > 0 or 
                media_stats["cleanup"] > 0
            )
            
            if has_changes:
                notify(self.env, report)
                self.logger.info("üì± –î–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                self.logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def run_service_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google —Å–µ—Ä–≤–∏—Å—ã
            if not self.check_google_services():
                self.logger.error("‚ùå Google —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ü–∏–∫–ª")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_stats = self.process_calendar_events()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (—Ä–µ–∂–µ)
            media_stats = {"processed": 0, "synced": 0, "cleanup": 0, "errors": 0}
            if (self.last_media_check is None or 
                time.time() - self.last_media_check > self.media_check_interval):
                
                media_stats = self.process_media_files()
                self.last_media_check = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.send_telegram_notification(calendar_stats, media_stats)
            
            self.logger.info("‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
    
    def service_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger.info("üë∑ –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                self.run_service_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            self.logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.load_environment():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self.service_worker, daemon=True)
        self.thread.start()
        
        self.logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"üé¨ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞: {self.media_check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        finally:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å...")
        self.running = False
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=10)
            if self.thread.is_alive():
                self.logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        self.logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("--config", default=".env", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--interval", type=int, default=300, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--media-interval", type=int, default=1800, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = MeetingAutomationService(args.config)
    service.check_interval = args.interval
    service.media_check_interval = args.media_interval
    
    try:
        service.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
