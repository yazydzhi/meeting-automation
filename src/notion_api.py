"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion API
"""

import os
import requests
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class NotionAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion API"""
    
    def __init__(self, token: str, database_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        
        Args:
            token: –¢–æ–∫–µ–Ω Notion API
            database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.token = token
        self.database_id = database_id
        self.base_url = "https://api.notion.com/v1"
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
    
    def search_page_by_title(self, title: str) -> Optional[Dict[str, Any]]:
        """
        –ò—â–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None
        """
        try:
            logger.info(f"üîç –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {title}")
            
            query = {
                "filter": {
                    "property": "Name",
                    "title": {
                        "contains": title
                    }
                }
            }
            
            response = requests.post(
                f'{self.base_url}/databases/{self.database_id}/query',
                headers=self.headers,
                json=query
            )
            
            if response.status_code == 200:
                data = response.json()
                results = data.get('results', [])
                
                if results:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(results)}")
                    return results[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
                else:
                    logger.info("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
    
    def add_content_to_page(self, page_id: str, content_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–∏–∑ TranscriptAnalyzer)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏
            existing_blocks = self.get_page_blocks(page_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            new_blocks = self.create_content_blocks(content_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
            if new_blocks:
                response = requests.patch(
                    f'{self.base_url}/blocks/{page_id}/children',
                    headers=self.headers,
                    json={'children': new_blocks}
                )
                
                if response.status_code == 200:
                    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {response.status_code}")
                    logger.error(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                    return False
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return False
    
    def get_page_blocks(self, page_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤
        """
        try:
            response = requests.get(
                f'{self.base_url}/blocks/{page_id}/children',
                headers=self.headers
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('results', [])
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def create_content_blocks(self, content_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            content_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç TranscriptAnalyzer
            
        Returns:
            –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –¥–ª—è Notion
        """
        blocks = []
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            blocks.append({
                "object": "block",
                "type": "divider",
                "divider": {}
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
            blocks.append({
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "ü§ñ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
                            }
                        }
                    ]
                }
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            summary = content_data.get('meeting_summary', {})
            if summary.get('main_topic'):
                blocks.append({
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "icon": {"type": "emoji", "emoji": "üéØ"},
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: {summary['main_topic']}"
                                }
                            }
                        ]
                    }
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            action_items = summary.get('action_items', [])
            if action_items:
                blocks.append({
                    "object": "block",
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üìã –î–µ–π—Å—Ç–≤–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for action in action_items:
                    blocks.append({
                        "object": "block",
                        "type": "to_do",
                        "to_do": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": action
                                    }
                                }
                            ]
                        }
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            topics = content_data.get('topics_discussed', [])
            if topics:
                blocks.append({
                    "object": "block",
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üí¨ –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for topic in topics:
                    blocks.append({
                        "object": "block",
                        "type": "heading_3",
                        "heading_3": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": topic.get('topic', '–¢–µ–º–∞')
                                    }
                                }
                            ]
                        }
                    })
                    
                    if topic.get('description'):
                        blocks.append({
                            "object": "block",
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [
                                    {
                                        "type": "text",
                                        "text": {
                                            "content": topic['description']
                                        }
                                    }
                                ]
                            }
                        })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã
            quotes = content_data.get('key_quotes', [])
            if quotes:
                blocks.append({
                    "object": "block",
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üí¨ –ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã"
                                }
                            }
                        ]
                    }
                })
                
                for quote in quotes:
                    blocks.append({
                        "object": "block",
                        "type": "quote",
                        "quote": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": f"\"{quote.get('quote', '')}\" ‚Äî {quote.get('speaker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                                    }
                                }
                            ]
                        }
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            financial = content_data.get('financial_mentions', [])
            if financial:
                blocks.append({
                    "object": "block",
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                                }
                            }
                        ]
                    }
                })
                
                for item in financial:
                    blocks.append({
                        "object": "block",
                        "type": "bulleted_list_item",
                        "bulleted_list_item": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": f"{item.get('amount', '')} - {item.get('context', '')}"
                                    }
                                }
                            ]
                        }
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
            metadata = content_data.get('analysis_metadata', {})
            if metadata:
                blocks.append({
                    "object": "block",
                    "type": "divider",
                    "divider": {}
                })
                
                blocks.append({
                    "object": "block",
                    "type": "callout",
                    "callout": {
                        "icon": {"type": "emoji", "emoji": "ü§ñ"},
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": f"–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {metadata.get('analyzed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | –ú–æ–¥–µ–ª—å: {metadata.get('model_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                                }
                            }
                        ]
                    }
                })
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return blocks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def update_page_properties(self, page_id: str, properties: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            properties: –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
            
            response = requests.patch(
                f'{self.base_url}/pages/{page_id}',
                headers=self.headers,
                json={'properties': properties}
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤: {e}")
            return False
