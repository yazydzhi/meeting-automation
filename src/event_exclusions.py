#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
"""

import re
import os
from typing import List, Dict, Set, Optional
from dataclasses import dataclass
from enum import Enum


class ExclusionType(Enum):
    """–¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    KEYWORD = "keyword"
    REGEX = "regex"


@dataclass
class EventExclusion:
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    exclusion_type: ExclusionType
    value: str
    compiled_regex: Optional[re.Pattern] = None
    
    def __post_init__(self):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞."""
        if self.exclusion_type == ExclusionType.REGEX:
            try:
                self.compiled_regex = re.compile(self.value, re.IGNORECASE)
            except re.error as e:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ '{self.value}': {e}")


class EventExclusionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    
    def __init__(self, config_manager=None, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger: –õ–æ–≥–≥–µ—Ä
        """
        self.config_manager = config_manager
        self.logger = logger
        self.exclusions: List[EventExclusion] = []
        self._load_exclusions()
    
    def _load_exclusions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            # –ï—Å–ª–∏ config_manager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.config_manager:
                if self.logger:
                    self.logger.info("üìù ConfigManager –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞—é –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            exclusions_str = os.getenv('EVENT_EXCLUSIONS', '')
            if not exclusions_str:
                if self.logger:
                    self.logger.info("üìù EVENT_EXCLUSIONS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return
            
            # –ü–∞—Ä—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            exclusions_list = [exclusion.strip() for exclusion in exclusions_str.split(',') if exclusion.strip()]
            
            for exclusion_str in exclusions_list:
                try:
                    exclusion = self._parse_exclusion(exclusion_str)
                    if exclusion:
                        self.exclusions.append(exclusion)
                except Exception as e:
                    if self.logger:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è '{exclusion_str}': {e}")
                    continue
            
            if self.logger:
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å–æ–±—ã—Ç–∏–π")
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    def _parse_exclusion(self, exclusion_str: str) -> Optional[EventExclusion]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
        
        Args:
            exclusion_str: –°—Ç—Ä–æ–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ "regex:pattern")
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ None
        """
        exclusion_str = exclusion_str.strip()
        if not exclusion_str:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
        if exclusion_str.startswith('regex:'):
            pattern = exclusion_str[6:]  # –£–±–∏—Ä–∞–µ–º "regex:"
            if not pattern:
                raise ValueError("–ü—É—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
            
            return EventExclusion(
                exclusion_type=ExclusionType.REGEX,
                value=pattern
            )
        else:
            # –û–±—ã—á–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            return EventExclusion(
                exclusion_type=ExclusionType.KEYWORD,
                value=exclusion_str
            )
    
    def should_exclude_event(self, event_title: str, account_type: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–æ.
        
        Args:
            event_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            account_type: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–æ
        """
        if not event_title or not self.exclusions:
            return False
        
        for exclusion in self.exclusions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            if exclusion.exclusion_type == ExclusionType.KEYWORD:
                if exclusion.value.lower() in event_title.lower():
                    if self.logger:
                        self.logger.info(f"üö´ –°–æ–±—ã—Ç–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{event_title}' —Å–æ–¥–µ—Ä–∂–∏—Ç '{exclusion.value}'")
                    return True
            
            elif exclusion.exclusion_type == ExclusionType.REGEX:
                if exclusion.compiled_regex and exclusion.compiled_regex.search(event_title):
                    if self.logger:
                        self.logger.info(f"üö´ –°–æ–±—ã—Ç–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é: '{event_title}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{exclusion.value}'")
                    return True
        
        return False
    
    def get_all_exclusions(self) -> List[EventExclusion]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        """
        return self.exclusions.copy()
    
    def get_exclusion_stats(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        stats = {
            'total': len(self.exclusions),
            'keywords': 0,
            'regex': 0
        }
        
        for exclusion in self.exclusions:
            if exclusion.exclusion_type == ExclusionType.KEYWORD:
                stats['keywords'] += 1
            elif exclusion.exclusion_type == ExclusionType.REGEX:
                stats['regex'] += 1
        
        return stats
    
    def add_exclusion(self, exclusion_type: ExclusionType, value: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        
        Args:
            exclusion_type: –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            exclusion = EventExclusion(
                exclusion_type=exclusion_type,
                value=value
            )
            self.exclusions.append(exclusion)
            
            if self.logger:
                self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exclusion_type.value}:{value}")
            
            return True
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def remove_exclusion(self, exclusion_type: ExclusionType, value: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        
        Args:
            exclusion_type: –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        """
        for i, exclusion in enumerate(self.exclusions):
            if (exclusion.exclusion_type == exclusion_type and 
                exclusion.value == value):
                
                del self.exclusions[i]
                
                if self.logger:
                    self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exclusion_type.value}:{value}")
                
                return True
        
        return False
    
    def reload_exclusions(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.exclusions.clear()
        self._load_exclusions()
        
        if self.logger:
            self.logger.info("üîÑ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        if not self.exclusions:
            return "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        lines = ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:"]
        for exclusion in self.exclusions:
            if exclusion.exclusion_type == ExclusionType.REGEX:
                lines.append(f"  regex:{exclusion.value}")
            else:
                lines.append(f"  {exclusion.value}")
        
        return "\n".join(lines)
