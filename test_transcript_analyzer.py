#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TranscriptAnalyzer
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from transcript_analyzer import TranscriptAnalyzer
from config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_transcript_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É TranscriptAnalyzer"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é TranscriptAnalyzer...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = ConfigManager('env.work')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
    openai_config = config_manager.config.get('openai', {})
    api_key = openai_config.get('api_key')
    model = openai_config.get('analysis_model', 'gpt-4o-mini')
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    print(f"üîë OpenAI API –∫–ª—é—á: {api_key[:20]}...")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = TranscriptAnalyzer(api_key, model)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    test_transcript = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É "–ê–ª—å—Ñ–∞ –Ω–µ–∏–ø–æ—Ç–µ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–∏—á–∫–∞".
    
    –î–µ–Ω–∏—Å –ö—É–∑–Ω–µ—Ü–æ–≤: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–æ–ª–ª–µ–≥–∏. –°–µ–≥–æ–¥–Ω—è –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª.
    
    –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞: –°–æ–≥–ª–∞—Å–Ω–∞, –Ω–∞–º –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–∏–Ω–∏–º—É–º –Ω–∞ 20%.
    
    –î–µ–Ω–∏—Å –ö—É–∑–Ω–µ—Ü–æ–≤: –•–æ—Ä–æ—à–æ, —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –°—Ä–æ–∫ - –¥–æ –ø—è—Ç–Ω–∏—Ü—ã.
    
    –ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤: –ê —á—Ç–æ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏? –ù—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–Ω–∫–∞–º–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞.
    
    –î–µ–Ω–∏—Å –ö—É–∑–Ω–µ—Ü–æ–≤: –í–µ—Ä–Ω–æ, —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ü–µ—Ç—Ä, –≤–æ–∑—å–º–∏ –Ω–∞ —Å–µ–±—è –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.
    
    –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞: –ê –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É? –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∏–µ?
    
    –î–µ–Ω–∏—Å –ö—É–∑–Ω–µ—Ü–æ–≤: –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
    
    –ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤: –û—Ç–ª–∏—á–Ω–æ. –¢–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.
    
    –î–µ–Ω–∏—Å –ö—É–∑–Ω–µ—Ü–æ–≤: –ò—Ç–∞–∫, —Ä–µ–∑—é–º–∏—Ä—É–µ–º: –ü–µ—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å, —è –≥–æ—Ç–æ–≤–ª—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –ú–∞—Ä–∏—è –∂–¥–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É.
    """
    
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ({len(test_transcript)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print("-" * 50)
    print(test_transcript[:200] + "..." if len(test_transcript) > 200 else test_transcript)
    print("-" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
    
    try:
        analysis_result = analyzer.analyze_meeting_transcript(
            test_transcript,
            "–ê–ª—å—Ñ–∞ –Ω–µ–∏–ø–æ—Ç–µ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–∏—á–∫–∞ - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "2025-01-27"
        )
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        output_file = "test_analysis_result.json"
        if analyzer.save_analysis_to_file(analysis_result, output_file):
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
        print("\nüìù –°–æ–∑–¥–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion...")
        notion_data = analyzer.create_notion_page_data(analysis_result)
        
        if notion_data:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
            notion_file = "test_notion_page_data.json"
            with open(notion_file, 'w', encoding='utf-8') as f:
                import json
                json.dump(notion_data, f, ensure_ascii=False, indent=2)
            print(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {notion_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ö—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        summary = analysis_result.get('meeting_summary', {})
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {summary.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: {summary.get('main_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è: {len(summary.get('key_decisions', []))}")
        print(f"   –î–µ–π—Å—Ç–≤–∏—è: {len(summary.get('action_items', []))}")
        print(f"   –¢–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {len(analysis_result.get('topics_discussed', []))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TranscriptAnalyzer")
    print("=" * 50)
    
    success = test_transcript_analyzer()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
