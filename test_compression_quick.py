#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –≤–∏–¥–µ–æ (–Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ)
"""

import os
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from media_processor import MediaProcessor
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def create_test_video():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª."""
    
    output_path = "test_video_short.mp4"
    
    if os.path.exists(output_path):
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_path}")
        return output_path
    
    print("üé¨ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª...")
    
    # –°–æ–∑–¥–∞–µ–º 10-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    cmd = [
        'ffmpeg', '-f', 'lavfi', '-i', 'testsrc=duration=10:size=640x480:rate=30',
        '-f', 'lavfi', '-i', 'sine=frequency=1000:duration=10',
        '-c:v', 'libx264', '-preset', 'ultrafast', '-crf', '23',
        '-c:a', 'aac', '-b:a', '128k',
        '-y', output_path
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
            return output_path
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {result.stderr}")
            return None
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_compression_quick():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ."""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
    test_video = create_test_video()
    if not test_video:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    if os.path.exists(test_video):
        size = os.path.getsize(test_video)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {size / 1024 / 1024:.1f} MB")
    
    print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é: {os.path.basename(test_video)}")
    
    # –°–æ–∑–¥–∞–µ–º MediaProcessor
    processor = MediaProcessor(
        drive_service=None,
        output_format='mp3',
        video_compression=True,
        video_quality='medium',
        video_codec='h264'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg
    if not processor.ffmpeg_available:
        print("‚ùå ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
    test_configs = [
        ("H.264 Fast", "low", "h264"),
        ("H.264 Medium", "medium", "h264"),
    ]
    
    for config_name, quality, codec in test_configs:
        print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config_name}")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {quality}, –ö–æ–¥–µ–∫: {codec}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_path = f"test_video_compressed_{codec}_{quality}.mp4"
        
        print(f"   –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(test_video)}")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        input_size = os.path.getsize(test_video)
        print(f"   –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {processor._format_size(input_size)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        start_time = os.times().elapsed
        if processor.compress_video(test_video, output_path, quality, codec):
            end_time = os.times().elapsed
            processing_time = end_time - start_time
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(output_path):
                output_size = os.path.getsize(output_path)
                compression_ratio = (1 - output_size / input_size) * 100
                
                print(f"   ‚úÖ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {processor._format_size(input_size)} ‚Üí {processor._format_size(output_size)}")
                print(f"   üìâ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1f}%")
                print(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {processor._format_size(input_size - output_size)}")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫")
            else:
                print(f"   ‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"   ‚ùå –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        print("-" * 50)
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for file in [test_video, "test_video_compressed_h264_low.mp4", "test_video_compressed_h264_medium.mp4"]:
        if os.path.exists(file):
            os.remove(file)
            print(f"   –£–¥–∞–ª–µ–Ω: {file}")

if __name__ == "__main__":
    test_compression_quick()
