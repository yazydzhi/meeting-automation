#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
init_project.py
---------------
–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫, –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–π git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub,
—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç venv –∏ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç (–≤–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö/—Å–∫—Ä–∏–ø—Ç).

–ü—Ä–∏–º–µ—Ä:
  python init_project.py --name meeting-automation \
    --description "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á" \
    --data-file meeting_automation.py
"""

import os
import sys
import subprocess
import shutil
import argparse
from pathlib import Path

# ---------------------------
# Bootstrap ensure `requests`
# ---------------------------

def in_venv() -> bool:
    return (
        hasattr(sys, "real_prefix") or
        (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix) or
        ("VIRTUAL_ENV" in os.environ)
    )

def ensure_requests():
    try:
        import requests  # noqa: F401
        return
    except Exception:
        pass

    if in_venv():
        # –£–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º venv ‚Äî –ø—Ä–æ—Å–∏–º —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        print(
            "‚úñ –ú–æ–¥—É–ª—å 'requests' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.\n"
            "  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫:\n"
            "    pip install requests\n",
            file=sys.stderr,
        )
        sys.exit(1)

    # –ù–µ –≤ venv: –±—É—Ç—Å—Ç—Ä–∞–ø–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑ –Ω–µ–≥–æ
    if os.environ.get("BOOTSTRAPPED_REQUESTS") == "1":
        print(
            "‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å 'requests' –ø–æ—Å–ª–µ –±—É—Ç—Å—Ç—Ä–∞–ø–∞.\n"
            "  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏.",
            file=sys.stderr,
        )
        sys.exit(1)

    venv_dir = Path(".venv-init")
    py = sys.executable

    print("‚öôÔ∏è  –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ .venv-init –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ 'requests'...")
    if venv_dir.exists():
        shutil.rmtree(venv_dir)
    subprocess.check_call([py, "-m", "venv", str(venv_dir)])

    bin_dir = "Scripts" if os.name == "nt" else "bin"
    pip_path = venv_dir / bin_dir / ("pip.exe" if os.name == "nt" else "pip")
    py_path = venv_dir / bin_dir / ("python.exe" if os.name == "nt" else "python")

    subprocess.check_call([str(pip_path), "install", "--upgrade", "pip"])
    subprocess.check_call([str(pip_path), "install", "requests"])

    print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç —Å .venv-init ...")
    env = os.environ.copy()
    env["BOOTSTRAPPED_REQUESTS"] = "1"
    os.execve(str(py_path), [str(py_path), *sys.argv], env)

ensure_requests()
import requests  # noqa: E402

# ---------------------------
# CLI
# ---------------------------

def parse_args():
    p = argparse.ArgumentParser(description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    p.add_argument("--name", required=True, help="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ / —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    p.add_argument("--description", default="", help="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    p.add_argument("--private", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
    p.add_argument("--data-file", default=None, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (—Å–∫—Ä–∏–ø—Ç/–¥–∞–Ω–Ω—ã–µ) –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞")
    p.add_argument("--no-remote", action="store_true", help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)")
    return p.parse_args()

# ---------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------

def run(cmd, cwd=None, check=True):
    print(f"‚ñ∂ {cmd if isinstance(cmd, str) else ' '.join(cmd)}")
    return subprocess.run(cmd, cwd=cwd, shell=isinstance(cmd, str), check=check)

def git(*args, cwd=None):
    run(["git", *args], cwd=cwd)

def write_text(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")

# ---------------------------
# –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤
# ---------------------------

GITIGNORE = """\
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
*.sqlite3

# Envs
venv/
.env
.venv
.venv-init/

# Editors
.vscode/
.idea/

# OS
.DS_Store

# Data
data/raw/*
!data/.gitkeep
"""


README_TMPL = """# {name}
{description}
## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
```bash
python3 -m venv venv
source venv/bin/activate  # Windows: venv\\Scripts\\activate.bat
pip install -r requirements.txt
```
"""

REQUIREMENTS = """
requests
"""

 #‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def create_structure(project: Path, name: str, description: str, data_file: str | None):

    (project / "src").mkdir(parents=True, exist_ok=True)
    (project / "data" / "raw").mkdir(parents=True, exist_ok=True)
    (project / "data" / ".gitkeep").write_text("", encoding="utf-8")

    write_text(project / ".gitignore", GITIGNORE)
    write_text(project / "README.md", README_TMPL.format(name=name, description=description))
    write_text(project / "requirements.txt", REQUIREMENTS)

    if data_file:
        src = Path(data_file).expanduser().resolve()
        if not src.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {src}", file=sys.stderr)
        else:
            dst = project / src.name
            shutil.copy2(src, dst)
            print(f"üì¶ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {src} ‚Üí {dst}")
def create_project_venv(project: Path):
    print("‚öôÔ∏è  –°–æ–∑–¥–∞—é –ø—Ä–æ–µ–∫—Ç–Ω–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ venv ‚Ä¶")
    run([sys.executable, "-m", "venv", str(project / "venv")])
    print(
        "üí° –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:\n"
        + r"  source venv/bin/activate  # Windows: venv\Scripts\activate.bat"
    )

def init_git_and_first_commit(project: Path):
    git("init", cwd=project)
    git("add", ".", cwd=project)
    git("commit", "-m", "chore: init project skeleton", cwd=project)
    try:
        git("branch", "-M", "main", cwd=project)
    except Exception:
        pass

def create_github_repo_and_push(project: Path, name: str, description: str, private: bool):
    username = os.environ.get("GITHUB_USERNAME")
    token = os.environ.get("GITHUB_TOKEN")
    if not username or not token:
        print(
            "‚úñ –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_USERNAME –∏/–∏–ª–∏ GITHUB_TOKEN.\n"
            "  –ü—Ä–∏–º–µ—Ä:\n"
            "    export GITHUB_USERNAME=yourname\n"
            "    export GITHUB_TOKEN=ghp_xxx_with_repo_scope\n",
            file=sys.stderr,
        )
        sys.exit(1)

    print("‚òÅÔ∏è  –°–æ–∑–¥–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub...")
    resp = requests.post(
        "https://api.github.com/user/repos",
        headers={"Authorization": f"token {token}",
                 "Accept": "application/vnd.github+json"},
        json={"name": name, "description": description, "private": bool(private)},
        timeout=30,
    )
    if resp.status_code not in (201, 202):
        print(f"‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {resp.status_code} {resp.text}", file=sys.stderr)
        sys.exit(1)

    repo = resp.json()
    clone_url = repo.get("clone_url")
    if not clone_url:
        print(f"‚úñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å clone_url: {repo}", file=sys.stderr)
        sys.exit(1)

    git("remote", "add", "origin", clone_url, cwd=project)
    git("push", "-u", "origin", "main", cwd=project)
    print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: https://github.com/{username}/{name}")

def main():
    args = parse_args()
    project = Path.cwd()
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç: {project}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –∫—Ä–æ–º–µ venv –∏ .git
    entries = [p for p in project.iterdir() if p.name not in ("venv", ".git")]
    if entries:
        print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ (–Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ venv –∏ .git).", file=sys.stderr)

    create_structure(project, args.name, args.description, args.data_file)

    init_git_and_first_commit(project)

    if not args.no_remote:
        create_github_repo_and_push(project, args.name, args.description, args.private)
    else:
        print("‚è≠  –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (--no-remote).")


    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: {project}")
    if not args.no_remote:
        print(f"‚Ä¢ GitHub: https://github.com/{os.environ.get('GITHUB_USERNAME','<user>')}/{args.name}")
    print("\n–î–∞–ª—å—à–µ:\n"
          "  1) –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n"
          r"     source venv/bin/activate  # Windows: venv\Scripts\activate.bat" "\n"
          "  2) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n"
          "     pip install -r requirements.txt\n")

if __name__ == "__main__":
    main()
