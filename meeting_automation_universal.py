#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import os
import sys
import argparse
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/universal_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_personal_automation(command: str, additional_args: list = None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        logger.info("üë§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        script_path = "meeting_automation_personal.py"
        if not os.path.exists(script_path):
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [sys.executable, script_path, command]
        if additional_args:
            cmd.extend(additional_args)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        import subprocess
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print("üì§ –í—ã–≤–æ–¥ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                print(result.stdout)
            return True
        else:
            logger.error(f"‚ùå –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            if result.stderr:
                logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False

def run_work_automation(command: str, additional_args: list = None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        logger.info("üè¢ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        script_path = "meeting_automation_work.py"
        if not os.path.exists(script_path):
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [sys.executable, script_path, command]
        if additional_args:
            cmd.extend(additional_args)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        import subprocess
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print("üì§ –í—ã–≤–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                print(result.stdout)
            return True
        else:
            logger.error(f"‚ùå –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            if result.stderr:
                logger.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False

def check_configurations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
    
    configs = {
        'personal': 'env.personal',
        'work': 'env.work'
    }
    
    status = {}
    
    for account, config_file in configs.items():
        if os.path.exists(config_file):
            logger.info(f"‚úÖ {account.capitalize()}: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            status[account] = True
        else:
            logger.warning(f"‚ö†Ô∏è {account.capitalize()}: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ({config_file})")
            status[account] = False
    
    return status

def create_summary_report(personal_success: bool, work_success: bool) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏."""
    report = "üîÑ *–°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò*\n"
    report += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    
    # –°—Ç–∞—Ç—É—Å –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if personal_success:
        report += "üë§ *–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:* ‚úÖ –£—Å–ø–µ—à–Ω–æ\n"
    else:
        report += "üë§ *–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:* ‚ùå –û—à–∏–±–∫–∞\n"
    
    # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if work_success:
        report += "üè¢ *–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:* ‚úÖ –£—Å–ø–µ—à–Ω–æ\n"
    else:
        report += "üè¢ *–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç:* ‚ùå –û—à–∏–±–∫–∞\n"
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if personal_success and work_success:
        report += "\nüéâ *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    elif personal_success or work_success:
        report += "\n‚ö†Ô∏è *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    else:
        report += "\n‚ùå *–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á')
    parser.add_argument('command', choices=['prepare', 'media', 'test'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--personal-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç')
    parser.add_argument('--work-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç')
    parser.add_argument('--skip-config-check', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')
    parser.add_argument('--days', type=int, default=2,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--verbose', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--config-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--calendar-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--drive-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ Google Drive')
    
    args = parser.parse_args()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not args.skip_config_check:
        config_status = check_configurations()
        logger.info(f"üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {config_status}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    run_personal = not args.work_only
    run_work = not args.personal_only
    
    if args.personal_only:
        logger.info("üë§ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    elif args.work_only:
        logger.info("üè¢ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –¥–ª—è –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    additional_args = []
    if args.days != 2:
        additional_args.extend(['--days', str(args.days)])
    if args.verbose:
        additional_args.append('--verbose')
    if args.config_only:
        additional_args.append('--config-only')
    if args.calendar_only:
        additional_args.append('--calendar-only')
    if args.drive_only:
        additional_args.append('--drive-only')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
    personal_success = False
    work_success = False
    
    if run_personal:
        personal_success = run_personal_automation(args.command, additional_args)
    
    if run_work:
        work_success = run_work_automation(args.command, additional_args)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    if run_personal and run_work:
        report = create_summary_report(personal_success, work_success)
        print("\n" + "="*50)
        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢:")
        print("="*50)
        print(report)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if personal_success and work_success:
            logger.info("üéâ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        elif personal_success or work_success:
            logger.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        else:
            logger.error("‚ùå –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    logger.info("üèÅ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
