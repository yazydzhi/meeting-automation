#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: calendar, drive, media, transcribe, notion, all
"""

import os
import sys
import argparse
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
import subprocess
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent / 'src'))

try:
    from config_manager import ConfigManager
    from notion_api import NotionAPI
    from transcript_analyzer import TranscriptAnalyzer
    from telegram_api import TelegramAPI
    # TASK-4: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    from handlers.media_handler import MediaHandler
    from handlers.notion_handler import NotionHandler
    from handlers.account_handler import AccountHandler
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
                    RotatingFileHandler(
            "logs/meeting_automation_universal.log",
            maxBytes=int(os.getenv("LOG_MAX_SIZE_MB", "100")) * 1024 * 1024,
            backupCount=int(os.getenv("LOG_BACKUP_COUNT", "5")),
            encoding="utf-8"
        )
        ]
    )
    return logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        return config_manager
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def process_account(config_manager: ConfigManager, account_type: str, logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–∏—Å–∫)."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
    
    try:
        if account_type == 'personal':
            if config_manager.is_personal_enabled():
                logger.info("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                calendar_provider = get_calendar_provider(
                    config_manager.get_calendar_provider_type('personal'),
                    **config_manager.get_calendar_provider_config('personal')
                )
                
                if not calendar_provider:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                    return {"status": "error", "message": "Failed to get calendar provider"}
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
                drive_provider = get_drive_provider(
                    config_manager.get_drive_provider_type('personal'),
                    **config_manager.get_drive_provider_config('personal')
                )
                
                if not drive_provider:
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                result = process_calendar_events(calendar_provider, drive_provider, account_type, config_manager, logger)
                return result
            else:
                logger.warning("‚ö†Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                return {"status": "skipped", "message": "Personal account disabled"}
        
        elif account_type == 'work':
            if config_manager.is_work_enabled():
                logger.info("üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                calendar_provider = get_calendar_provider(
                    config_manager.get_calendar_provider_type('work'),
                    **config_manager.get_calendar_provider_config('work')
                )
                
                if not calendar_provider:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
                    return {"status": "error", "message": "Failed to get calendar provider"}
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞
                drive_provider = get_drive_provider(
                    config_manager.get_drive_provider_type('work'),
                    **config_manager.get_drive_provider_config('work')
                )
                
                if not drive_provider:
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                result = process_calendar_events(calendar_provider, drive_provider, account_type, config_manager, logger)
                return result
            else:
                logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                return {"status": "skipped", "message": "Work account disabled"}
        
        elif account_type == 'both':
            results = []
            if config_manager.is_personal_enabled():
                personal_result = process_account(config_manager, 'personal', logger)
                results.append(personal_result)
            
            if config_manager.is_work_enabled():
                work_result = process_account(config_manager, 'work', logger)
                results.append(work_result)
            
            return {"status": "success", "message": "Both accounts processed", "results": results}
        
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            return {"status": "error", "message": f"Unknown account type: {account_type}"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
        return {"status": "error", "message": str(e)}

def process_calendar_events(calendar_provider, drive_provider, account_type: str, config_manager: ConfigManager, logger: logging.Logger) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤—Å—Ç—Ä–µ—á."""
    try:
        logger.info(f"üìÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è {account_type} –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥
        days = 2
        today = datetime.now().date()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = start_date + timedelta(days=days)
        
        events = calendar_provider.get_events(start_date, end_date)
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        filtered_events, excluded_events = filter_events(events, account_type, config_manager, logger)
        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
        logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(excluded_events)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        processed_events = 0
        processed_details = []
        
        for event in filtered_events:
            try:
                result = process_event(event, drive_provider, account_type, config_manager, logger)
                processed_details.append(result)
                processed_events += 1
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        excluded_count = len(excluded_events)
        
        result = {
            'status': 'success',
            'processed': processed_events,
            'excluded': excluded_count,
            'errors': len(events) - processed_events - excluded_count,
            'details': processed_details,
            'excluded_details': excluded_events
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_events}, –∏—Å–∫–ª—é—á–µ–Ω–æ {excluded_count}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {'status': 'error', 'processed': 0, 'excluded': 0, 'errors': 1, 'details': [str(e)]}

def filter_events(events: List[CalendarEvent], account_type: str, config_manager: ConfigManager, logger: logging.Logger) -> tuple[List[CalendarEvent], List[Dict[str, Any]]]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    filtered_events = []
    excluded_events = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    exclusions = _load_exclusions(account_type, config_manager, logger)
    
    for event in events:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        is_excluded = False
        matched_keywords = []
        
        for keyword in exclusions:
            if keyword.lower() in event.title.lower():
                is_excluded = True
                matched_keywords.append(keyword)
        
        if is_excluded:
            logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
            excluded_events.append({
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'reason': '–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
                'keywords': matched_keywords
            })
            continue
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏
        filtered_events.append(event)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
    
    return filtered_events, excluded_events

def _load_exclusions(account_type: str, config_manager: ConfigManager, logger: logging.Logger) -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        exclusions_file = Path(f"config/{account_type}_exclusions.txt")
        
        if not exclusions_file.exists():
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {exclusions_file}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if account_type == 'personal':
                return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
            else:
                return ['–û–±–µ–¥', '–ü–µ—Ä–µ—Ä—ã–≤', '–û—Ç–≥—É–ª', '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', '–û—Ç–ø—É—Å–∫']
        
        exclusions = []
        with open(exclusions_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line and not line.startswith('#'):
                    exclusions.append(line)
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ {exclusions_file}")
        return exclusions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if account_type == 'personal':
            return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
        else:
            return ['–û–±–µ–¥', '–ü–µ—Ä–µ—Ä—ã–≤', '–û—Ç–≥—É–ª', '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', '–û—Ç–ø—É—Å–∫']

def process_event(event: CalendarEvent, drive_provider, account_type: str, config_manager: ConfigManager, logger: logging.Logger) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤—Å—Ç—Ä–µ—á–∏."""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ: {event.title}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        folder_name = format_folder_name(event, account_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if drive_provider and drive_provider.file_exists(folder_name):
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
            folder_created = False
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            if drive_provider:
                folder_id = drive_provider.create_folder(folder_name)
                if folder_id:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                    folder_created = True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {folder_name}")
                    folder_created = False
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                folder_created = False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        folder_link = f"file://{folder_name}" if folder_created else ""
        notion_page_id = create_notion_meeting_record(event, folder_link, account_type, config_manager, logger)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': len(event.attendees),
            'has_meeting_link': bool(event.meeting_link),
            'drive_folder_created': folder_created,
            'notion_page_id': notion_page_id,
            'drive_folder_link': folder_link
        }
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        return {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': 0,
            'has_meeting_link': False,
            'drive_folder_created': False,
            'notion_page_id': '',
            'drive_folder_link': '',
            'error': str(e)
        }

def format_folder_name(event: CalendarEvent, account_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏."""
    start_time = event.start
    title = event.title
    
    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD hh-mm –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    folder_name = f"{start_time.strftime('%Y-%m-%d %H-%M')} {title}"
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
    folder_name = folder_name.replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
    
    return folder_name

def create_notion_meeting_record(event_data: Dict[str, Any], folder_link: str, account_type: str, config_manager: ConfigManager, logger: logging.Logger) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Notion –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω."""
    try:
        logger.info("üîß TASK-4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Notion —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç–∞–π–º–∑–æ–Ω")
        
        # TASK-4: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã
        timezone_str = config_manager.get_general_config().get('timezone', 'Europe/Moscow')
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–π–º–∑–æ–Ω–∞: {timezone_str}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
        notion_config = config_manager.get_notion_config()
        notion_token = notion_config.get('token')
        database_id = notion_config.get('database_id')
        
        if not notion_token or not database_id:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Notion —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return ""
        
        # TASK-4: –°–æ–∑–¥–∞–µ–º NotionHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–∑–æ–Ω–∞–º–∏
        notion_handler = NotionHandler(config_manager, logger=logger)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
        event_data_for_notion = {
            "title": event_data.get('title', ''),
            "start": event_data.get('start'),
            "end": event_data.get('end'),
            "description": event_data.get('description', ''),
            "location": event_data.get('location', ''),
            "attendees": event_data.get('attendees', []),
            "meeting_link": event_data.get('meeting_link', ''),
            "folder_link": folder_link,
            "calendar_source": event_data.get('calendar_source', ''),
            "account_type": account_type,
            "timezone": timezone_str
        }
        
        # TASK-4: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ NotionHandler
        result = notion_handler.create_meeting_page(event_data_for_notion)
        
        if result.get('status') == 'success':
            page_id = result.get('page_id', '')
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {page_id}")
            return page_id
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion: {result.get('message', '')}")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
        return ""

def process_media(config_manager: ConfigManager, quality: str = 'medium', logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        results = []
        total_processed = 0
        total_synced = 0
        
        if config_manager.is_personal_enabled():
            personal_config = config_manager.get_personal_config()
            personal_folder = personal_config.get('local_drive_root')
            if personal_folder and os.path.exists(personal_folder):
                logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                personal_result = _process_folder_media(personal_folder, "personal", quality, logger)
                results.append(personal_result)
                total_processed += personal_result.get("processed", 0)
                total_synced += personal_result.get("synced", 0)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
        
        if config_manager.is_work_enabled():
            work_config = config_manager.get_work_config()
            work_folder = work_config.get('local_drive_root')
            if work_folder and os.path.exists(work_folder):
                logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                work_result = _process_folder_media(work_folder, "work", quality, logger)
                results.append(work_result)
                total_processed += work_result.get("processed", 0)
                total_synced += work_result.get("synced", 0)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, –Ω–∞–π–¥–µ–Ω–æ {total_synced}")
        return {
            "status": "success", 
            "message": "Media processing completed", 
            "results": results,
            "total_processed": total_processed,
            "total_synced": total_synced
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
        return {"status": "error", "message": str(e)}

def _process_folder_media(folder_path: str, account_type: str, quality: str, logger: logging.Logger):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ."""
    try:
        result = {"status": "success", "folder": folder_path, "processed": 0, "synced": 0, "total_videos": 0, "processed_files": []}
        
        # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
        video_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ —Å–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã
                    if 'compressed' not in file.lower():
                        video_files.append(os.path.join(root, file))
        
        if not video_files:
            logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return result
        
        logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        result["total_videos"] = len(video_files)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        for i, video_file in enumerate(video_files):
            try:
                logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {os.path.basename(video_file)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª
                file_dir = os.path.dirname(video_file)
                folder_name = os.path.basename(file_dir)
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
                if len(video_files) == 1:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ–¥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                    compressed_video = os.path.join(file_dir, f"{folder_name}.mp4")
                    compressed_audio = os.path.join(file_dir, f"{folder_name}.mp3")
                else:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                    compressed_video = os.path.join(file_dir, f"{folder_name}_{i+1}.mp4")
                    compressed_audio = os.path.join(file_dir, f"{folder_name}_{i+1}.mp3")
                
                # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
                video_success = _compress_video(video_file, compressed_video, quality, logger)
                if video_success:
                    result["processed"] += 1
                    result["processed_files"].append({
                        "file": os.path.basename(video_file),
                        "type": "video",
                        "output": os.path.basename(compressed_video),
                        "status": "success"
                    })
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {os.path.basename(compressed_video)}")
                
                # TASK-5: –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                if video_success:
                    # –ê—É–¥–∏–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                    audio_success = _extract_audio(compressed_video, compressed_audio, logger)
                    logger.info(f"üîß TASK-5: –ê—É–¥–∏–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {os.path.basename(compressed_video)}")
                else:
                    # –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    audio_success = _extract_audio(video_file, compressed_audio, logger)
                    logger.warning(f"‚ö†Ô∏è TASK-5: –°–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∞—É–¥–∏–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
                if audio_success:
                    result["processed"] += 1
                    result["processed_files"].append({
                        "file": os.path.basename(video_file),
                        "type": "audio",
                        "output": os.path.basename(compressed_audio),
                        "status": "success"
                    })
                    logger.info(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {os.path.basename(compressed_audio)}")
                
                # TASK-5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
                if video_success and audio_success:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        should_delete = config_manager.should_delete_original_videos()
                        
                        if should_delete:
                            logger.info(f"üîß TASK-5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ")
                            
                            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–∏–¥–µ–æ
                            duration_match = _compare_video_duration(video_file, compressed_video, logger)
                            
                            if duration_match:
                                # –î–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                                try:
                                    os.remove(video_file)
                                    logger.info(f"üóëÔ∏è TASK-5: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ: {os.path.basename(video_file)}")
                                    result["processed_files"].append({
                                        "file": os.path.basename(video_file),
                                        "type": "deleted",
                                        "status": "deleted",
                                        "reason": "–î–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å–∂–∞—Ç—ã–º –≤–∏–¥–µ–æ"
                                    })
                                except Exception as e:
                                    logger.error(f"‚ùå TASK-5: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
                            else:
                                # –î–ª–∏–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                                logger.warning(f"‚ö†Ô∏è TASK-5: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–¥–ª–∏–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç): {os.path.basename(video_file)}")
                                result["processed_files"].append({
                                    "file": os.path.basename(video_file),
                                    "type": "preserved",
                                    "status": "preserved",
                                    "reason": "–î–ª–∏–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å–∂–∞—Ç—ã–º –≤–∏–¥–µ–æ"
                                })
                        else:
                            logger.info(f"üîß TASK-5: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                            
                    except Exception as e:
                        logger.error(f"‚ùå TASK-5: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
                
                result["synced"] += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {os.path.basename(video_file)}: {e}")
                result["processed_files"].append({
                    "file": os.path.basename(video_file),
                    "type": "error",
                    "error": str(e),
                    "status": "error"
                })
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {e}")
        return {"status": "error", "folder": folder_path, "processed": 0, "synced": 0, "total_videos": 0, "processed_files": [], "error": str(e)}

def _compress_video(input_file: str, output_file: str, quality: str, logger: logging.Logger) -> bool:
    """–°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        quality_params = {
            'low': ['-crf', '28', '-preset', 'fast'],
            'medium': ['-crf', '23', '-preset', 'medium'],
            'high': ['-crf', '18', '-preset', 'slow']
        }
        
        params = quality_params.get(quality, quality_params['medium'])
        
        cmd = [
            'ffmpeg', '-i', input_file,
            '-c:v', 'libx264',
            '-c:a', 'aac',
            '-b:a', '128k'
        ] + params + [
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            output_file
        ]
        
        logger.info(f"üé¨ –ó–∞–ø—É—Å–∫ FFmpeg: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=1800)  # 30 –º–∏–Ω—É—Ç
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ: {output_file}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {input_file}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ {input_file}: {e}")
        return False

def _extract_audio(input_file: str, output_file: str, logger: logging.Logger) -> bool:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞."""
    try:
        cmd = [
            'ffmpeg', '-i', input_file,
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-c:a', 'mp3',
            '-b:a', '128k',
            '-ar', '44100',
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            output_file
        ]
        
        logger.info(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {output_file}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {input_file}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ {input_file}: {e}")
        return False


def _compare_video_duration(original_file: str, compressed_file: str, logger: logging.Logger) -> bool:
    """
    TASK-5: –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤.
    
    Args:
        original_file: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        compressed_file: –ü—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        True –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã), False –∏–Ω–∞—á–µ
    """
    try:
        logger.info(f"üîç TASK-5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
        logger.info(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {os.path.basename(original_file)}")
        logger.info(f"   –°–∂–∞—Ç—ã–π: {os.path.basename(compressed_file)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists(original_file):
            logger.error(f"‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_file}")
            return False
            
        if not os.path.exists(compressed_file):
            logger.error(f"‚ùå –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {compressed_file}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        original_duration = _get_video_duration(original_file, logger)
        if original_duration is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {original_file}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        compressed_duration = _get_video_duration(compressed_file, logger)
        if compressed_duration is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {compressed_file}")
            return False
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
        duration_diff = abs(original_duration - compressed_duration)
        logger.info(f"üîç –î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {original_duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üîç –î–ª–∏–Ω–∞ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {compressed_duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üîç –†–∞–∑–Ω–∏—Ü–∞: {duration_diff:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
        is_match = duration_diff < 1.0
        
        if is_match:
            logger.info(f"‚úÖ –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Ä–∞–∑–Ω–∏—Ü–∞ < 1 —Å–µ–∫)")
        else:
            logger.warning(f"‚ö†Ô∏è –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Ä–∞–∑–Ω–∏—Ü–∞ >= 1 —Å–µ–∫)")
        
        return is_match
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ: {e}")
        return False


def _get_video_duration(video_file: str, logger: logging.Logger) -> float:
    """
    TASK-5: –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏–Ω—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg.
    
    Args:
        video_file: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
            '-of', 'csv=p=0', video_file
        ]
        
        logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            duration_str = result.stdout.strip()
            try:
                duration = float(duration_str)
                logger.debug(f"üîç –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ {os.path.basename(video_file)}: {duration:.2f} —Å–µ–∫")
                return duration
            except ValueError:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ: {duration_str}")
                return None
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ: {video_file}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ {video_file}: {e}")
        return None

def process_transcription(config_manager: ConfigManager, account_type: str, file_path: str = None, logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üé§ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioProcessor
        audio_processor = AudioProcessor()
        
        if file_path:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
            logger.info(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript = audio_processor._transcribe_full_audio(file_path)
                if transcript:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript_file = file_path.replace('.mp3', '_transcript.txt')
                    with open(transcript_file, 'w', encoding='utf-8') as f:
                        f.write(transcript)
                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {transcript_file}")
                    return {"status": "success", "message": f"Transcription saved to {transcript_file}"}
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è {file_path}")
                    return {"status": "error", "message": f"Failed to create transcription for {file_path}"}
            else:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return {"status": "error", "message": f"File not found: {file_path}"}
        else:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            logger.info(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            
            results = []
            if account_type in ['personal', 'both'] and config_manager.is_personal_enabled():
                personal_config = config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = _process_folder_transcription(audio_processor, personal_folder, "personal", logger)
                    results.append(personal_result)
            
            if account_type in ['work', 'both'] and config_manager.is_work_enabled():
                work_config = config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = _process_folder_transcription(audio_processor, work_folder, "work", logger)
                    results.append(work_result)
            
            logger.info("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return {"status": "success", "message": "Transcription completed", "results": results}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}

def _process_folder_transcription(audio_processor: AudioProcessor, folder_path: str, account_type: str, logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
    if logger is None:
        logger = logging.getLogger(__name__)
        
    try:
        result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
        
        # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        mp3_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.lower().endswith('.mp3'):
                    mp3_files.append(os.path.join(root, file))
        
        if not mp3_files:
            return result
        
        logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ {len(mp3_files)} MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π MP3 —Ñ–∞–π–ª
        for mp3_file in mp3_files:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                transcript_file = mp3_file.replace('.mp3', '_transcript.txt')
                if os.path.exists(transcript_file):
                    logger.info(f"üìÑ –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(transcript_file)}")
                    result["processed"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "already_exists",
                        "output": transcript_file
                    })
                    continue
                
                logger.info(f"üé§ –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è: {os.path.basename(mp3_file)}")
                transcript = audio_processor._transcribe_full_audio(mp3_file)
                if transcript:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    with open(transcript_file, 'w', encoding='utf-8') as f:
                        f.write(transcript)
                    
                    result["processed"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "success",
                        "output": transcript_file
                    })
                else:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "error",
                        "error": "Failed to create transcription"
                    })
                    
            except Exception as e:
                result["errors"] += 1
                result["files"].append({
                    "file": os.path.basename(mp3_file),
                    "status": "error",
                    "error": str(e)
                })
        
        return result
        
    except Exception as e:
        return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}

def process_notion_sync(config_manager: ConfigManager, account_type: str, logger: logging.Logger = None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
        notion_config = config_manager.get_notion_config()
        if not notion_config.get('token'):
            logger.error("‚ùå –¢–æ–∫–µ–Ω Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {"status": "error", "message": "Notion token not configured"}
        
        logger.info(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {notion_config.get('database_id', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Notion API
        notion_api = NotionAPI(notion_config)
        
        results = []
        if account_type in ['personal', 'both'] and config_manager.is_personal_enabled():
            logger.info("üë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å Notion")
            personal_config = config_manager.get_personal_config()
            personal_folder = personal_config.get('local_drive_root')
            if personal_folder and os.path.exists(personal_folder):
                personal_result = _sync_folder_with_notion(notion_api, personal_folder, "personal")
                results.append(personal_result)
        
        if account_type in ['work', 'both'] and config_manager.is_work_enabled():
            logger.info("üè¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å Notion")
            work_config = config_manager.get_work_config()
            work_folder = work_config.get('local_drive_root')
            if work_folder and os.path.exists(work_folder):
                work_result = _sync_folder_with_notion(notion_api, work_folder, "work")
                results.append(work_result)
        
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {"status": "success", "message": "Notion sync completed", "results": results}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
        return {"status": "error", "message": str(e)}

def _sync_folder_with_notion(notion_api: NotionAPI, folder_path: str, account_type: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏ —Å Notion."""
    try:
        result = {"account": account_type, "folder": folder_path, "synced": 0, "errors": 0, "files": []}
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.endswith('_transcript.txt'):
                    transcript_files.append(os.path.join(root, file))
        
        if not transcript_files:
            return result
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        for transcript_file in transcript_files:
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                result["synced"] += 1
                result["files"].append({
                    "file": os.path.basename(transcript_file),
                    "status": "synced"
                })
                
            except Exception as e:
                result["errors"] += 1
                result["files"].append({
                    "file": os.path.basename(transcript_file),
                    "status": "error",
                    "error": str(e)
                })
        
        return result
        
    except Exception as e:
        return {"account": account_type, "folder": folder_path, "synced": 0, "errors": 1, "files": [], "error": str(e)}

def process_notification(message: str, notification_type: str = "info", logger: logging.Logger = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üì± –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        config_manager = ConfigManager()
        telegram_config = config_manager.get_telegram_config()
        
        if not telegram_config.get('bot_token') or not telegram_config.get('chat_id'):
            logger.error("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {"status": "error", "message": "Telegram not configured"}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram API
        telegram_api = TelegramAPI(telegram_config)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º parse_mode
        if notification_type == "detailed":
            # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
            success = telegram_api.send_message(message, parse_mode="HTML")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML (—Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∞)
            success = telegram_api.send_message(message, parse_mode="HTML")
        
        if success:
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return {"status": "success", "message": "Notification sent successfully"}
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return {"status": "error", "message": "Failed to send notification"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á')
    parser.add_argument('action', choices=['calendar', 'drive', 'media', 'transcribe', 'notion', 'all', 'notify'],
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--account', choices=['personal', 'work', 'both'], default='both',
                       help='–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--file', help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--quality', choices=['low', 'medium', 'high'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞')
    parser.add_argument('--message', help='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã notify')
    parser.add_argument('--notification_type', choices=['info', 'detailed'], default='info',
                       help='–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã notify')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {args.action} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {args.account}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = load_environment()
    if not config_manager:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        sys.exit(1)
    
    try:
        if args.action == 'calendar':
            result = process_account(config_manager, args.account, logger)
        elif args.action == 'drive':
            result = process_account(config_manager, args.account, logger)
        elif args.action == 'media':
            result = process_media(config_manager, args.quality, logger)
        elif args.action == 'transcribe':
            result = process_transcription(config_manager, args.account, args.file, logger)
        elif args.action == 'notion':
            result = process_notion_sync(config_manager, args.account, logger)
        elif args.action == 'notify':
            if not args.message:
                logger.error("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã notify –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --message")
                return 1
            
            result = process_notification(args.message, args.notification_type, logger)
        elif args.action == 'all':
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            results = {}
            results['calendar'] = process_account(config_manager, args.account, logger)
            results['media'] = process_media(config_manager, args.quality, logger)
            results['transcribe'] = process_transcription(config_manager, args.account, args.file, logger)
            results['notion'] = process_notion_sync(config_manager, args.account, logger)
            result = {"status": "success", "message": "All actions completed", "results": results}
        
        logger.info(f"‚úÖ {args.action} –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {args.action}: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
