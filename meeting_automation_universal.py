#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–†–∞–±–æ—Ç–∞–µ—Ç —Å –µ–¥–∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π .env –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import os
import sys
import argparse
import logging
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from src.config_manager import ConfigManager
from src.calendar_processor import CalendarProcessor
from src.drive_processor import DriveProcessor
from src.media_processor import MediaProcessor
from src.notion_processor import NotionProcessor

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/universal_automation.log')
        ]
    )
    return logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    logger = logging.getLogger(__name__)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        load_dotenv('.env')
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥: .env")
    else:
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigManager
    try:
        config_manager = ConfigManager('.env')
        logger.info("‚úÖ ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return config_manager
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConfigManager: {e}")
        return None

def process_account(account_type: str, config_manager: ConfigManager, logger: logging.Logger):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    if account_type == 'personal':
        if not config_manager.is_personal_enabled():
            logger.info("‚è≠Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return {"status": "skipped", "message": "Account disabled"}
        
        config = config_manager.get_personal_config()
        logger.info("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç...")
        
    elif account_type == 'work':
        if not config_manager.is_work_enabled():
            logger.info("‚è≠Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return {"status": "skipped", "message": "Account disabled"}
        
        config = config_manager.get_work_config()
        logger.info("üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç...")
        
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
        return {"status": "error", "message": "Unknown account type"}
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_processor = CalendarProcessor(config_manager, account_type)
        calendar_result = calendar_processor.process_calendar()
        logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {calendar_result}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Drive
        drive_processor = DriveProcessor(config_manager, account_type)
        drive_result = drive_processor.process_drive()
        logger.info(f"üíæ Google Drive –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {drive_result}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Notion
        if config.get('notion_token') and config.get('notion_database_id'):
            notion_processor = NotionProcessor(config_manager, account_type)
            notion_result = notion_processor.process_notion()
            logger.info(f"üìù Notion –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {notion_result}")
        else:
            logger.info("‚è≠Ô∏è Notion –ø—Ä–æ–ø—É—â–µ–Ω (—Ç–æ–∫–µ–Ω –∏–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–∫–∞–∑–∞–Ω—ã)")
        
        return {"status": "success", "calendar": calendar_result, "drive": drive_result}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
        return {"status": "error", "message": str(e)}

def process_media(config_manager: ConfigManager, quality: str = 'medium', logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        media_processor = MediaProcessor(config_manager)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if config_manager.is_personal_enabled():
            personal_config = config_manager.get_personal_config()
            personal_folder = personal_config.get('local_drive_root')
            if personal_folder and os.path.exists(personal_folder):
                logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                personal_result = media_processor.process_folder(personal_folder, quality)
                logger.info(f"‚úÖ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {personal_result}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if config_manager.is_work_enabled():
            work_config = config_manager.get_work_config()
            work_folder = work_config.get('local_drive_root')
            if work_folder and os.path.exists(work_folder):
                logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                work_result = media_processor.process_folder(work_folder, quality)
                logger.info(f"‚úÖ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {work_result}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {"status": "success"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
        return {"status": "error", "message": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á')
    parser.add_argument('action', choices=['calendar', 'drive', 'media', 'all'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--account', choices=['personal', 'work', 'both'], default='both',
                       help='–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: both)')
    parser.add_argument('--quality', choices=['low', 'medium', 'high'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: medium)')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager = load_environment()
    if not config_manager:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config_manager.validate_config():
        logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   üë§ –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {'–≤–∫–ª—é—á–µ–Ω' if config_manager.is_personal_enabled() else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.info(f"   üè¢ –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: {'–≤–∫–ª—é—á–µ–Ω' if config_manager.is_work_enabled() else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    try:
        if args.action == 'calendar':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
            if args.account in ['personal', 'both'] and config_manager.is_personal_enabled():
                process_account('personal', config_manager, logger)
            if args.account in ['work', 'both'] and config_manager.is_work_enabled():
                process_account('work', config_manager, logger)
                
        elif args.action == 'drive':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Drive
            if args.account in ['personal', 'both'] and config_manager.is_personal_enabled():
                process_account('personal', config_manager, logger)
            if args.account in ['work', 'both'] and config_manager.is_work_enabled():
                process_account('work', config_manager, logger)
                
        elif args.action == 'media':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
            process_media(config_manager, args.quality, logger)
            
        elif args.action == 'all':
            # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if args.account in ['personal', 'both'] and config_manager.is_personal_enabled():
                process_account('personal', config_manager, logger)
            if args.account in ['work', 'both'] and config_manager.is_work_enabled():
                process_account('work', config_manager, logger)
            process_media(config_manager, args.quality, logger)
        
        logger.info("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        logger.info("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
