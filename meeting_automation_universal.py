#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: calendar, drive, media, transcribe, notion, all
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent / 'src'))

try:
    from config_manager import ConfigManager
    from audio_processor import AudioProcessor
    from media_processor import MediaProcessor
    from notion_api import NotionAPI
    from transcript_analyzer import TranscriptAnalyzer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('meeting_automation_universal.log', encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)

def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        return config_manager
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def process_account(config_manager: ConfigManager, account_type: str, logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–∏—Å–∫)."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
    
    try:
        if account_type == 'personal':
            if config_manager.is_personal_enabled():
                logger.info("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                return {"status": "success", "message": "Personal account processed"}
            else:
                logger.warning("‚ö†Ô∏è –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                return {"status": "skipped", "message": "Personal account disabled"}
        
        elif account_type == 'work':
            if config_manager.is_work_enabled():
                logger.info("üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                return {"status": "success", "message": "Work account processed"}
            else:
                logger.warning("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                return {"status": "skipped", "message": "Work account disabled"}
        
        elif account_type == 'both':
            results = []
            if config_manager.is_personal_enabled():
                personal_result = process_account(config_manager, 'personal', logger)
                results.append(personal_result)
            
            if config_manager.is_work_enabled():
                work_result = process_account(config_manager, 'work', logger)
                results.append(work_result)
            
            return {"status": "success", "message": "Both accounts processed", "results": results}
        
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            return {"status": "error", "message": f"Unknown account type: {account_type}"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_type}: {e}")
        return {"status": "error", "message": str(e)}

def process_media(config_manager: ConfigManager, quality: str = 'medium', logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        media_processor = MediaProcessor(config_manager)
        
        results = []
        if config_manager.is_personal_enabled():
            personal_config = config_manager.get_personal_config()
            personal_folder = personal_config.get('local_drive_root')
            if personal_folder and os.path.exists(personal_folder):
                logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                personal_result = media_processor.process_folder(personal_folder, "personal", quality)
                results.append(personal_result)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {personal_folder}")
        
        if config_manager.is_work_enabled():
            work_config = config_manager.get_work_config()
            work_folder = work_config.get('local_drive_root')
            if work_folder and os.path.exists(work_folder):
                logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                work_result = media_processor.process_folder(work_folder, "work", quality)
                results.append(work_result)
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {work_folder}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {"status": "success", "message": "Media processing completed", "results": results}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
        return {"status": "error", "message": str(e)}

def process_transcription(config_manager: ConfigManager, account_type: str, file_path: str = None, logger: logging.Logger = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üé§ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioProcessor
        audio_processor = AudioProcessor()
        
        if file_path:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
            logger.info(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript = audio_processor._transcribe_full_audio(file_path)
                if transcript:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript_file = file_path.replace('.mp3', '_transcript.txt')
                    with open(transcript_file, 'w', encoding='utf-8') as f:
                        f.write(transcript)
                    logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {transcript_file}")
                    return {"status": "success", "message": f"Transcription saved to {transcript_file}"}
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è {file_path}")
                    return {"status": "error", "message": f"Failed to create transcription for {file_path}"}
            else:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return {"status": "error", "message": f"File not found: {file_path}"}
        else:
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            logger.info(f"üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}")
            
            results = []
            if account_type in ['personal', 'both'] and config_manager.is_personal_enabled():
                personal_config = config_manager.get_personal_config()
                personal_folder = personal_config.get('local_drive_root')
                if personal_folder and os.path.exists(personal_folder):
                    logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                    personal_result = _process_folder_transcription(audio_processor, personal_folder, "personal")
                    results.append(personal_result)
            
            if account_type in ['work', 'both'] and config_manager.is_work_enabled():
                work_config = config_manager.get_work_config()
                work_folder = work_config.get('local_drive_root')
                if work_folder and os.path.exists(work_folder):
                    logger.info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                    work_result = _process_folder_transcription(audio_processor, work_folder, "work")
                    results.append(work_result)
            
            logger.info("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return {"status": "success", "message": "Transcription completed", "results": results}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return {"status": "error", "message": str(e)}

def _process_folder_transcription(audio_processor: AudioProcessor, folder_path: str, account_type: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏."""
    try:
        result = {"account": account_type, "folder": folder_path, "processed": 0, "errors": 0, "files": []}
        
        # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        mp3_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.lower().endswith('.mp3'):
                    mp3_files.append(os.path.join(root, file))
        
        if not mp3_files:
            return result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π MP3 —Ñ–∞–π–ª
        for mp3_file in mp3_files:
            try:
                transcript = audio_processor._transcribe_full_audio(mp3_file)
                if transcript:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript_file = mp3_file.replace('.mp3', '_transcript.txt')
                    with open(transcript_file, 'w', encoding='utf-8') as f:
                        f.write(transcript)
                    
                    result["processed"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "success",
                        "output": transcript_file
                    })
                else:
                    result["errors"] += 1
                    result["files"].append({
                        "file": os.path.basename(mp3_file),
                        "status": "error",
                        "error": "Failed to create transcription"
                    })
                    
            except Exception as e:
                result["errors"] += 1
                result["files"].append({
                    "file": os.path.basename(mp3_file),
                    "status": "error",
                    "error": str(e)
                })
        
        return result
        
    except Exception as e:
        return {"account": account_type, "folder": folder_path, "processed": 0, "errors": 1, "files": [], "error": str(e)}

def process_notion_sync(config_manager: ConfigManager, account_type: str, logger: logging.Logger = None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion."""
    if logger is None:
        logger = logging.getLogger(__name__)
    
    logger.info("üìù –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
        notion_config = config_manager.get_notion_config()
        if not notion_config.get('token'):
            logger.error("‚ùå –¢–æ–∫–µ–Ω Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return {"status": "error", "message": "Notion token not configured"}
        
        logger.info(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {notion_config.get('database_id', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Notion API
        notion_api = NotionAPI(notion_config)
        
        results = []
        if account_type in ['personal', 'both'] and config_manager.is_personal_enabled():
            logger.info("üë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å Notion")
            personal_config = config_manager.get_personal_config()
            personal_folder = personal_config.get('local_drive_root')
            if personal_folder and os.path.exists(personal_folder):
                personal_result = _sync_folder_with_notion(notion_api, personal_folder, "personal")
                results.append(personal_result)
        
        if account_type in ['work', 'both'] and config_manager.is_work_enabled():
            logger.info("üè¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å Notion")
            work_config = config_manager.get_work_config()
            work_folder = work_config.get('local_drive_root')
            if work_folder and os.path.exists(work_folder):
                work_result = _sync_folder_with_notion(notion_api, work_folder, "work")
                results.append(work_result)
        
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return {"status": "success", "message": "Notion sync completed", "results": results}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
        return {"status": "error", "message": str(e)}

def _sync_folder_with_notion(notion_api: NotionAPI, folder_path: str, account_type: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏ —Å Notion."""
    try:
        result = {"account": account_type, "folder": folder_path, "synced": 0, "errors": 0, "files": []}
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                if file.endswith('_transcript.txt'):
                    transcript_files.append(os.path.join(root, file))
        
        if not transcript_files:
            return result
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        for transcript_file in transcript_files:
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                result["synced"] += 1
                result["files"].append({
                    "file": os.path.basename(transcript_file),
                    "status": "synced"
                })
                
            except Exception as e:
                result["errors"] += 1
                result["files"].append({
                    "file": os.path.basename(transcript_file),
                    "status": "error",
                    "error": str(e)
                })
        
        return result
        
    except Exception as e:
        return {"account": account_type, "folder": folder_path, "synced": 0, "errors": 1, "files": [], "error": str(e)}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á')
    parser.add_argument('action', choices=['calendar', 'drive', 'media', 'transcribe', 'notion', 'all'],
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--account', choices=['personal', 'work', 'both'], default='both',
                       help='–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--file', help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--quality', choices=['low', 'medium', 'high'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {args.action} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {args.account}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_manager = load_environment()
    if not config_manager:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        sys.exit(1)
    
    try:
        if args.action == 'calendar':
            result = process_account(config_manager, args.account, logger)
        elif args.action == 'drive':
            result = process_account(config_manager, args.account, logger)
        elif args.action == 'media':
            result = process_media(config_manager, args.quality, logger)
        elif args.action == 'transcribe':
            result = process_transcription(config_manager, args.account, args.file, logger)
        elif args.action == 'notion':
            result = process_notion_sync(config_manager, args.account, logger)
        elif args.action == 'all':
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            results = {}
            results['calendar'] = process_account(config_manager, args.account, logger)
            results['media'] = process_media(config_manager, args.quality, logger)
            results['transcribe'] = process_transcription(config_manager, args.account, logger)
            results['notion'] = process_notion_sync(config_manager, args.account, logger)
            result = {"status": "success", "message": "All actions completed", "results": results}
        
        logger.info(f"‚úÖ {args.action} –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {args.action}: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
