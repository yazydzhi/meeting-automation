#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ Google Drive
"""

import os
import sys
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from calendar_alternatives import get_calendar_provider, CalendarEvent
    from drive_alternatives import get_drive_provider, DriveFile
    from config_manager import ConfigManager, create_sample_env
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_config_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞
    create_sample_env()
    print("‚úÖ –°–æ–∑–¥–∞–Ω .env.sample —Ñ–∞–π–ª")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ConfigManager()
    print("\nüìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(config.get_config_summary())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if config.validate_config():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
    
    return config

def test_calendar_providers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Calendar API
    print("\nüéØ Google Calendar API:")
    try:
        provider = get_calendar_provider('google_api', 
                                       credentials_path='creds/client_secret.json',
                                       calendar_id='primary')
        events = provider.get_today_events()
        print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(events)}")
        for event in events[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"      - {event.title} ({event.start.strftime('%H:%M')})")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Notion
    print("\nüéØ Notion –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
    try:
        provider = get_calendar_provider('notion',
                                       notion_token=os.getenv('NOTION_TOKEN', ''),
                                       database_id=os.getenv('NOTION_DATABASE_ID', ''))
        events = provider.get_upcoming_events(days=7)
        print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é: {len(events)}")
        for event in events[:3]:
            print(f"      - {event.title} ({event.start.strftime('%Y-%m-%d %H:%M')})")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∫–∞–ª–µ–Ω–¥–∞—Ä—å (iCal)
    print("\nüéØ –í–µ–±-–∫–∞–ª–µ–Ω–¥–∞—Ä—å (iCal):")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ—Å—Ç–∞
        test_url = "https://calendar.google.com/calendar/ical/ru.russian%23holiday%40group.v.calendar.google.com/public/basic.ics"
        provider = get_calendar_provider('web_ical', calendar_url=test_url)
        events = provider.get_upcoming_events(days=30)
        print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ –º–µ—Å—è—Ü: {len(events)}")
        for event in events[:3]:
            print(f"      - {event.title} ({event.start.strftime('%Y-%m-%d')})")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JSON –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    print("\nüéØ –õ–æ–∫–∞–ª—å–Ω—ã–π JSON –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON —Ñ–∞–π–ª
        test_events = {
            "events": [
                {
                    "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ 1",
                    "start": "2025-08-22T10:00:00",
                    "end": "2025-08-22T11:00:00",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏",
                    "location": "–û–Ω–ª–∞–π–Ω",
                    "attendees": ["user1@example.com", "user2@example.com"],
                    "meeting_link": "https://meet.google.com/test"
                },
                {
                    "title": "–¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ 2",
                    "start": "2025-08-23T14:00:00",
                    "end": "2025-08-23T15:00:00",
                    "description": "–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                    "location": "–û—Ñ–∏—Å",
                    "attendees": ["user3@example.com"],
                    "meeting_link": ""
                }
            ]
        }
        
        test_file = "data/calendar/test_events.json"
        os.makedirs(os.path.dirname(test_file), exist_ok=True)
        
        import json
        with open(test_file, 'w', encoding='utf-8') as f:
            json.dump(test_events, f, ensure_ascii=False, indent=2)
        
        provider = get_calendar_provider('local_json', calendar_file=test_file)
        events = provider.get_upcoming_events(days=7)
        print(f"   ‚úÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é: {len(events)}")
        for event in events:
            print(f"      - {event.title} ({event.start.strftime('%Y-%m-%d %H:%M')})")
            print(f"        –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(event.attendees)}")
            print(f"        –ò—Å—Ç–æ—á–Ω–∏–∫: {event.calendar_source}")
        
        # –û—á–∏—Å—Ç–∫–∞
        os.remove(test_file)
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_drive_providers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã Google Drive."""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã Google Drive...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Drive API
    print("\nüéØ Google Drive API:")
    try:
        provider = get_drive_provider('google_api',
                                    credentials_path='creds/client_secret.json')
        files = provider.list_files()
        print(f"   ‚úÖ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(files)}")
        for file in files[:3]:
            print(f"      - {file.name} ({file.mime_type}, {file.size} –±–∞–π—Ç)")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    print("\nüéØ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:")
    try:
        provider = get_drive_provider('local', root_path='data/test_local_drive')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_dir = Path('data/test_local_drive')
        test_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = test_dir / 'test.txt'
        with open(test_file, 'w') as f:
            f.write('–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
        test_folder = test_dir / 'test_folder'
        test_folder.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
        nested_file = test_folder / 'nested.txt'
        with open(nested_file, 'w') as f:
            f.write('–§–∞–π–ª –≤ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = provider.list_files()
        print(f"   ‚úÖ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ: {len(files)}")
        for file in files:
            print(f"      - {file.name} ({file.mime_type}, {file.size} –±–∞–π—Ç)")
            print(f"        MD5: {file.md5_hash}")
            print(f"        –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {file.local_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        new_folder_id = provider.create_folder('new_test_folder')
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {new_folder_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
        upload_result = provider.upload_file('data/test_local_drive/test.txt', 
                                           'new_test_folder', 'uploaded_test.txt')
        print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        exists = provider.file_exists('uploaded_test.txt', 'new_test_folder')
        print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree('data/test_local_drive')
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Drive –¥–ª—è Desktop
    print("\nüéØ Google Drive –¥–ª—è Desktop:")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—É—Ç—å
        desktop_path = os.getenv('GOOGLE_DRIVE_DESKTOP_PATH', '')
        if desktop_path and os.path.exists(desktop_path):
            provider = get_drive_provider('google_desktop', drive_path=desktop_path)
            files = provider.list_files()
            print(f"   ‚úÖ –§–∞–π–ª–æ–≤ –≤ Google Drive: {len(files)}")
            for file in files[:3]:
                print(f"      - {file.name} ({file.mime_type}, {file.size} –±–∞–π—Ç)")
        else:
            print("   ‚ö†Ô∏è –ü—É—Ç—å Google Drive –¥–ª—è Desktop –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        test_event = CalendarEvent(
            title="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç",
            start=datetime.now(),
            end=datetime.now() + timedelta(hours=1),
            description="–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
            location="–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞",
            attendees=["test@example.com"],
            meeting_link="https://test.com",
            calendar_source="test"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {test_event.title}")
        print(f"   –í—Ä–µ–º—è: {test_event.start.strftime('%Y-%m-%d %H:%M')} - {test_event.end.strftime('%H:%M')}")
        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(test_event.attendees)}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {test_event.calendar_source}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = DriveFile(
            name="test_integration.txt",
            file_id="test_123",
            mime_type="text/plain",
            size=1024,
            modified_time=datetime.now(),
            parents=[],
            web_view_link="file://test",
            local_path="/tmp/test.txt",
            md5_hash="test_hash"
        )
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file.name}")
        print(f"   MIME —Ç–∏–ø: {test_file.mime_type}")
        print(f"   –†–∞–∑–º–µ—Ä: {test_file.size} –±–∞–π—Ç")
        print(f"   MD5: {test_file.md5_hash}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ Google Drive")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = test_config_manager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    test_calendar_providers()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã Google Drive
    test_drive_providers()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    test_integration()
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
    print("2. –£–∫–∞–∂–∏—Ç–µ CALENDAR_PROVIDER –∏ DRIVE_PROVIDER")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main()
