#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""

import os
import sys
import time
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / 'src'))

def test_advanced_segmentation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üéØ –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–´–• –ú–ï–¢–û–î–û–í –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ê—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    audio_file = "data/temp_audio/–ê–ª—å—Ñ–∞ –Ω–µ–∏–ø–æ—Ç–µ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–∏—á–∫–∞ 01.08.2025 —á2_compressed_prepared_compressed.wav"
    
    if not os.path.exists(audio_file):
        print(f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        from advanced_segmentation import AdvancedSegmentation
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é AdvancedSegmentation...")
        segmenter = AdvancedSegmentation()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–æ–Ω–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
        print("\nüéµ –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω—Ç–æ–Ω–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é...")
        start_time = time.time()
        intonation_segments = segmenter.segment_by_intonation_patterns(audio_file)
        intonation_time = time.time() - start_time
        
        print(f"‚úÖ –ò–Ω—Ç–æ–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {len(intonation_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ {intonation_time:.2f}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
        print("\nüòä –¢–µ—Å—Ç–∏—Ä—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é...")
        start_time = time.time()
        emotion_segments = segmenter.segment_by_emotional_patterns(audio_file)
        emotion_time = time.time() - start_time
        
        print(f"‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {len(emotion_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ {emotion_time:.2f}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é...")
        start_time = time.time()
        energy_segments = segmenter.segment_by_energy_patterns(audio_file)
        energy_time = time.time() - start_time
        
        print(f"‚úÖ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {len(energy_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ {energy_time:.2f}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
        print("\nüß† –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é...")
        start_time = time.time()
        adaptive_segments = segmenter.segment_by_context_awareness(audio_file)
        adaptive_time = time.time() - start_time
        
        print(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {len(adaptive_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ {adaptive_time:.2f}—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_segmentation_results(audio_file, {
            'intonation': {
                'segments': intonation_segments,
                'time': intonation_time,
                'count': len(intonation_segments)
            },
            'emotion': {
                'segments': emotion_segments,
                'time': emotion_time,
                'count': len(emotion_segments)
            },
            'energy': {
                'segments': energy_segments,
                'time': energy_time,
                'count': len(energy_segments)
            },
            'adaptive': {
                'segments': adaptive_segments,
                'time': adaptive_time,
                'count': len(adaptive_segments)
            }
        })
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print_comparison_summary({
            'intonation': intonation_segments,
            'emotion': emotion_segments,
            'energy': energy_segments,
            'adaptive': adaptive_segments
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def save_segmentation_results(audio_file: str, results: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        base_name = os.path.splitext(os.path.basename(audio_file))[0]
        output_dir = Path(f'data/audio_processing/{base_name}_advanced_segmentation')
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
        json_file = output_dir / 'segmentation_results.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy –º–∞—Å—Å–∏–≤—ã –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
            json_results = {}
            for method, data in results.items():
                json_results[method] = {
                    'time': data['time'],
                    'count': data['count'],
                    'segments': []
                }
                
                for segment in data['segments']:
                    # –£–±–∏—Ä–∞–µ–º numpy –º–∞—Å—Å–∏–≤—ã –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    json_segment = {
                        'start_time': segment['start_time'],
                        'end_time': segment['end_time'],
                        'duration': segment['duration'],
                        'start_sample': segment.get('start_sample', 0),
                        'end_sample': segment.get('end_sample', 0),
                        'segmentation_method': segment.get('segmentation_method', 'unknown')
                    }
                    json_results[method]['segments'].append(json_segment)
            
            json.dump(json_results, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ Markdown
        md_file = output_dir / 'segmentation_results.md'
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏\n\n")
            f.write(f"–§–∞–π–ª: {audio_file}\n")
            f.write(f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤\n\n")
            f.write("| –ú–µ—Ç–æ–¥ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ | –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è |\n")
            f.write("|-------|---------------------|------------------|\n")
            
            for method, data in results.items():
                f.write(f"| {method.title()} | {data['count']} | {data['time']:.2f}—Å |\n")
            
            f.write("\n## –î–µ—Ç–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n\n")
            
            for method, data in results.items():
                f.write(f"### {method.title()}\n")
                f.write(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**: {data['count']}\n")
                f.write(f"- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {data['time']:.2f}—Å\n\n")
                
                if data['segments']:
                    f.write("| ‚Ññ | –ù–∞—á–∞–ª–æ (–º—Å) | –ö–æ–Ω–µ—Ü (–º—Å) | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º—Å) |\n")
                    f.write("|---|--------------|-------------|-------------------|\n")
                    
                    for i, segment in enumerate(data['segments']):
                        f.write(f"| {i+1} | {segment['start_time']} | {segment['end_time']} | {segment['duration']} |\n")
                
                f.write("\n")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def print_comparison_summary(results: dict):
    """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 60)
    
    print("\nüèÜ –†–ï–ô–¢–ò–ù–ì –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–ï–ì–ú–ï–ù–¢–û–í:")
    sorted_by_count = sorted(results.items(), key=lambda x: len(x[1]), reverse=True)
    for i, (method, segments) in enumerate(sorted_by_count, 1):
        print(f"{i}. {method.title()}: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    print("\n‚è±Ô∏è –†–ï–ô–¢–ò–ù–ì –ü–û –°–ö–û–†–û–°–¢–ò:")
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    
    print("\nüìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´ –í:")
    print("data/audio_processing/[–∏–º—è_—Ñ–∞–π–ª–∞]_advanced_segmentation/")
    print("- segmentation_results.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("- segmentation_results.md - –æ—Ç—á–µ—Ç –≤ Markdown")
    print("- [–∏–º—è_—Ñ–∞–π–ª–∞]_visualizations/ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    test_advanced_segmentation()
