#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ Google Drive API
–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å Drive scopes
"""

import os
import sys
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ scopes –¥–ª—è Drive API
DRIVE_SCOPES = [
    'https://www.googleapis.com/auth/calendar.readonly',  # Calendar (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    'https://www.googleapis.com/auth/drive',              # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Drive
    'https://www.googleapis.com/auth/drive.file',         # –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    'https://www.googleapis.com/auth/drive.readonly'      # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ Drive
]

def print_section(title, char="="):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print(f"\n{char * 80}")
    print(f"üéØ {title}")
    print(f"{char * 80}")

def check_current_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
    
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    if not personal_token:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PERSONAL_GOOGLE_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    if not os.path.exists(personal_token):
        print(f"‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {personal_token}")
        return None
    
    try:
        with open(personal_token, 'r') as f:
            import json
            token_data = json.load(f)
        
        print("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        print(f"  üìÅ –§–∞–π–ª: {personal_token}")
        
        if 'scopes' in token_data:
            scopes = token_data['scopes']
            if isinstance(scopes, str):
                scopes = scopes.split(' ')
            
            print(f"  üìã –¢–µ–∫—É—â–∏–µ scopes ({len(scopes)}):")
            for scope in scopes:
                if scope.strip():
                    scope_name = scope.split('/')[-1]
                    print(f"    - {scope_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Drive scopes
            drive_scopes = [s for s in scopes if 'drive' in s]
            calendar_scopes = [s for s in scopes if 'calendar' in s]
            
            print(f"  üéØ –ê–Ω–∞–ª–∏–∑:")
            print(f"    üìÖ Calendar scopes: {len(calendar_scopes)}")
            print(f"    üìÅ Drive scopes: {len(drive_scopes)}")
            
            if drive_scopes:
                print("  ‚úÖ Drive scopes —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ!")
                return token_data
            else:
                print("  ‚ùå Drive scopes –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
                return None
        else:
            print("  ‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–µ–∑ scopes")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def backup_current_token():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
    
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    if not personal_token or not os.path.exists(personal_token):
        print("  ‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import shutil
        from datetime import datetime
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{personal_token}.backup_{timestamp}"
        
        shutil.copy2(personal_token, backup_path)
        print(f"  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def create_new_drive_token():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å Drive scopes"""
    print("\nüîë –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å Drive scopes...")
    
    personal_oauth = os.getenv('PERSONAL_GOOGLE_OAUTH_CLIENT')
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    
    if not personal_oauth:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PERSONAL_GOOGLE_OAUTH_CLIENT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    if not os.path.exists(personal_oauth):
        print(f"‚ùå OAuth client –Ω–µ –Ω–∞–π–¥–µ–Ω: {personal_oauth}")
        return False
    
    try:
        print(f"  üìÅ OAuth Client: {os.path.basename(personal_oauth)}")
        print(f"  üéØ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º scopes:")
        for scope in DRIVE_SCOPES:
            scope_name = scope.split('/')[-1]
            print(f"    - {scope_name}")
        
        print(f"\n  üåê –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        print(f"  üìã –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π Google –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        
        # –°–æ–∑–¥–∞–µ–º flow –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        flow = InstalledAppFlow.from_client_secrets_file(personal_oauth, DRIVE_SCOPES)
        creds = flow.run_local_server(port=0)
        
        print(f"  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        if personal_token:
            with open(personal_token, 'w') as token:
                token.write(creds.to_json())
            print(f"  üíæ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {personal_token}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def test_drive_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Drive API —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Drive API...")
    
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    if not personal_token or not os.path.exists(personal_token):
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
        creds = Credentials.from_authorized_user_file(personal_token, DRIVE_SCOPES)
        
        # –°–æ–∑–¥–∞–µ–º Drive —Å–µ—Ä–≤–∏—Å
        service = build('drive', 'v3', credentials=creds)
        print("  ‚úÖ Drive —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("  üìã –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        about = service.about().get(fields="user,storageQuota").execute()
        user_info = about.get('user', {})
        
        print(f"    ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('displayName', 'N/A')}")
        print(f"    üìß Email: {user_info.get('emailAddress', 'N/A')}")
        
        # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print("  üìÅ –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
        files = service.files().list(pageSize=5, fields="files(id,name,mimeType)").execute()
        file_list = files.get('files', [])
        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_list)}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏
        print("  üìÇ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏...")
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        folder_metadata = {
            'name': f'Test_Drive_Access_{timestamp}',
            'mimeType': 'application/vnd.google-apps.folder'
        }
        
        folder = service.files().create(body=folder_metadata, fields='id,name,webViewLink').execute()
        folder_id = folder.get('id')
        folder_link = folder.get('webViewLink', 'N/A')
        
        print(f"    ‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder.get('name')}")
        print(f"    üîó ID: {folder_id}")
        print(f"    üåê –°—Å—ã–ª–∫–∞: {folder_link}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
        service.files().delete(fileId=folder_id).execute()
        print(f"    üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("  üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Drive API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except HttpError as e:
        if e.status_code == 403:
            print(f"    ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Drive API: {e.reason}")
            print(f"    üí° –í–æ–∑–º–æ–∂–Ω–æ, Drive API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            return False
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ Drive API: {e.status_code} - {e.reason}")
            return False
    except Exception as e:
        print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_calendar_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Calendar API —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Calendar API...")
    
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    if not personal_token or not os.path.exists(personal_token):
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
        creds = Credentials.from_authorized_user_file(personal_token, DRIVE_SCOPES)
        
        # –°–æ–∑–¥–∞–µ–º Calendar —Å–µ—Ä–≤–∏—Å
        service = build('calendar', 'v3', credentials=creds)
        print("  ‚úÖ Calendar —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
        calendars = service.calendarList().list(maxResults=5).execute()
        calendar_list = calendars.get('items', [])
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(calendar_list)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if calendar_list:
            primary = calendar_list[0]
            print(f"    üìÖ –û—Å–Ω–æ–≤–Ω–æ–π: {primary.get('summary', 'N/A')}")
        
        print("  üéâ Calendar API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ Calendar API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Drive —Ç–æ–∫–µ–Ω–∞"""
    print("üöÄ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –î–õ–Ø –õ–ò–ß–ù–û–ì–û GOOGLE DRIVE API")
    print("üéØ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
    current_token = check_current_token()
    
    if current_token and any('drive' in s for s in current_token.get('scopes', [])):
        print("\n‚úÖ Drive scopes —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ!")
        print("üí° –¢–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_created = backup_current_token()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    print_section("–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –¢–û–ö–ï–ù–ê")
    
    if create_new_drive_token():
        print("\n‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        print_section("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê")
        
        drive_ok = test_drive_access()
        calendar_ok = test_calendar_access()
        
        if drive_ok and calendar_ok:
            print("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Drive –∏ Calendar!")
            print("üí° –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Google API")
        elif calendar_ok:
            print("\n‚ö†Ô∏è Calendar —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ Drive API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üí° –ù—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å Google Drive API –≤ Cloud Console")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Google Cloud Console")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        if backup_created:
            print("üí° –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞, –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω")
    
    print(f"\n{'=' * 80}")
    print("üéä –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è Drive —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == '__main__':
    main()
