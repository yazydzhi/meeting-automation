#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Google Drive API –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ scopes –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import os
import sys
import json
from datetime import datetime
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –†–∞–∑–ª–∏—á–Ω—ã–µ Drive scopes –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DRIVE_SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/drive.readonly',
    'https://www.googleapis.com/auth/drive.metadata.readonly',
    'https://www.googleapis.com/auth/drive.appdata',
    'https://www.googleapis.com/auth/drive.photos.readonly'
]

def print_section(title, char="=", width=80):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print(f"\n{char * width}")
    print(f"üéØ {title}")
    print(f"{char * width}")

def analyze_token_detailed(token_path, account_name):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ {account_name}:")
    print(f"üìÅ –§–∞–π–ª: {token_path}")
    
    if not os.path.exists(token_path):
        print("‚ùå –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        with open(token_path, 'r') as f:
            token_data = json.load(f)
        
        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"  Client ID: {token_data.get('client_id', 'N/A')}")
        print(f"  Account: {token_data.get('account', 'N/A')}")
        print(f"  Token Type: {token_data.get('token_type', 'N/A')}")
        print(f"  Universe Domain: {token_data.get('universe_domain', 'N/A')}")
        
        # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiry = token_data.get('expiry')
        if expiry:
            try:
                expiry_time = datetime.fromisoformat(expiry.replace('Z', '+00:00'))
                now = datetime.now(expiry_time.tzinfo)
                time_left = expiry_time - now
                
                if time_left.total_seconds() > 0:
                    hours_left = time_left.total_seconds() / 3600
                    print(f"  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {hours_left:.1f} —á–∞—Å–æ–≤")
                else:
                    print(f"  ‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {abs(time_left.total_seconds() / 3600):.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
            except:
                print(f"  Expiry: {expiry}")
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
        print(f"\nüéØ –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ (scopes):")
        scopes = token_data.get('scopes', [])
        if isinstance(scopes, str):
            scopes = scopes.split(' ')
        
        if scopes:
            for i, scope in enumerate(scopes, 1):
                if scope.strip():
                    scope_name = scope.split('/')[-1]
                    print(f"  {i}. {scope_name}")
                    print(f"     {scope}")
        else:
            print("  ‚ö†Ô∏è Scopes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ scopes
        calendar_scopes = [s for s in scopes if 'calendar' in s]
        drive_scopes = [s for s in scopes if 'drive' in s]
        other_scopes = [s for s in scopes if 'calendar' not in s and 'drive' not in s]
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ scopes:")
        print(f"  üìÖ Calendar scopes: {len(calendar_scopes)}")
        print(f"  üìÅ Drive scopes: {len(drive_scopes)}")
        print(f"  üîß –î—Ä—É–≥–∏–µ scopes: {len(other_scopes)}")
        
        if drive_scopes:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Drive scopes:")
            for scope in drive_scopes:
                scope_name = scope.split('/')[-1]
                print(f"    ‚úÖ {scope_name}")
        else:
            print(f"\n‚ùå Drive scopes –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–æ–∫–µ–Ω–µ!")
        
        return token_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def get_drive_service_with_scope(oauth_client_path, token_path, scope, account_name):
    """–°–æ–∑–¥–∞–µ—Ç Drive —Å–µ—Ä–≤–∏—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º scope"""
    try:
        creds = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        if os.path.exists(token_path):
            creds = Credentials.from_authorized_user_file(token_path, [scope])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
                print(f"    ‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {scope}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                flow = InstalledAppFlow.from_client_secrets_file(oauth_client_path, [scope])
                creds = flow.run_local_server(port=0)
                print(f"    ‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è {scope}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(token_path, 'w') as token:
                    token.write(creds.to_json())
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = build('drive', 'v3', credentials=creds)
        print(f"    ‚úÖ Drive —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —Å scope: {scope.split('/')[-1]}")
        return service
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

def test_drive_operations(service, scope, account_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Drive API"""
    scope_name = scope.split('/')[-1]
    print(f"\n  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å scope: {scope_name}")
    
    results = {
        'user_info': False,
        'file_list': False,
        'folder_create': False,
        'file_upload': False,
        'permissions': False
    }
    
    try:
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print(f"    üìã –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        about = service.about().get(fields="user,storageQuota").execute()
        user_info = about.get('user', {})
        storage = about.get('storageQuota', {})
        
        print(f"      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('displayName', 'N/A')}")
        print(f"      üìß Email: {user_info.get('emailAddress', 'N/A')}")
        
        if storage:
            used = int(storage.get('usage', 0))
            limit = int(storage.get('limit', 0))
            if limit > 0:
                used_gb = used / (1024**3)
                limit_gb = limit / (1024**3)
                percent_used = (used / limit) * 100
                print(f"      üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {used_gb:.2f} GB / {limit_gb:.2f} GB ({percent_used:.1f}%)")
        
        results['user_info'] = True
        
    except HttpError as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e.status_code} - {e.reason}")
    except Exception as e:
        print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    try:
        # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print(f"    üìÅ –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
        files = service.files().list(
            pageSize=5,
            fields="files(id,name,mimeType,size,modifiedTime,owners)",
            orderBy="modifiedTime desc"
        ).execute()
        
        file_list = files.get('files', [])
        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_list)}")
        
        for i, file in enumerate(file_list[:3], 1):
            name = file.get('name', 'N/A')
            mime_type = file.get('mimeType', 'N/A')
            size = file.get('size', 'N/A')
            
            if size and size != 'N/A':
                size_mb = int(size) / (1024*1024)
                size_str = f"{size_mb:.2f} MB"
            else:
                size_str = "N/A"
            
            print(f"        {i}. {name}")
            print(f"           Type: {mime_type}, Size: {size_str}")
        
        results['file_list'] = True
        
    except HttpError as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e.status_code} - {e.reason}")
    except Exception as e:
        print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏)
    if 'readonly' not in scope_name and 'metadata' not in scope_name:
        try:
            print(f"    üìÇ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏...")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            folder_name = f"Test_{account_name}_{scope_name}_{timestamp}"
            
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder'
            }
            
            folder = service.files().create(body=folder_metadata, fields='id,name,webViewLink').execute()
            folder_id = folder.get('id')
            folder_link = folder.get('webViewLink', 'N/A')
            
            print(f"      ‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder.get('name')}")
            print(f"      üîó ID: {folder_id}")
            print(f"      üåê –°—Å—ã–ª–∫–∞: {folder_link}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
            service.files().delete(fileId=folder_id).execute()
            print(f"      üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            
            results['folder_create'] = True
            
        except HttpError as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e.status_code} - {e.reason}")
        except Exception as e:
            print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    else:
        print(f"    üìÇ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (–ø—Ä–æ–ø—É—â–µ–Ω–æ - readonly scope)")
    
    return results

def test_account_drive(account_type, oauth_client_path, token_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Drive API –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print_section(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive API - {account_type} –∞–∫–∫–∞—É–Ω—Ç")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token_data = analyze_token_detailed(token_path, account_type)
    if not token_data:
        return {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OAuth client
    if not os.path.exists(oauth_client_path):
        print(f"‚ùå OAuth client –Ω–µ –Ω–∞–π–¥–µ–Ω: {oauth_client_path}")
        return {}
    
    print(f"\nüìã OAuth Client: {os.path.basename(oauth_client_path)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º project ID –∏–∑ client ID
    client_id = token_data.get('client_id', '')
    if client_id:
        project_id = client_id.split('-')[0]
        print(f"üèóÔ∏è Project ID: {project_id}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π scope
    results = {}
    
    for i, scope in enumerate(DRIVE_SCOPES, 1):
        scope_name = scope.split('/')[-1]
        
        print(f"\n{'‚îÄ' * 80}")
        print(f"üéØ –¢–µ—Å—Ç {i}/{len(DRIVE_SCOPES)}: {scope_name}")
        print(f"üìã Scope: {scope}")
        print(f"{'‚îÄ' * 80}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = get_drive_service_with_scope(oauth_client_path, token_path, scope, account_type)
        
        if service:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            test_results = test_drive_operations(service, scope, account_type)
            results[scope] = test_results
        else:
            results[scope] = {
                'user_info': False,
                'file_list': False,
                'folder_create': False,
                'file_upload': False,
                'permissions': False
            }
    
    return results

def generate_drive_report(personal_results, work_results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ Drive API"""
    print_section("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û GOOGLE DRIVE API")
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {timestamp}")
    
    accounts = [
        ("–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", personal_results),
        ("–†–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç", work_results)
    ]
    
    for account_name, results in accounts:
        print(f"\nüéØ {account_name}:")
        
        if not results:
            print("  ‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ (–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
            continue
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_scopes = len(results)
        working_scopes = 0
        partially_working = 0
        
        for scope, scope_results in results.items():
            scope_name = scope.split('/')[-1]
            working_operations = sum(scope_results.values())
            total_operations = len(scope_results)
            
            if working_operations == total_operations:
                status = "‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢"
                working_scopes += 1
            elif working_operations > 0:
                status = f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢ ({working_operations}/{total_operations})"
                partially_working += 1
            else:
                status = "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            
            print(f"  üìÅ {scope_name}: {status}")
            
            # –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            if working_operations > 0:
                for operation, success in scope_results.items():
                    if success:
                        print(f"    ‚úÖ {operation}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {account_name}:")
        print(f"    ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö scopes: {working_scopes}/{total_scopes}")
        print(f"    ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö scopes: {partially_working}/{total_scopes}")
        print(f"    ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö scopes: {total_scopes - working_scopes - partially_working}/{total_scopes}")
    
    # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
    print(f"\nüí° –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    personal_working = any(any(scope_results.values()) for scope_results in personal_results.values()) if personal_results else False
    work_working = any(any(scope_results.values()) for scope_results in work_results.values()) if work_results else False
    
    if personal_working and work_working:
        print("  üéâ Drive API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±–æ–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        print("  üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    elif personal_working or work_working:
        working_account = "–ª–∏—á–Ω–æ–≥–æ" if personal_working else "—Ä–∞–±–æ—á–µ–≥–æ"
        not_working_account = "—Ä–∞–±–æ—á–µ–≥–æ" if personal_working else "–ª–∏—á–Ω–æ–≥–æ"
        print(f"  ‚úÖ Drive API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è {working_account} –∞–∫–∫–∞—É–Ω—Ç–∞")
        print(f"  üîß –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Drive API –¥–ª—è {not_working_account} –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        print("  ‚ùå Drive API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        print("  üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å Google Drive API –≤ –æ–±–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö:")
        print("    - –õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (testapp-68416)")
        print("    - –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç (948812030960)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ GOOGLE DRIVE API")
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏—á–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç—ã")
    print("üìÅ –í—Å–µ Drive scopes + –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    personal_oauth = os.getenv('PERSONAL_GOOGLE_OAUTH_CLIENT')
    personal_token = os.getenv('PERSONAL_GOOGLE_TOKEN')
    
    work_oauth = os.getenv('WORK_GOOGLE_OAUTH_CLIENT')
    work_token = os.getenv('WORK_GOOGLE_TOKEN')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    missing_vars = []
    if not personal_oauth:
        missing_vars.append('PERSONAL_GOOGLE_OAUTH_CLIENT')
    if not personal_token:
        missing_vars.append('PERSONAL_GOOGLE_TOKEN')
    if not work_oauth:
        missing_vars.append('WORK_GOOGLE_OAUTH_CLIENT')
    if not work_token:
        missing_vars.append('WORK_GOOGLE_TOKEN')
    
    if missing_vars:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    personal_results = test_account_drive("–õ–∏—á–Ω—ã–π", personal_oauth, personal_token)
    work_results = test_account_drive("–†–∞–±–æ—á–∏–π", work_oauth, work_token)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_drive_report(personal_results, work_results)
    
    print(f"\n{'=' * 80}")
    print("üéä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Drive API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"{'=' * 80}")

if __name__ == '__main__':
    main()
