#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –≤–∏–¥–µ–æ
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from media_processor import get_media_processor
    from drive_sync import get_drive_sync
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def get_google_services(env):
    """–ü–æ–ª—É—á–∞–µ—Ç Google —Å–µ—Ä–≤–∏—Å—ã."""
    from google.auth.transport.requests import Request as GoogleRequest
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from googleapiclient.discovery import build
    
    # Scopes –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    SCOPES = [
        "https://www.googleapis.com/auth/calendar.readonly",
        "https://www.googleapis.com/auth/drive",
        "https://www.googleapis.com/auth/drive.file",
    ]
    
    creds = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if os.path.exists('tokens/personal_token.json'):
        creds = Credentials.from_authorized_user_file('tokens/personal_token.json', SCOPES)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫—Ä–µ–¥–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(GoogleRequest())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'creds/client_secret.json', SCOPES)
            creds = flow.run_local_server(port=0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–¥—ã
        os.makedirs('tokens', exist_ok=True)
        with open('tokens/personal_token.json', 'w') as token:
            token.write(creds.to_json())
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    calendar_service = build('calendar', 'v3', credentials=creds)
    drive_service = build('drive', 'v3', credentials=creds)
    
    return calendar_service, drive_service

def test_video_compression():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –≤–∏–¥–µ–æ."""
    load_dotenv()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º Google —Å–µ—Ä–≤–∏—Å—ã
        print("üîç –ü–æ–ª—É—á–∞–µ–º Google —Å–µ—Ä–≤–∏—Å—ã...")
        cal_svc, drive_svc = get_google_services({})
        
        if not drive_svc:
            print("‚ùå Google Drive —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        print("‚úÖ Google Drive —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        parent_id = os.getenv('PERSONAL_DRIVE_PARENT_ID')
        sync_root = os.getenv('MEDIA_SYNC_ROOT', 'data/synced')
        
        if not parent_id:
            print("‚ùå PERSONAL_DRIVE_PARENT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return
        
        print(f"üìÅ PERSONAL_DRIVE_PARENT_ID: {parent_id}")
        print(f"üìÅ MEDIA_SYNC_ROOT: {sync_root}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π –≤–∏–¥–µ–æ
        print("\nüîß –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π –≤–∏–¥–µ–æ...")
        drive_sync = get_drive_sync(drive_svc, sync_root)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
        compression_configs = [
            ("H.264 Medium", True, "medium", "h264"),
            ("H.264 High", True, "high", "h264"),
            ("H.265 Medium", True, "medium", "h265"),
            ("VP9 Medium", True, "medium", "vp9"),
        ]
        
        for config_name, compression, quality, codec in compression_configs:
            print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {config_name}")
            print(f"   –ö–æ–º–ø—Ä–µ—Å—Å–∏—è: {compression}, –ö–∞—á–µ—Å—Ç–≤–æ: {quality}, –ö–æ–¥–µ–∫: {codec}")
            
            media_processor = get_media_processor(
                drive_svc, 
                'mp3', 
                video_compression=compression,
                video_quality=quality,
                video_codec=codec
            )
            
            if not media_processor:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å")
                continue
            
            print("‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
            print(f"\nüîç –ò—â–µ–º –ø–∞–ø–∫–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏...")
            query = f"'{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
            folders_result = drive_svc.files().list(
                q=query,
                fields="files(id,name,createdTime)",
                orderBy="createdTime desc"
            ).execute()
            
            folders = folders_result.get("files", [])
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(folders)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ
            for folder in folders[:1]:
                folder_id = folder['id']
                folder_name = folder['name']
                
                print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {folder_name}")
                
                try:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                    print(f"  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É...")
                    sync_results = drive_sync.sync_folder(
                        folder_id, 
                        folder_name,
                        file_types=['video/*']
                    )
                    
                    print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
                    print(f"    - –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sync_results['files_found']}")
                    print(f"    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {sync_results['files_synced']}")
                    print(f"    - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {sync_results['files_skipped']}")
                    print(f"    - –û—à–∏–±–∫–∏: {len(sync_results['errors'])}")
                    
                    if sync_results['files_synced'] > 0:
                        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                        local_path = drive_sync.get_local_path(folder_name)
                        print(f"  üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {local_path}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                        print(f"  üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã...")
                        media_results = media_processor.process_folder(
                            folder_id, 
                            folder_name, 
                            local_path
                        )
                        
                        print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                        print(f"    - –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {media_results['files_found']}")
                        print(f"    - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {media_results['files_processed']}")
                        print(f"    - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {media_results['files_skipped']}")
                        print(f"    - –û—à–∏–±–∫–∏: {len(media_results['errors'])}")
                        print(f"    - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {media_results['processing_time']:.2f} —Å–µ–∫")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                        if media_results['errors']:
                            print(f"  ‚ùå –û—à–∏–±–∫–∏:")
                            for error in media_results['errors']:
                                print(f"    - {error}")
                        
                        break  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}")
                    import traceback
                    traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_video_compression()
