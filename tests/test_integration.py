#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å AudioProcessor"""

import os
import sys
import time
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent / 'src'))

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–û–í–´–• –ú–ï–¢–û–î–û–í –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 70)
    
    # –ê—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    audio_file = "data/temp_audio/–ê–ª—å—Ñ–∞ –Ω–µ–∏–ø–æ—Ç–µ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–∏—á–∫–∞ 01.08.2025 —á2_compressed_prepared_compressed.wav"
    
    if not os.path.exists(audio_file):
        print(f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AudioProcessor
        from audio_processor import AudioProcessor
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é AudioProcessor...")
        processor = AudioProcessor()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        methods = ['energy', 'intonation', 'emotion', 'adaptive']
        
        results = {}
        
        for method in methods:
            print(f"\nüéµ –¢–µ—Å—Ç–∏—Ä—É—é –º–µ—Ç–æ–¥: {method.upper()}")
            print("-" * 50)
            
            try:
                start_time = time.time()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
                result = processor.process_audio_file_with_advanced_segmentation(audio_file, method)
                
                processing_time = time.time() - start_time
                
                if result:
                    results[method] = {
                        'success': True,
                        'time': processing_time,
                        'segments': result.get('total_segments', 0),
                        'speakers': len(result.get('speakers', {})),
                        'total_text_length': sum(len(t.get('text', '')) for t in result.get('raw_transcriptions', [])),
                        'segmentation_method': result.get('segmentation_method', 'unknown')
                    }
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—Ä–µ–º—è: {processing_time:.2f}—Å")
                    print(f"üìä –°–µ–≥–º–µ–Ω—Ç–æ–≤: {results[method]['segments']}")
                    print(f"üë• –°–ø–∏–∫–µ—Ä–æ–≤: {results[method]['speakers']}")
                    print(f"üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {results[method]['total_text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    save_method_result(audio_file, method, result)
                    
                else:
                    results[method] = {
                        'success': False,
                        'error': '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π',
                        'time': processing_time
                    }
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                    
            except Exception as e:
                results[method] = {
                    'success': False,
                    'error': str(e),
                    'time': 0
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print_comparison_summary(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_overall_results(audio_file, results)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def save_method_result(audio_file: str, method: str, result: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        base_name = os.path.splitext(os.path.basename(audio_file))[0]
        output_dir = Path(f'data/audio_processing/{base_name}_integration_test/{method}')
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
        json_file = output_dir / 'result.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            # –£–±–∏—Ä–∞–µ–º numpy –º–∞—Å—Å–∏–≤—ã –¥–ª—è JSON
            json_result = {}
            for key, value in result.items():
                if key == 'raw_transcriptions':
                    json_result[key] = []
                    for trans in value:
                        json_trans = {
                            'segment': trans.get('segment'),
                            'start_time': trans.get('start_time'),
                            'end_time': trans.get('end_time'),
                            'duration': trans.get('duration'),
                            'text': trans.get('text'),
                            'segmentation_method': trans.get('segmentation_method')
                        }
                        json_result[key].append(json_trans)
                elif key == 'speakers':
                    json_result[key] = {}
                    for speaker, segments in value.items():
                        json_result[key][speaker] = []
                        for seg in segments:
                            json_seg = {
                                'segment': seg.get('segment'),
                                'start_time': seg.get('start_time'),
                                'end_time': seg.get('end_time'),
                                'duration': seg.get('duration'),
                                'text': seg.get('text')
                            }
                            json_result[key][speaker].append(json_seg)
                else:
                    json_result[key] = value
            
            json.dump(json_result, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ TXT
        txt_file = output_dir / 'transcript.txt'
        with open(txt_file, 'w', encoding='utf-8') as f:
            f.write(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {method.upper()}\n")
            f.write(f"–§–∞–π–ª: {audio_file}\n")
            f.write(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processed_at', '')}\n")
            f.write(f"–°–µ–≥–º–µ–Ω—Ç–æ–≤: {result.get('total_segments', 0)}\n")
            f.write(f"–°–ø–∏–∫–µ—Ä–æ–≤: {len(result.get('speakers', {}))}\n")
            f.write("-" * 50 + "\n\n")
            
            for trans in result.get('raw_transcriptions', []):
                f.write(f"[{trans.get('start_time', 0)}ms - {trans.get('end_time', 0)}ms] ")
                f.write(f"–°–µ–≥–º–µ–Ω—Ç {trans.get('segment', '?')} ({trans.get('segmentation_method', 'unknown')})\n")
                f.write(f"{trans.get('text', '')}\n\n")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_dir}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {method}: {e}")

def save_overall_results(audio_file: str, results: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        base_name = os.path.splitext(os.path.basename(audio_file))[0]
        output_dir = Path(f'data/audio_processing/{base_name}_integration_test')
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
        json_file = output_dir / 'overall_results.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ Markdown
        md_file = output_dir / 'overall_results.md'
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏\n\n")
            f.write(f"–§–∞–π–ª: {audio_file}\n")
            f.write(f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤\n\n")
            f.write("| –ú–µ—Ç–æ–¥ | –°—Ç–∞—Ç—É—Å | –í—Ä–µ–º—è (—Å) | –°–µ–≥–º–µ–Ω—Ç–æ–≤ | –°–ø–∏–∫–µ—Ä–æ–≤ | –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ |\n")
            f.write("|-------|---------|-----------|-----------|----------|--------------|\n")
            
            for method, data in results.items():
                if data['success']:
                    f.write(f"| {method.upper()} | ‚úÖ | {data['time']:.2f} | {data['segments']} | {data['speakers']} | {data['total_text_length']} |\n")
                else:
                    f.write(f"| {method.upper()} | ‚ùå | - | - | - | - |\n")
            
            f.write("\n## –î–µ—Ç–∞–ª–∏\n\n")
            
            for method, data in results.items():
                f.write(f"### {method.upper()}\n")
                f.write(f"- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if data['success'] else '‚ùå –û—à–∏–±–∫–∞'}\n")
                
                if data['success']:
                    f.write(f"- **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {data['time']:.2f}—Å\n")
                    f.write(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤**: {data['segments']}\n")
                    f.write(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤**: {data['speakers']}\n")
                    f.write(f"- **–û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞**: {data['total_text_length']} —Å–∏–º–≤–æ–ª–æ–≤\n")
                    f.write(f"- **–ú–µ—Ç–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏**: {data['segmentation_method']}\n")
                else:
                    f.write(f"- **–û—à–∏–±–∫–∞**: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n")
                
                f.write("\n")
        
        print(f"üíæ –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_dir}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def print_comparison_summary(results: dict):
    """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 70)
    
    successful_methods = [r for r in results.values() if r['success']]
    failed_methods = [r for r in results.values() if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(successful_methods)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(failed_methods)}")
    
    if successful_methods:
        print("\nüèÜ –†–ï–ô–¢–ò–ù–ì –ü–û –°–ö–û–†–û–°–¢–ò:")
        sorted_by_speed = sorted(successful_methods, key=lambda x: x['time'])
        for i, method in enumerate(sorted_by_speed, 1):
            method_name = [k for k, v in results.items() if v == method][0]
            print(f"{i}. {method_name.upper()}: {method['time']:.2f}—Å")
        
        print("\nüìä –†–ï–ô–¢–ò–ù–ì –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–ï–ì–ú–ï–ù–¢–û–í:")
        sorted_by_segments = sorted(successful_methods, key=lambda x: x['segments'], reverse=True)
        for i, method in enumerate(sorted_by_segments, 1):
            method_name = [k for k, v in results.items() if v == method][0]
            print(f"{i}. {method_name.upper()}: {method['segments']} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        print("\nüìù –†–ï–ô–¢–ò–ù–ì –ü–û –î–õ–ò–ù–ï –¢–ï–ö–°–¢–ê:")
        sorted_by_text = sorted(successful_methods, key=lambda x: x['total_text_length'], reverse=True)
        for i, method in enumerate(sorted_by_text, 1):
            method_name = [k for k, v in results.items() if v == method][0]
            print(f"{i}. {method_name.upper()}: {method['total_text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if failed_methods:
        print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ú–ï–¢–û–î–´:")
        for method_name, method_data in results.items():
            if not method_data['success']:
                print(f"- {method_name.upper()}: {method_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    print(f"\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: data/audio_processing/[–∏–º—è_—Ñ–∞–π–ª–∞]_integration_test/")

if __name__ == "__main__":
    test_integration()
