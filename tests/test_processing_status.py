#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

from processing_status import ProcessingStatus

def test_processing_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞
    test_folder = "/Users/azg/Downloads/01 - yazydzhi@gmail.com/2025-08-21 18-00 –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–∞–ø–∫–∏: {test_folder}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    status = ProcessingStatus(test_folder)
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    status.print_summary()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    mkv_file = "2025-08-13 13-10-14 (1).mkv"
    mp4_file = "2025-08-13 13-10-14 (1)_compressed.mp4"
    mp3_file = "2025-08-13 13-10-14 (1)_compressed.mp3"
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {mkv_file}")
    mkv_status = status.get_file_status(mkv_file)
    if mkv_status:
        print(f"   –°—Ç–∞—Ç—É—Å: {mkv_status['status']}")
        print(f"   –¢–∏–ø: {mkv_status['type']}")
        print(f"   –†–∞–∑–º–µ—Ä: {mkv_status['size']} –±–∞–π—Ç")
        if mkv_status.get('processing_steps'):
            print("   –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for step in mkv_status['processing_steps']:
                print(f"     - {step['step']}: {step.get('timestamp', 'N/A')}")
    else:
        print("   –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {mp4_file}")
    mp4_status = status.get_file_status(mp4_file)
    if mp4_status:
        print(f"   –°—Ç–∞—Ç—É—Å: {mp4_status['status']}")
        print(f"   –¢–∏–ø: {mp4_status['type']}")
        print(f"   –†–∞–∑–º–µ—Ä: {mp4_status['size']} –±–∞–π—Ç")
        if mp4_status.get('processing_steps'):
            print("   –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for step in mp4_status['processing_steps']:
                print(f"     - {step['step']}: {step.get('timestamp', 'N/A')}")
    else:
        print("   –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {mp3_file}")
    mp3_status = status.get_file_status(mp3_file)
    if mp3_status:
        print(f"   –°—Ç–∞—Ç—É—Å: {mp3_status['status']}")
        print(f"   –¢–∏–ø: {mp3_status['type']}")
        print(f"   –†–∞–∑–º–µ—Ä: {mp3_status['size']} –±–∞–π—Ç")
        if mp3_status.get('processing_steps'):
            print("   –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for step in mp3_status['processing_steps']:
                print(f"     - {step['step']}: {step.get('timestamp', 'N/A')}")
    else:
        print("   –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ MKV —Ñ–∞–π–ª
    print(f"\n‚úÖ MKV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–∏–¥–µ–æ): {status.is_file_processed(mkv_file, 'video_compression')}")
    print(f"‚úÖ MKV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∞—É–¥–∏–æ): {status.is_file_processed(mkv_file, 'audio_extraction')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ MP4 —Ñ–∞–π–ª
    print(f"‚úÖ MP4 —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–∏–¥–µ–æ): {status.is_file_processed(mp4_file, 'video_compression')}")
    print(f"‚úÖ MP4 —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∞—É–¥–∏–æ): {status.is_file_processed(mp4_file, 'audio_extraction')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ MP3 —Ñ–∞–π–ª
    print(f"‚úÖ MP3 —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∞—É–¥–∏–æ): {status.is_file_processed(mp3_file, 'audio_extraction')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞
    status_file = Path(test_folder) / 'üìä processing_status.json'
    if status_file.exists():
        print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞:")
        import json
        with open(status_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            print(json.dumps(data, ensure_ascii=False, indent=2))
    else:
        print(f"\n‚ùå –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {status_file}")

if __name__ == "__main__":
    test_processing_status()
