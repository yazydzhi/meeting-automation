#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Notion API –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import requests
import json
from datetime import datetime

def test_notion_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Notion API"""
    
    print("üîç –¢–ï–°–¢ –°–û–ï–î–ò–ù–ï–ù–ò–Ø –° NOTION")
    print("=" * 50)
    
    # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\nüìã –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        if not notion_token:
            print("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
            
        if not database_id:
            print("‚ùå NOTION_DATABASE_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
            
        print(f"‚úÖ –¢–æ–∫–µ–Ω: {'*' * 10}{notion_token[-4:] if notion_token else '–ù–ï–¢'}")
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ID: {database_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    print("\nüîë –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
    try:
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json",
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        response = requests.get("https://api.notion.com/v1/users/me", headers=headers)
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   Email: {user_data.get('person', {}).get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False
    
    # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        response = requests.get(f"https://api.notion.com/v1/databases/{database_id}", headers=headers)
        
        if response.status_code == 200:
            db_data = response.json()
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {db_data.get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
            description = db_data.get('description', [])
            if description and len(description) > 0:
                desc_content = description[0].get('text', {}).get('content', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc_content}")
            else:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            properties = db_data.get('properties', {})
            print(f"   –°–≤–æ–π—Å—Ç–≤–∞: {list(properties.keys())}")
            
        else:
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # –≠—Ç–∞–ø 4: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüìù –≠–¢–ê–ü 4: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    try:
        test_page_data = {
            "parent": {"database_id": database_id},
            "properties": {
                "Name": {
                    "title": [
                        {
                            "type": "text",
                            "text": {
                                "content": f"–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            }
                        }
                    ]
                }
            }
        }
        
        response = requests.post(
            "https://api.notion.com/v1/pages",
            headers=headers,
            json=test_page_data
        )
        
        if response.status_code == 200:
            page_data = response.json()
            page_id = page_data["id"]
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            print(f"   ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("   üóëÔ∏è –£–¥–∞–ª—è—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            delete_response = requests.delete(f"https://api.notion.com/v1/blocks/{page_id}", headers=headers)
            if delete_response.status_code == 200:
                print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {delete_response.status_code}")
                
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_page_data, indent=2, ensure_ascii=False)}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False
    
    # –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    print("\nüìö –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
    try:
        response = requests.post(
            f"https://api.notion.com/v1/databases/{database_id}/query",
            headers=headers,
            json={"page_size": 5}
        )
        
        if response.status_code == 200:
            query_data = response.json()
            pages = query_data.get('results', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages)}")
            
            for i, page in enumerate(pages[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                title = page.get('properties', {}).get('Name', {}).get('title', [{}])[0].get('text', {}).get('content', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                created_time = page.get('created_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   {i+1}. {title} (—Å–æ–∑–¥–∞–Ω–∞: {created_time[:10]})")
                
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    return True

if __name__ == "__main__":
    test_notion_connection()
