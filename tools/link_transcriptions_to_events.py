#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏.
"""

import os
import sys
import sqlite3
import re
from datetime import datetime

def link_transcriptions_to_events():
    """–°–≤—è–∑—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º."""
    
    try:
        print("üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏...")
        print("=" * 50)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/system_state.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±–µ–∑ event_id
        cursor.execute("""
            SELECT id, file_path, transcript_file, status
            FROM processed_transcriptions
            WHERE event_id IS NULL
            ORDER BY processed_at DESC
        """)
        
        transcriptions = cursor.fetchall()
        print(f"üìä –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –±–µ–∑ event_id: {len(transcriptions)}")
        
        if not transcriptions:
            print("‚úÖ –í—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏!")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        cursor.execute("""
            SELECT event_id, event_title, event_start_time, account_type
            FROM processed_events
            ORDER BY event_start_time DESC
        """)
        
        events = cursor.fetchall()
        print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ: {len(events)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        events_dict = {}
        for event in events:
            event_id, event_title, event_start_time, account_type = event
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            # 1. –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è (–æ—á–∏—â–µ–Ω–Ω–æ–º—É)
            clean_title = re.sub(r'[^\w\s]', '', event_title.lower()).strip()
            events_dict[clean_title] = event_id
            
            # 2. –ü–æ –¥–∞—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if event_start_time:
                try:
                    date_str = event_start_time[:10]  # YYYY-MM-DD
                    events_dict[date_str] = event_id
                except:
                    pass
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        linked_count = 0
        
        for transcription in transcriptions:
            transcription_id, file_path, transcript_file, status = transcription
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            # –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏: /Users/azg/Downloads/01 - yazydzhi@gmail.com/2025-08-21 16-00 –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞/2025-08-21 18-00 –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞_compressed.mp3
            
            # –ò—â–µ–º –¥–∞—Ç—É –≤ –ø—É—Ç–∏
            date_match = re.search(r'(\d{4}-\d{2}-\d{2})', file_path)
            if date_match:
                date_str = date_match.group(1)
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø—É—Ç–∏
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏
                path_parts = file_path.split('/')
                if len(path_parts) > 1:
                    folder_name = path_parts[-2]  # –ü–∞–ø–∫–∞ —Å —Å–æ–±—ã—Ç–∏–µ–º
                    
                    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                    clean_folder_name = re.sub(r'\d{4}-\d{2}-\d{2}\s+\d{2}-\d{2}\s*', '', folder_name).strip()
                    clean_folder_name = re.sub(r'[^\w\s]', '', clean_folder_name.lower()).strip()
                    
                    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ –¥–∞—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                    found_event_id = None
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ –¥–∞—Ç–µ
                    if date_str in events_dict:
                        found_event_id = events_dict[date_str]
                    
                    # –ó–∞—Ç–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if not found_event_id and clean_folder_name in events_dict:
                        found_event_id = events_dict[clean_folder_name]
                    
                    if found_event_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                        cursor.execute('''
                            UPDATE processed_transcriptions 
                            SET event_id = ?
                            WHERE id = ?
                        ''', (found_event_id, transcription_id))
                        
                        linked_count += 1
                        print(f"  ‚úÖ {file_path} -> {found_event_id}")
                    else:
                        print(f"  ‚ùå {file_path} -> —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print(f"  ‚ö†Ô∏è {file_path} -> –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É—Ç–∏")
            else:
                print(f"  ‚ö†Ô∏è {file_path} -> –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É—Ç–∏")
        
        conn.commit()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:")
        print(f"  ‚úÖ –°–≤—è–∑–∞–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {linked_count}")
        print(f"  ‚ùå –ù–µ —Å–≤—è–∑–∞–Ω–æ: {len(transcriptions) - linked_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {e}")
        return False

if __name__ == "__main__":
    success = link_transcriptions_to_events()
    
    if success:
        print("\n‚úÖ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
