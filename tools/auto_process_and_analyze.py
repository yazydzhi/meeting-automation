#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º:
1. –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ MP3
3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Notion
"""

import os
import sys
import time
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.audio_processor import AudioProcessor
from src.transcript_analyzer import TranscriptAnalyzer
from src.config_manager import ConfigManager

def compress_video(input_path: str, output_path: str, quality: str = 'medium', codec: str = 'h264') -> bool:
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞."""
    try:
        print(f"üé• –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ {os.path.basename(input_path)}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        if quality == 'low':
            crf = '28'  # –í—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'ultrafast'
        elif quality == 'medium':
            crf = '23'  # –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'fast'
        elif quality == 'high':
            crf = '18'  # –ù–∏–∑–∫–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'medium'
        else:  # ultra
            crf = '15'  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'slow'
        
        video_cmd = [
            'ffmpeg', '-i', input_path,
            '-c:v', 'libx264',
            '-crf', crf,
            '-preset', preset,
            '-c:a', 'aac',
            '-b:a', '128k',
            '-movflags', '+faststart',
            '-y',
            output_path
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(video_cmd)}")
        
        result = subprocess.run(video_cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {os.path.basename(output_path)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {e}")
        return False

def extract_audio(input_path: str, output_path: str, quality: str = 'medium') -> bool:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞."""
    try:
        print(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ {os.path.basename(input_path)}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if quality == 'low':
            bitrate = '64k'
            sample_rate = '22050'
        elif quality == 'medium':
            bitrate = '128k'
            sample_rate = '44100'
        else:  # high
            bitrate = '256k'
            sample_rate = '48000'
        
        audio_cmd = [
            'ffmpeg',
            '-i', input_path,
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-acodec', 'libmp3lame',
            '-ab', bitrate,
            '-ar', sample_rate,
            '-y',
            output_path
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(audio_cmd)}")
        
        result = subprocess.run(audio_cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {os.path.basename(output_path)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def transcribe_audio(audio_path: str, output_dir: Path, config: ConfigManager) -> Optional[Dict[str, Any]]:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª."""
    try:
        print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ {os.path.basename(audio_path)}...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioProcessor
        audio_processor = AudioProcessor(config)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        result = audio_processor.process_audio_file(audio_path, 'md')
        
        if result and result.get('speakers'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            transcript_name = Path(audio_path).stem + "_transcript.md"
            transcript_path = output_dir / transcript_name
            
            with open(transcript_path, 'w', encoding='utf-8') as f:
                f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {os.path.basename(audio_path)}\n\n")
                f.write(f"**–§–∞–π–ª:** {os.path.basename(audio_path)}\n")
                f.write(f"**–†–∞–∑–º–µ—Ä:** {result.get('file_size', 0)} –±–∞–π—Ç\n")
                f.write(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {result.get('total_duration', 0)} –º—Å\n")
                f.write(f"**–°–µ–≥–º–µ–Ω—Ç–æ–≤:** {result.get('total_segments', 0)}\n")
                f.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(result.get('speakers', {}))}\n")
                f.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {result.get('processed_at', '')}\n\n")
                f.write("---\n\n")
                
                for speaker, segments in result['speakers'].items():
                    f.write(f"## {speaker}\n\n")
                    for seg in segments:
                        start_s = seg['start_time'] / 1000
                        end_s = seg['end_time'] / 1000
                        f.write(f"**[{start_s:.1f}s - {end_s:.1f}s]** {seg['text']}\n\n")
            
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {transcript_name}")
            return {
                'transcript_path': str(transcript_path),
                'result': result
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

def analyze_transcript_and_create_notion(transcript_path: str, meeting_title: str, meeting_date: str, config: ConfigManager) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion."""
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ OpenAI...")
        
        # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        with open(transcript_path, 'r', encoding='utf-8') as f:
            transcript_text = f.read()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TranscriptAnalyzer
        api_key = config.config.get('openai', {}).get('api_key')
        model = config.config.get('openai', {}).get('analysis_model', 'gpt-4o-mini')
        
        if not api_key:
            print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        analyzer = TranscriptAnalyzer(api_key, model)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        analysis_result = analyzer.analyze_meeting_transcript(
            transcript_text,
            meeting_title,
            meeting_date
        )
        
        if analysis_result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            analysis_file = transcript_path.replace('_transcript.md', '_analysis.json')
            if analyzer.save_analysis_to_file(analysis_result, analysis_file):
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(analysis_file)}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
            notion_data = analyzer.create_notion_page_data(analysis_result)
            if notion_data:
                notion_file = transcript_path.replace('_transcript.md', '_notion_data.json')
                import json
                with open(notion_file, 'w', encoding='utf-8') as f:
                    json.dump(notion_data, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion —Å–æ–∑–¥–∞–Ω—ã: {os.path.basename(notion_file)}")
            
            return {
                'analysis_result': analysis_result,
                'notion_data': notion_data,
                'analysis_file': analysis_file,
                'notion_file': notion_file
            }
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return None

def auto_process_video_full_flow(video_path: str, meeting_title: str, meeting_date: str, 
                                config_file: str = 'env.work', quality: str = 'medium', 
                                codec: str = 'h264') -> Dict[str, Any]:
    """–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."""
    
    results = {
        'video_compressed': False,
        'audio_extracted': False,
        'transcript_created': False,
        'analysis_completed': False,
        'notion_data_created': False,
        'files_created': [],
        'errors': []
    }
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = ConfigManager(config_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        try:
            subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            error_msg = "ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ."
            print(f"‚ùå {error_msg}")
            results['errors'].append(error_msg)
            return results
        
        video_path = Path(video_path)
        if not video_path.exists():
            error_msg = f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}"
            print(f"‚ùå {error_msg}")
            results['errors'].append(error_msg)
            return results
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
        if 'compressed' in video_path.name.lower():
            error_msg = f"–§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {video_path.name}"
            print(f"‚ùå {error_msg}")
            results['errors'].append(error_msg)
            return results
        
        output_dir = video_path.parent
        
        # 1. –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
        video_output_name = video_path.stem + "_compressed.mp4"
        video_output_path = output_dir / video_output_name
        
        if not video_output_path.exists():
            if compress_video(str(video_path), str(video_output_path), quality, codec):
                results['video_compressed'] = True
                results['files_created'].append(str(video_output_path))
            else:
                results['errors'].append("–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ")
        else:
            print(f"‚è≠Ô∏è –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {video_output_name}")
            results['video_compressed'] = True
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        audio_output_name = video_path.stem + "_compressed.mp3"
        audio_output_path = output_dir / audio_output_name
        
        if not audio_output_path.exists():
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if extract_audio(str(video_path), str(audio_output_path), quality):
                results['audio_extracted'] = True
                results['files_created'].append(str(audio_output_path))
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                if results['video_compressed']:
                    print(f"üîÑ –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ...")
                    if extract_audio(str(video_output_path), str(audio_output_path), quality):
                        results['audio_extracted'] = True
                        results['files_created'].append(str(audio_output_path))
                    else:
                        results['errors'].append("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ")
                else:
                    results['errors'].append("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        else:
            print(f"‚è≠Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_output_name}")
            results['audio_extracted'] = True
        
        # 3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        transcript_name = video_path.stem + "_transcript.md"
        transcript_path = output_dir / transcript_name
        
        if not transcript_path.exists() and results['audio_extracted']:
            transcript_result = transcribe_audio(str(audio_output_path), output_dir, config)
            if transcript_result:
                results['transcript_created'] = True
                results['files_created'].append(transcript_result['transcript_path'])
            else:
                results['errors'].append("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        elif transcript_path.exists():
            print(f"‚è≠Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {transcript_name}")
            results['transcript_created'] = True
        else:
            print(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
        if results['transcript_created'] and meeting_title and meeting_date:
            analysis_result = analyze_transcript_and_create_notion(
                str(transcript_path), meeting_title, meeting_date, config
            )
            if analysis_result:
                results['analysis_completed'] = True
                results['notion_data_created'] = True
                results['files_created'].extend([
                    analysis_result['analysis_file'],
                    analysis_result['notion_file']
                ])
            else:
                results['errors'].append("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üé¨ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {'‚úÖ' if results['video_compressed'] else '‚ùå'}")
        print(f"üéµ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {'‚úÖ' if results['audio_extracted'] else '‚ùå'}")
        print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {'‚úÖ' if results['transcript_created'] else '‚ùå'}")
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {'‚úÖ' if results['analysis_completed'] else '‚ùå'}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion: {'‚úÖ' if results['notion_data_created'] else '‚ùå'}")
        
        if results['files_created']:
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results['files_created'])}")
            for file_path in results['files_created']:
                print(f"   üìÑ {Path(file_path).name}")
        
        if results['errors']:
            print(f"‚ùå –û—à–∏–±–∫–∏: {len(results['errors'])}")
            for error in results['errors']:
                print(f"   ‚ö†Ô∏è {error}")
        
        return results
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"‚ùå {error_msg}")
        results['errors'].append(error_msg)
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø–æ–ª–Ω—ã–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º')
    parser.add_argument('video_path', help='–ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É')
    parser.add_argument('--title', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--date', required=True, help='–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ (YYYY-MM-DD)')
    parser.add_argument('--config', default='env.work', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--quality', choices=['low', 'medium', 'high'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--codec', choices=['h264', 'h265'], default='h264',
                       help='–ö–æ–¥–µ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ')
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    results = auto_process_video_full_flow(
        args.video_path,
        args.title,
        args.date,
        args.config,
        args.quality,
        args.codec
    )
    
    if results.get('errors'):
        print(f"\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
