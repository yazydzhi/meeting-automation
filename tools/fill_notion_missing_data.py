#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion.
–ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞—Ç—ã, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite.
"""

import os
import sys
import sqlite3
import requests
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fill_notion_missing_data(dry_run=True):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        print("üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion...")
        print("=" * 70)
        print(f"üîç –†–µ–∂–∏–º: {'–¢–ï–°–¢–û–í–´–ô (dry run)' if dry_run else '–†–ï–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï'}")
        print()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/system_state.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ processed_events
        cursor.execute("""
            SELECT event_id, event_title, event_start_time, event_end_time, 
                   attendees, meeting_link, calendar_type, account_type
            FROM processed_events
            ORDER BY event_start_time DESC
        """)
        
        db_events = cursor.fetchall()
        print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ SQLite: {len(db_events)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ event_id
        db_events_dict = {}
        for event in db_events:
            event_id, event_title, event_start_time, event_end_time, attendees, meeting_link, calendar_type, account_type = event
            db_events_dict[event_id] = {
                'title': event_title,
                'start_time': event_start_time,
                'end_time': event_end_time,
                'attendees': attendees,
                'meeting_link': meeting_link,
                'calendar_type': calendar_type,
                'account_type': account_type
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Notion
        all_pages = []
        has_more = True
        start_cursor = None
        
        while has_more:
            url = f"https://api.notion.com/v1/databases/{database_id}/query"
            payload = {
                "page_size": 100
            }
            if start_cursor:
                payload["start_cursor"] = start_cursor
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            all_pages.extend(data['results'])
            has_more = data['has_more']
            start_cursor = data.get('next_cursor')
        
        print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü –≤ Notion: {len(all_pages)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        pages_to_update = []
        
        for page in all_pages:
            page_id = page['id']
            properties = page['properties']
            
            # –ü–æ–ª—É—á–∞–µ–º Event ID
            event_id = ""
            if 'Event ID' in properties:
                event_id_prop = properties['Event ID']
                if event_id_prop['type'] == 'rich_text' and event_id_prop['rich_text']:
                    event_id = event_id_prop['rich_text'][0]['text']['content']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å Event ID –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ SQLite
            if event_id and event_id in db_events_dict:
                db_event = db_events_dict[event_id]
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = ""
                if 'Name' in properties:
                    title_prop = properties['Name']
                    if title_prop['type'] == 'title' and title_prop['title']:
                        title = title_prop['title'][0]['text']['content']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                updates_needed = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                notion_date = None
                if 'Date' in properties:
                    date_prop = properties['Date']
                    if date_prop['type'] == 'date' and date_prop['date']:
                        notion_date = date_prop['date']['start']
                
                if not notion_date and db_event['start_time']:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ISO —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É –¥–ª—è Notion
                    try:
                        start_dt = datetime.fromisoformat(db_event['start_time'].replace('Z', '+00:00'))
                        updates_needed['Date'] = {
                            "date": {
                                "start": start_dt.isoformat()
                            }
                        }
                    except:
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                notion_attendees = ""
                if 'Attendees' in properties:
                    attendees_prop = properties['Attendees']
                    if attendees_prop['type'] == 'rich_text' and attendees_prop['rich_text']:
                        notion_attendees = attendees_prop['rich_text'][0]['text']['content']
                
                if not notion_attendees and db_event['attendees']:
                    updates_needed['Attendees'] = {
                        "rich_text": [
                            {
                                "text": {
                                    "content": db_event['attendees']
                                }
                            }
                        ]
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
                notion_meeting_link = ""
                if 'Meeting Link' in properties:
                    meeting_link_prop = properties['Meeting Link']
                    if meeting_link_prop['type'] == 'url' and meeting_link_prop['url']:
                        notion_meeting_link = meeting_link_prop['url']
                
                if not notion_meeting_link and db_event['meeting_link']:
                    updates_needed['Meeting Link'] = {
                        "url": db_event['meeting_link']
                    }
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if updates_needed:
                    pages_to_update.append({
                        'page_id': page_id,
                        'title': title,
                        'event_id': event_id,
                        'updates': updates_needed
                    })
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(pages_to_update)} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print()
        
        if not pages_to_update:
            print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –∏–º–µ—é—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        print("üìã –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print("-" * 70)
        for i, page in enumerate(pages_to_update[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            updates_list = ', '.join(page['updates'].keys())
            print(f"{i:2d}. {page['title'][:40]:<40} | {updates_list}")
        
        if len(pages_to_update) > 10:
            print(f"    ... –∏ –µ—â–µ {len(pages_to_update) - 10} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print()
        
        if dry_run:
            print("üîç –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python tools/fill_notion_missing_data.py --execute")
            return True
        
        # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("üîß –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion...")
        updated_count = 0
        errors = []
        
        for i, page in enumerate(pages_to_update, 1):
            try:
                page_id = page['page_id']
                title = page['title']
                updates = page['updates']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                url = f"https://api.notion.com/v1/pages/{page_id}"
                payload = {
                    "properties": updates
                }
                
                response = requests.patch(url, headers=headers, json=payload)
                response.raise_for_status()
                
                updated_count += 1
                updates_list = ', '.join(updates.keys())
                print(f"‚úÖ {i:2d}/{len(pages_to_update)} –û–±–Ω–æ–≤–ª–µ–Ω–∞: {title[:40]} | {updates_list}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {page['title']}: {e}"
                errors.append(error_msg)
                print(f"‚ùå {i:2d}/{len(pages_to_update)} {error_msg}")
        
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        
        if errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in errors:
                print(f"  - {error}")
        
        conn.close()
        return len(errors) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = "--execute" not in sys.argv
    
    if dry_run:
        print("üîç –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (dry run)")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --execute")
        print()
    
    success = fill_notion_missing_data(dry_run=dry_run)
    
    if success:
        print("\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
