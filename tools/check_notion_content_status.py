#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion.
"""

import os
import sys
import sqlite3
import requests
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def check_notion_content_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    notion_database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not notion_database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/system_state.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            cursor.execute('''
                SELECT 
                    pe.event_id,
                    pe.event_title,
                    pe.event_start_time,
                    pe.event_end_time,
                    pe.attendees,
                    pe.meeting_link,
                    pe.calendar_type,
                    pe.account_type,
                    nss.page_id,
                    nss.page_url,
                    nss.sync_status
                FROM processed_events pe
                LEFT JOIN notion_sync_status nss ON pe.event_id = nss.event_id
                WHERE nss.page_id IS NOT NULL
                ORDER BY pe.event_start_time DESC
            ''')
            
            events = cursor.fetchall()
            
            if not events:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
                return False
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            headers = {
                "Authorization": f"Bearer {notion_token}",
                "Notion-Version": "2022-06-28"
            }
            
            for i, event in enumerate(events, 1):
                event_id, event_title, start_time, end_time, attendees, meeting_link, calendar_type, account_type, page_id, page_url, sync_status = event
                
                print(f"üìã {i}. {event_title}")
                print(f"   üÜî Event ID: {event_id}")
                print(f"   üìÖ –í—Ä–µ–º—è: {start_time} - {end_time}")
                print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees[:50] + '...' if attendees and len(attendees) > 50 else attendees}")
                print(f"   üîó –°—Å—ã–ª–∫–∞: {meeting_link[:50] + '...' if meeting_link and len(meeting_link) > 50 else meeting_link}")
                print(f"   üìÑ Page ID: {page_id}")
                print(f"   üîÑ –°—Ç–∞—Ç—É—Å: {sync_status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_url = f"https://api.notion.com/v1/pages/{page_id}"
                    response = requests.get(page_url, headers=headers)
                    response.raise_for_status()
                    page_data = response.json()
                    
                    properties = page_data.get('properties', {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    print(f"   üìù –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Date
                    date_prop = properties.get('Date', {})
                    if date_prop.get('date'):
                        date_value = date_prop['date']
                        print(f"      ‚úÖ Date: {date_value.get('start', 'N/A')} - {date_value.get('end', 'N/A')}")
                    else:
                        print(f"      ‚ùå Date: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Attendees
                    attendees_prop = properties.get('Attendees', {})
                    if attendees_prop.get('rich_text'):
                        attendees_text = attendees_prop['rich_text'][0].get('text', {}).get('content', '')
                        print(f"      ‚úÖ Attendees: {attendees_text[:30] + '...' if len(attendees_text) > 30 else attendees_text}")
                    else:
                        print(f"      ‚ùå Attendees: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Meeting Link
                    meeting_link_prop = properties.get('Meeting Link', {})
                    if meeting_link_prop.get('url'):
                        print(f"      ‚úÖ Meeting Link: {meeting_link_prop['url'][:30] + '...' if len(meeting_link_prop['url']) > 30 else meeting_link_prop['url']}")
                    else:
                        print(f"      ‚ùå Meeting Link: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Event ID
                    event_id_prop = properties.get('Event ID', {})
                    if event_id_prop.get('rich_text'):
                        event_id_text = event_id_prop['rich_text'][0].get('text', {}).get('content', '')
                        print(f"      ‚úÖ Event ID: {event_id_text}")
                    else:
                        print(f"      ‚ùå Event ID: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Drive Folder
                    drive_folder_prop = properties.get('Drive Folder', {})
                    if drive_folder_prop.get('url'):
                        print(f"      ‚úÖ Drive Folder: {drive_folder_prop['url'][:30] + '...' if len(drive_folder_prop['url']) > 30 else drive_folder_prop['url']}")
                    else:
                        print(f"      ‚ùå Drive Folder: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    blocks_url = f"https://api.notion.com/v1/blocks/{page_id}/children"
                    blocks_response = requests.get(blocks_url, headers=headers)
                    blocks_response.raise_for_status()
                    blocks_data = blocks_response.json()
                    
                    blocks = blocks_data.get('results', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    has_transcription = False
                    has_summary = False
                    has_analysis = False
                    
                    for block in blocks:
                        block_type = block.get('type', '')
                        if block_type == 'heading_2':
                            heading_text = block.get('heading_2', {}).get('rich_text', [])
                            if heading_text:
                                text_content = heading_text[0].get('text', {}).get('content', '')
                                if '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è' in text_content:
                                    has_transcription = True
                                elif '–°–∞–º–º–∞—Ä–∏' in text_content:
                                    has_summary = True
                                elif '–∞–Ω–∞–ª–∏–∑' in text_content.lower():
                                    has_analysis = True
                    
                    print(f"   üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                    print(f"      {'‚úÖ' if has_transcription else '‚ùå'} –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                    print(f"      {'‚úÖ' if has_summary else '‚ùå'} –°–∞–º–º–∞—Ä–∏")
                    print(f"      {'‚úÖ' if has_analysis else '‚ùå'} –ê–Ω–∞–ª–∏–∑")
                    print(f"      üìä –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {len(blocks)}")
                    
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
                print()
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                if i >= 10:
                    print(f"... –∏ –µ—â–µ {len(events) - 10} —Å–æ–±—ã—Ç–∏–π")
                    break
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    success = check_notion_content_status()
    
    if success:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
