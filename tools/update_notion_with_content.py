#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏, —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º.
"""

import os
import sys
import sqlite3
import requests
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def update_notion_with_content(dry_run=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏, —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...")
        print("=" * 70)
        print(f"üîç –†–µ–∂–∏–º: {'–¢–ï–°–¢–û–í–´–ô (dry run)' if dry_run else '–†–ï–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï'}")
        print()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/system_state.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
        cursor.execute("""
            SELECT pt.event_id, pt.file_path, pt.transcript_file, pt.status,
                   pe.event_title, pe.account_type
            FROM processed_transcriptions pt
            JOIN processed_events pe ON pt.event_id = pe.event_id
            WHERE pt.status = 'success'
            ORDER BY pt.processed_at DESC
        """)
        
        transcriptions = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(transcriptions)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Å–∞–º–º–∞—Ä–∏
        cursor.execute("""
            SELECT ps.event_id, ps.summary_file, ps.status,
                   pe.event_title, pe.account_type
            FROM processed_summaries ps
            JOIN processed_events pe ON ps.event_id = pe.event_id
            WHERE ps.status = 'success'
            ORDER BY ps.created_at DESC
        """)
        
        summaries = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏: {len(summaries)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        transcriptions_dict = {t[0]: t for t in transcriptions}
        summaries_dict = {s[0]: s for s in summaries}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Notion
        all_pages = []
        has_more = True
        start_cursor = None
        
        while has_more:
            url = f"https://api.notion.com/v1/databases/{database_id}/query"
            payload = {
                "page_size": 100
            }
            if start_cursor:
                payload["start_cursor"] = start_cursor
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            all_pages.extend(data['results'])
            has_more = data['has_more']
            start_cursor = data.get('next_cursor')
        
        print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü –≤ Notion: {len(all_pages)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        pages_to_update = []
        
        for page in all_pages:
            page_id = page['id']
            properties = page['properties']
            
            # –ü–æ–ª—É—á–∞–µ–º Event ID
            event_id = ""
            if 'Event ID' in properties:
                event_id_prop = properties['Event ID']
                if event_id_prop['type'] == 'rich_text' and event_id_prop['rich_text']:
                    event_id = event_id_prop['rich_text'][0]['text']['content']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å Event ID –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if event_id:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = ""
                if 'Name' in properties:
                    title_prop = properties['Name']
                    if title_prop['type'] == 'title' and title_prop['title']:
                        title = title_prop['title'][0]['text']['content']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏–ª–∏ —Å–∞–º–º–∞—Ä–∏
                has_transcription = event_id in transcriptions_dict
                has_summary = event_id in summaries_dict
                
                if has_transcription or has_summary:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
                    content_updates = {}
                    
                    if has_transcription:
                        transcription_data = transcriptions_dict[event_id]
                        transcript_file = transcription_data[2]  # transcript_file
                        
                        if transcript_file and os.path.exists(transcript_file):
                            try:
                                with open(transcript_file, 'r', encoding='utf-8') as f:
                                    transcript_content = f.read()
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                content_updates['transcription'] = transcript_content
                            except Exception as e:
                                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcript_file}: {e}")
                    
                    if has_summary:
                        summary_data = summaries_dict[event_id]
                        summary_file = summary_data[1]  # summary_file
                        
                        if summary_file and os.path.exists(summary_file):
                            try:
                                with open(summary_file, 'r', encoding='utf-8') as f:
                                    summary_content = f.read()
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                content_updates['summary'] = summary_content
                            except Exception as e:
                                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ {summary_file}: {e}")
                    
                    if content_updates:
                        pages_to_update.append({
                            'page_id': page_id,
                            'title': title,
                            'event_id': event_id,
                            'content': content_updates
                        })
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(pages_to_update)} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        print()
        
        if not pages_to_update:
            print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        print("üìã –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print("-" * 70)
        for i, page in enumerate(pages_to_update[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            content_types = ', '.join(page['content'].keys())
            print(f"{i:2d}. {page['title'][:40]:<40} | {content_types}")
        
        if len(pages_to_update) > 10:
            print(f"    ... –∏ –µ—â–µ {len(pages_to_update) - 10} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print()
        
        if dry_run:
            print("üîç –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python tools/update_notion_with_content.py --execute")
            return True
        
        # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("üìù –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion...")
        updated_count = 0
        errors = []
        
        for i, page in enumerate(pages_to_update, 1):
            try:
                page_id = page['page_id']
                title = page['title']
                content = page['content']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                blocks_to_add = []
                
                if 'transcription' in content:
                    transcription_text = content['transcription']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    blocks_to_add.append({
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏"
                                    }
                                }
                            ]
                        }
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    blocks_to_add.append({
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": transcription_text
                                    }
                                }
                            ]
                        }
                    })
                
                if 'summary' in content:
                    summary_text = content['summary']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–∞–º–º–∞—Ä–∏
                    blocks_to_add.append({
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": "üìä –°–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑"
                                    }
                                }
                            ]
                        }
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
                    blocks_to_add.append({
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": summary_text
                                    }
                                }
                            ]
                        }
                    })
                
                if blocks_to_add:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
                    payload = {
                        "children": blocks_to_add
                    }
                    
                    response = requests.patch(url, headers=headers, json=payload)
                    response.raise_for_status()
                    
                    updated_count += 1
                    content_types = ', '.join(content.keys())
                    print(f"‚úÖ {i:2d}/{len(pages_to_update)} –û–±–Ω–æ–≤–ª–µ–Ω–∞: {title[:40]} | {content_types}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {page['title']}: {e}"
                errors.append(error_msg)
                print(f"‚ùå {i:2d}/{len(pages_to_update)} {error_msg}")
        
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        
        if errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in errors:
                print(f"  - {error}")
        
        conn.close()
        return len(errors) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = "--execute" not in sys.argv
    
    if dry_run:
        print("üîç –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (dry run)")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --execute")
        print()
    
    success = update_notion_with_content(dry_run=dry_run)
    
    if success:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
