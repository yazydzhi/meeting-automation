#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Notion —Å—Ç—Ä–∞–Ω–∏—Ü
"""

import sqlite3
import requests
import os
import json
from dotenv import load_dotenv

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env"""
    load_dotenv()
    return {
        'notion_token': os.getenv('NOTION_TOKEN'),
        'db_path': 'data/system_state.db'
    }

def get_notion_headers(notion_token):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Notion API"""
    return {
        'Authorization': f'Bearer {notion_token}',
        'Notion-Version': '2022-06-28',
        'Content-Type': 'application/json'
    }

def clear_page_content(page_id, headers):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
        blocks_url = f'https://api.notion.com/v1/blocks/{page_id}/children'
        response = requests.get(blocks_url, headers=headers)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {response.status_code}")
            return False
        
        blocks_data = response.json()
        blocks = blocks_data.get('results', [])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        for block in blocks[1:]:
            block_id = block['id']
            delete_url = f'https://api.notion.com/v1/blocks/{block_id}'
            delete_response = requests.delete(delete_url, headers=headers)
            
            if delete_response.status_code != 200:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ {block_id}")
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—á–∏—â–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return False

def create_structured_content(event_data, transcript_content, summary_content, analysis_data):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Notion"""
    
    blocks = []
    
    # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ"}}]
            }
        },
        {
            "type": "callout",
            "callout": {
                "icon": {"emoji": "‚è∞"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"–í—Ä–µ–º—è: {event_data.get('start_time', 'N/A')} - {event_data.get('end_time', 'N/A')}"
                        }
                    }
                ]
            }
        },
        {
            "type": "callout",
            "callout": {
                "icon": {"emoji": "üë•"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {event_data.get('attendees', 'N/A')}"
                        }
                    }
                ]
            }
        },
        {
            "type": "callout",
            "callout": {
                "icon": {"emoji": "üîó"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: {event_data.get('meeting_link', 'N/A')}"
                        }
                    }
                ]
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 2. –¶–µ–ª–∏ –≤—Å—Ç—Ä–µ—á–∏
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üéØ –¶–µ–ª–∏ –≤—Å—Ç—Ä–µ—á–∏"}}]
            }
        },
        {
            "type": "bulleted_list_item",
            "bulleted_list_item": {
                "rich_text": [{"type": "text", "text": {"content": "–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –≤—Å—Ç—Ä–µ—á–∏..."}}]
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 3. –ó–∞–º–µ—Ç–∫–∏
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üìù –ó–∞–º–µ—Ç–∫–∏"}}]
            }
        },
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏..."}}]
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 4. –î–µ–π—Å—Ç–≤–∏—è
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "‚úÖ –î–µ–π—Å—Ç–≤–∏—è"}}]
            }
        },
        {
            "type": "to_do",
            "to_do": {
                "rich_text": [{"type": "text", "text": {"content": "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è..."}}],
                "checked": False
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 5. –°—Å—ã–ª–∫–∏
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üîó –°—Å—ã–ª–∫–∏"}}]
            }
        },
        {
            "type": "callout",
            "callout": {
                "icon": {"emoji": "üìÅ"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"Google Drive –ø–∞–ø–∫–∞: {event_data.get('drive_folder', 'N/A')}"
                        }
                    }
                ]
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 6. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    blocks.extend([
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üìÖ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"}}]
            }
        },
        {
            "type": "numbered_list_item",
            "numbered_list_item": {
                "rich_text": [{"type": "text", "text": {"content": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏..."}}]
            }
        },
        {"type": "divider", "divider": {}}
    ])
    
    # 7. –°–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑
    if summary_content:
        blocks.extend([
            {
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": "üìä –°–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑"}}]
                }
            },
            {
                "type": "callout",
                "callout": {
                    "icon": {"emoji": "ü§ñ"},
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞"
                            }
                        }
                    ]
                }
            }
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –ø–æ —á–∞—Å—Ç—è–º
        summary_chunks = [summary_content[i:i+1800] for i in range(0, len(summary_content), 1800)]
        for chunk in summary_chunks:
            blocks.append({
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                }
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if analysis_data:
            blocks.extend([
                {
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [{"type": "text", "text": {"content": "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"}}]
                    }
                }
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            if isinstance(analysis_data, dict):
                analysis_text = format_analysis_data(analysis_data)
            else:
                analysis_text = str(analysis_data)
            
            analysis_chunks = [analysis_text[i:i+1800] for i in range(0, len(analysis_text), 1800)]
            for chunk in analysis_chunks:
                blocks.append({
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [{"type": "text", "text": {"content": chunk}}]
                    }
                })
        
        blocks.append({"type": "divider", "divider": {}})
    
    # 8. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    if transcript_content:
        blocks.extend([
            {
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏"}}]
                }
            },
            {
                "type": "callout",
                "callout": {
                    "icon": {"emoji": "üé§"},
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π Whisper"
                            }
                        }
                    ]
                }
            }
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º
        transcript_chunks = [transcript_content[i:i+1800] for i in range(0, len(transcript_content), 1800)]
        for chunk in transcript_chunks:
            blocks.append({
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": chunk}}]
                }
            })
    
    return blocks

def format_analysis_data(analysis_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not isinstance(analysis_data, dict):
        return str(analysis_data)
    
    formatted_text = "üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á–∏:**\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
    if 'key_topics' in analysis_data and analysis_data['key_topics']:
        formatted_text += "**–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:**\n"
        for topic in analysis_data['key_topics']:
            formatted_text += f"‚Ä¢ {topic}\n"
        formatted_text += "\n"
    
    # –í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    if 'decisions' in analysis_data and analysis_data['decisions']:
        formatted_text += "**–í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n"
        for decision in analysis_data['decisions']:
            formatted_text += f"‚Ä¢ {decision}\n"
        formatted_text += "\n"
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    if 'action_items' in analysis_data and analysis_data['action_items']:
        formatted_text += "**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
        for action in analysis_data['action_items']:
            formatted_text += f"‚Ä¢ {action}\n"
        formatted_text += "\n"
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    if 'participants' in analysis_data and analysis_data['participants']:
        formatted_text += "**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∏—Ö —Ä–æ–ª–∏:**\n"
        for participant in analysis_data['participants']:
            formatted_text += f"‚Ä¢ {participant}\n"
        formatted_text += "\n"
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    if 'summary' in analysis_data and analysis_data['summary']:
        formatted_text += f"**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:**\n{analysis_data['summary']}\n"
    
    return formatted_text

def improve_event_formatting(event_id, config):
    """–£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    
    print(f"üé® –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event_id}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect(config['db_path'])
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    cursor.execute('''
        SELECT event_title, event_start_time, event_end_time, attendees, meeting_link, calendar_type
        FROM processed_events 
        WHERE event_id = ?
    ''', (event_id,))
    
    event_data = cursor.fetchone()
    if not event_data:
        print(f"‚ùå –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        conn.close()
        return False
    
    title, start_time, end_time, attendees, meeting_link, calendar_type = event_data
    
    # –ü–æ–ª—É—á–∞–µ–º Notion page_id
    cursor.execute('''
        SELECT page_id FROM notion_sync_status 
        WHERE event_id = ?
    ''', (event_id,))
    
    notion_result = cursor.fetchone()
    if not notion_result:
        print(f"‚ùå Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        conn.close()
        return False
    
    page_id = notion_result[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É —Å–æ–±—ã—Ç–∏—è
    cursor.execute('''
        SELECT folder_path FROM folder_creation_status 
        WHERE event_id = ?
    ''', (event_id,))
    
    folder_result = cursor.fetchone()
    if not folder_result:
        print(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        conn.close()
        return False
    
    folder_path = folder_result[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤
    transcript_content = ""
    summary_content = ""
    analysis_data = None
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    transcript_file = os.path.join(folder_path, f"{os.path.basename(folder_path)}___transcript.txt")
    if os.path.exists(transcript_file):
        try:
            with open(transcript_file, 'r', encoding='utf-8') as f:
                transcript_content = f.read()
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(transcript_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
    
    # –°–∞–º–º–∞—Ä–∏
    summary_file = os.path.join(folder_path, f"{os.path.basename(folder_path)}___transcript_summary.txt")
    if os.path.exists(summary_file):
        try:
            with open(summary_file, 'r', encoding='utf-8') as f:
                summary_content = f.read()
            print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(summary_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
    
    # –ê–Ω–∞–ª–∏–∑
    analysis_file = os.path.join(folder_path, f"{os.path.basename(folder_path)}___transcript_analysis.json")
    if os.path.exists(analysis_file):
        try:
            with open(analysis_file, 'r', encoding='utf-8') as f:
                analysis_data = json.load(f)
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    conn.close()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    event_data_dict = {
        'title': title,
        'start_time': start_time,
        'end_time': end_time,
        'attendees': attendees,
        'meeting_link': meeting_link,
        'drive_folder': f"https://drive.google.com/drive/folders/{os.path.basename(folder_path)}"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    blocks = create_structured_content(event_data_dict, transcript_content, summary_content, analysis_data)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    headers = get_notion_headers(config['notion_token'])
    
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    if not clear_page_content(page_id, headers):
        return False
    
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –ø–æ —á–∞—Å—Ç—è–º (–ª–∏–º–∏—Ç Notion API)
    chunk_size = 50  # –ú–∞–∫—Å–∏–º—É–º –±–ª–æ–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    for i in range(0, len(blocks), chunk_size):
        chunk = blocks[i:i+chunk_size]
        
        blocks_url = f'https://api.notion.com/v1/blocks/{page_id}/children'
        blocks_data = {'children': chunk}
        
        response = requests.patch(blocks_url, headers=headers, json=blocks_data)
        
        if response.status_code == 200:
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chunk)} –±–ª–æ–∫–æ–≤")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    
    print(f"üéâ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config = load_config()
    
    if not config['notion_token']:
        print("‚ùå NOTION_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è "–ü–°–ë //SmartDeal - —ç–∫–≤–∞–π—Ä–∏–Ω–≥"
    event_id = 'ical_2025-08-29_84286d0f'
    
    success = improve_event_formatting(event_id, config)
    
    if success:
        print(f"\nüéØ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è '{event_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Notion —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{event_id}'")

if __name__ == "__main__":
    main()
