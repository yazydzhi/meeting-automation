#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion.
–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: Drive Folder, Event ID, –æ–ø–∏—Å–∞–Ω–∏–µ, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—Å—ã–ª–∫–∏, –∫–æ–Ω—Ç–µ–Ω—Ç.
"""

import os
import sys
import sqlite3
import requests
import json
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def complete_notion_enhancement():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    print("üöÄ –ü–æ–ª–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü Notion...")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    notion_database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not notion_database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/system_state.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            cursor.execute('''
                SELECT 
                    pe.event_id,
                    pe.event_title,
                    pe.event_start_time,
                    pe.event_end_time,
                    pe.attendees,
                    pe.meeting_link,
                    pe.calendar_type,
                    pe.account_type,
                    nss.page_id,
                    nss.page_url,
                    fcs.folder_path
                FROM processed_events pe
                LEFT JOIN notion_sync_status nss ON pe.event_id = nss.event_id
                LEFT JOIN folder_creation_status fcs ON pe.event_id = fcs.event_id
                WHERE nss.page_id IS NOT NULL
                ORDER BY pe.event_start_time DESC
            ''')
            
            events = cursor.fetchall()
            
            if not events:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å Notion —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")
                return False
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            print()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Notion API
            headers = {
                "Authorization": f"Bearer {notion_token}",
                "Notion-Version": "2022-06-28",
                "Content-Type": "application/json"
            }
            
            enhanced_count = 0
            skipped_count = 0
            
            for i, event in enumerate(events, 1):
                event_id, event_title, start_time, end_time, attendees, meeting_link, calendar_type, account_type, page_id, page_url, folder_path = event
                
                print(f"üîß {i}. –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {event_title}")
                print(f"   üÜî Event ID: {event_id}")
                print(f"   üìÑ Page ID: {page_id}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ
                    needs_enhancement = _check_if_needs_enhancement(page_id, headers)
                    
                    if not needs_enhancement:
                        print(f"   ‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —É–ª—É—á—à–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        skipped_count += 1
                        continue
                    
                    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    properties_updated = _update_page_properties(page_id, event_id, folder_path, headers)
                    if properties_updated:
                        print(f"   ‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    
                    # 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
                    description_added = _add_meeting_description(page_id, event_title, start_time, end_time, attendees, meeting_link, calendar_type, account_type, folder_path, headers)
                    if description_added:
                        print(f"   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                    
                    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, —Å–∞–º–º–∞—Ä–∏, –∞–Ω–∞–ª–∏–∑)
                    content_added = _add_available_content(page_id, event_id, headers)
                    if content_added:
                        print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
                    
                    enhanced_count += 1
                    print(f"   üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞!")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                
                print()
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                if i >= 10:
                    print(f"... –∏ –µ—â–µ {len(events) - 10} —Å–æ–±—ã—Ç–∏–π")
                    break
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è:")
            print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–æ: {enhanced_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"   üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {enhanced_count + skipped_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def _check_if_needs_enhancement(page_id: str, headers: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        blocks_url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        blocks_response = requests.get(blocks_url, headers=headers)
        blocks_response.raise_for_status()
        blocks_data = blocks_response.json()
        
        blocks = blocks_data.get('results', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
        has_description = False
        for block in blocks:
            if block.get('type') == 'heading_2':
                heading_text = block.get('heading_2', {}).get('rich_text', [])
                if heading_text:
                    text_content = heading_text[0].get('text', {}).get('content', '')
                    if '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏' in text_content:
                        has_description = True
                        break
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏
        return not has_description
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ

def _update_page_properties(page_id: str, event_id: str, folder_path: str, headers: dict) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion."""
    
    try:
        properties_to_update = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º Event ID
        properties_to_update["Event ID"] = {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": event_id
                    }
                }
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º Drive Folder, –µ—Å–ª–∏ –µ—Å—Ç—å
        if folder_path and not folder_path.startswith('data/'):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ Google Drive URL
            drive_url = folder_path.replace('data/local_drive/', 'https://drive.google.com/drive/folders/')
            properties_to_update["Drive Folder"] = {
                "url": drive_url
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if properties_to_update:
            update_url = f"https://api.notion.com/v1/pages/{page_id}"
            update_data = {"properties": properties_to_update}
            
            response = requests.patch(update_url, headers=headers, json=update_data)
            response.raise_for_status()
            return True
        
        return False
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤: {e}")
        return False

def _add_meeting_description(page_id: str, event_title: str, start_time: str, end_time: str, 
                           attendees: str, meeting_link: str, calendar_type: str, 
                           account_type: str, folder_path: str, headers: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion."""
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        meeting_info = f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {event_title}\n"
        meeting_info += f"**–í—Ä–µ–º—è:** {start_time} - {end_time}\n"
        meeting_info += f"**–¢–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è:** {calendar_type}\n"
        meeting_info += f"**–ê–∫–∫–∞—É–Ω—Ç:** {account_type}\n"
        
        if attendees and attendees != 'None':
            meeting_info += f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {attendees}\n"
        
        if meeting_link and meeting_link != 'None':
            meeting_info += f"**–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:** {meeting_link}\n"
        
        if folder_path:
            meeting_info += f"**–ü–∞–ø–∫–∞:** {folder_path}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏
        description_blocks = [
            {
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìã –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"
                            }
                        }
                    ]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": meeting_info
                            }
                        }
                    ]
                }
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏
        blocks_url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        blocks_data = {"children": description_blocks}
        
        response = requests.patch(blocks_url, headers=headers, json=blocks_data)
        response.raise_for_status()
        return True
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return False

def _add_available_content(page_id: str, event_id: str, headers: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, —Å–∞–º–º–∞—Ä–∏, –∞–Ω–∞–ª–∏–∑) –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        db_path = "data/system_state.db"
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            content_added = False
            
            # –ò—â–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            cursor.execute('''
                SELECT transcript_file FROM processed_transcriptions 
                WHERE event_id = ? AND status = 'success'
            ''', (event_id,))
            
            transcript_result = cursor.fetchone()
            if transcript_result and transcript_result[0]:
                transcript_file = transcript_result[0]
                if os.path.exists(transcript_file):
                    if _add_transcription_to_page(page_id, transcript_file, headers):
                        content_added = True
            
            # –ò—â–µ–º —Å–∞–º–º–∞—Ä–∏
            cursor.execute('''
                SELECT summary_file, analysis_file FROM processed_summaries 
                WHERE event_id = ? AND status = 'success'
            ''', (event_id,))
            
            summary_result = cursor.fetchone()
            if summary_result and summary_result[0]:
                summary_file = summary_result[0]
                analysis_file = summary_result[1] if len(summary_result) > 1 else None
                
                if os.path.exists(summary_file):
                    if _add_summary_to_page(page_id, summary_file, analysis_file, headers):
                        content_added = True
            
            return content_added
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return False

def _add_transcription_to_page(page_id: str, transcript_file: str, headers: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion."""
    
    try:
        with open(transcript_file, 'r', encoding='utf-8') as f:
            transcript_content = f.read()
        
        blocks = [
            {
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏"
                            }
                        }
                    ]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": transcript_content
                            }
                        }
                    ]
                }
            }
        ]
        
        blocks_url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        blocks_data = {"children": blocks}
        
        response = requests.patch(blocks_url, headers=headers, json=blocks_data)
        response.raise_for_status()
        return True
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return False

def _add_summary_to_page(page_id: str, summary_file: str, analysis_file: str, headers: dict) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion."""
    
    try:
        blocks = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–∞–º–º–∞—Ä–∏
        blocks.append({
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üìä –°–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑"
                        }
                    }
                ]
            }
        })
        
        # –°–∞–º–º–∞—Ä–∏
        with open(summary_file, 'r', encoding='utf-8') as f:
            summary_content = f.read()
        
        blocks.append({
            "type": "paragraph",
            "paragraph": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": summary_content
                        }
                    }
                ]
            }
        })
        
        # –ê–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if analysis_file and os.path.exists(analysis_file):
            blocks.append({
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                            }
                        }
                    ]
                }
            })
            
            with open(analysis_file, 'r', encoding='utf-8') as f:
                analysis_content = f.read()
            
            blocks.append({
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": analysis_content
                            }
                        }
                    ]
                }
            })
        
        blocks_url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        blocks_data = {"children": blocks}
        
        response = requests.patch(blocks_url, headers=headers, json=blocks_data)
        response.raise_for_status()
        return True
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
        return False

if __name__ == "__main__":
    success = complete_notion_enhancement()
    
    if success:
        print("‚úÖ –ü–æ–ª–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ü–æ–ª–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
