#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –∏ –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ —Å–∞–º–º–∞—Ä–∏.
–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""

import os
import sys
import sqlite3
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.config_manager import ConfigManager
from src.handlers.state_manager import StateManager

def scan_folder_for_files(folder_path, account_type):
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∏ —Å–∞–º–º–∞—Ä–∏.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    """
    result = {
        'media_files': [],
        'transcription_files': [],
        'summary_files': [],
        'analysis_files': []
    }
    
    if not os.path.exists(folder_path):
        return result
    
    try:
        for item in os.listdir(folder_path):
            item_path = os.path.join(folder_path, item)
            
            if os.path.isfile(item_path):
                # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                if item.lower().endswith(('.mp4', '.mov', '.avi', '.mkv', '.mp3', '.wav', '.m4a')):
                    result['media_files'].append(item_path)
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                elif item.endswith('__transcript.txt'):
                    result['transcription_files'].append(item_path)
                
                # –°–∞–º–º–∞—Ä–∏
                elif item.endswith('_summary.txt'):
                    result['summary_files'].append(item_path)
                
                # –ê–Ω–∞–ª–∏–∑
                elif item.endswith('_analysis.json'):
                    result['analysis_files'].append(item_path)
    
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_path}: {e}")
    
    return result

def scan_all_folders():
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤.
    """
    print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ —Å–æ–±—ã—Ç–∏–π...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–ø–∫–∞–º–∏
    cursor.execute('''
        SELECT pe.event_id, pe.event_title, pe.account_type, fcs.folder_path
        FROM processed_events pe
        INNER JOIN folder_creation_status fcs ON pe.event_id = fcs.event_id
        WHERE fcs.status = 'success'
        ORDER BY pe.processed_at DESC
    ''')
    
    events_with_folders = cursor.fetchall()
    conn.close()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events_with_folders)} —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–ø–∫–∞–º–∏")
    
    scan_results = []
    
    for event_id, event_title, account_type, folder_path in events_with_folders:
        print(f"\nüìÅ –°–∫–∞–Ω–∏—Ä—É—é: {event_title}")
        print(f"  üìÇ –ü–∞–ø–∫–∞: {folder_path}")
        
        files = scan_folder_for_files(folder_path, account_type)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        media_count = len(files['media_files'])
        transcription_count = len(files['transcription_files'])
        summary_count = len(files['summary_files'])
        analysis_count = len(files['analysis_files'])
        
        print(f"  üé¨ –ú–µ–¥–∏–∞: {media_count}")
        print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcription_count}")
        print(f"  üìã –°–∞–º–º–∞—Ä–∏: {summary_count}")
        print(f"  üìä –ê–Ω–∞–ª–∏–∑: {analysis_count}")
        
        scan_results.append({
            'event_id': event_id,
            'event_title': event_title,
            'account_type': account_type,
            'folder_path': folder_path,
            'files': files,
            'counts': {
                'media': media_count,
                'transcription': transcription_count,
                'summary': summary_count,
                'analysis': analysis_count
            }
        })
    
    return scan_results

def update_database_with_scan_results(scan_results):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    print(f"\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    media_updated = 0
    transcription_updated = 0
    summary_updated = 0
    
    for result in scan_results:
        event_id = result['event_id']
        files = result['files']
        counts = result['counts']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        if counts['media'] > 0:
            for media_file in files['media_files']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                cursor.execute('''
                    SELECT COUNT(*) FROM processed_media 
                    WHERE file_path = ? AND status = 'success'
                ''', (media_file,))
                
                if cursor.fetchone()[0] == 0:
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–µ
                        cursor.execute('''
                            INSERT INTO processed_media 
                            (file_path, compressed_video, compressed_audio, status, processed_at)
                            VALUES (?, '', '', 'success', ?)
                        ''', (media_file, datetime.now().isoformat()))
                        media_updated += 1
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª: {os.path.basename(media_file)}")
                    except sqlite3.IntegrityError:
                        print(f"  ‚ö†Ô∏è –ú–µ–¥–∏–∞ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(media_file)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if counts['transcription'] > 0:
            for transcript_file in files['transcription_files']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                cursor.execute('''
                    SELECT COUNT(*) FROM processed_transcriptions 
                    WHERE transcript_file = ? AND status = 'success'
                ''', (transcript_file,))
                
                if cursor.fetchone()[0] == 0:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
                    audio_file = transcript_file.replace('__transcript.txt', '_compressed.mp3')
                    if not os.path.exists(audio_file):
                        # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        base_name = transcript_file.replace('__transcript.txt', '')
                        for ext in ['_compressed.mp3', '_compressed.wav', '.mp3', '.wav']:
                            test_file = base_name + ext
                            if os.path.exists(test_file):
                                audio_file = test_file
                                break
                    
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                        cursor.execute('''
                            INSERT INTO processed_transcriptions 
                            (file_path, transcript_file, status, processed_at)
                            VALUES (?, ?, 'success', ?)
                        ''', (audio_file, transcript_file, datetime.now().isoformat()))
                        transcription_updated += 1
                        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {os.path.basename(transcript_file)}")
                    except sqlite3.IntegrityError:
                        print(f"  ‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(transcript_file)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
        if counts['summary'] > 0 or counts['analysis'] > 0:
            for summary_file in files['summary_files']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                cursor.execute('''
                    SELECT COUNT(*) FROM processed_summaries 
                    WHERE summary_file = ? AND status = 'success'
                ''', (summary_file,))
                
                if cursor.fetchone()[0] == 0:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    transcript_file = summary_file.replace('_summary.txt', '__transcript.txt')
                    if not os.path.exists(transcript_file):
                        transcript_file = ''
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞
                    analysis_file = summary_file.replace('_summary.txt', '_analysis.json')
                    if not os.path.exists(analysis_file):
                        analysis_file = ''
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∞–º–º–∞—Ä–∏
                    cursor.execute('''
                        INSERT INTO processed_summaries 
                        (transcript_file, summary_file, analysis_file, status, created_at)
                        VALUES (?, ?, ?, 'success', ?)
                    ''', (transcript_file, summary_file, analysis_file, datetime.now().isoformat()))
                    summary_updated += 1
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏: {os.path.basename(summary_file)}")
    
    conn.commit()
    conn.close()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  üé¨ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {media_updated}")
    print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {transcription_updated}")
    print(f"  üìã –°–∞–º–º–∞—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {summary_updated}")

def generate_scan_report(scan_results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
    """
    print(f"\nüìä –û–¢–ß–ï–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò –ü–ê–ü–û–ö")
    print("=" * 60)
    
    total_events = len(scan_results)
    events_with_media = sum(1 for r in scan_results if r['counts']['media'] > 0)
    events_with_transcription = sum(1 for r in scan_results if r['counts']['transcription'] > 0)
    events_with_summary = sum(1 for r in scan_results if r['counts']['summary'] > 0)
    
    total_media = sum(r['counts']['media'] for r in scan_results)
    total_transcription = sum(r['counts']['transcription'] for r in scan_results)
    total_summary = sum(r['counts']['summary'] for r in scan_results)
    
    print(f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–ø–∫–∞–º–∏: {total_events}")
    print(f"üé¨ –°–æ–±—ã—Ç–∏–π —Å –º–µ–¥–∏–∞: {events_with_media} ({events_with_media/total_events*100:.1f}%)")
    print(f"üé§ –°–æ–±—ã—Ç–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏: {events_with_transcription} ({events_with_transcription/total_events*100:.1f}%)")
    print(f"üìã –°–æ–±—ã—Ç–∏–π —Å —Å–∞–º–º–∞—Ä–∏: {events_with_summary} ({events_with_summary/total_events*100:.1f}%)")
    print()
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:")
    print(f"  üé¨ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {total_media}")
    print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {total_transcription}")
    print(f"  üìã –°–∞–º–º–∞—Ä–∏: {total_summary}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–æ–±—ã—Ç–∏—è–º —Å —Ñ–∞–π–ª–∞–º–∏
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    print("-" * 60)
    
    for result in scan_results:
        if any(result['counts'].values()):
            print(f"\nüìÅ {result['event_title']}")
            print(f"  üìÇ {result['folder_path']}")
            if result['counts']['media'] > 0:
                print(f"  üé¨ –ú–µ–¥–∏–∞: {result['counts']['media']} —Ñ–∞–π–ª–æ–≤")
            if result['counts']['transcription'] > 0:
                print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result['counts']['transcription']} —Ñ–∞–π–ª–æ–≤")
            if result['counts']['summary'] > 0:
                print(f"  üìã –°–∞–º–º–∞—Ä–∏: {result['counts']['summary']} —Ñ–∞–π–ª–æ–≤")

def verify_database_state():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute('SELECT COUNT(*) FROM processed_media WHERE status = "success"')
    media_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM processed_transcriptions WHERE status = "success"')
    transcription_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM processed_summaries WHERE status = "success"')
    summary_count = cursor.fetchone()[0]
    
    conn.close()
    
    print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  üé¨ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î: {media_count}")
    print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ë–î: {transcription_count}")
    print(f"  üìã –°–∞–º–º–∞—Ä–∏ –≤ –ë–î: {summary_count}")

if __name__ == "__main__":
    try:
        scan_results = scan_all_folders()
        update_database_with_scan_results(scan_results)
        generate_scan_report(scan_results)
        verify_database_state()
        print("\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
