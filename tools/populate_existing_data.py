#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î –¥–∞–Ω–Ω—ã–º–∏ –æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion.
"""

import os
import sys
import sqlite3
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from config_manager import ConfigManager
from handlers.state_manager import StateManager


def populate_existing_folders():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ë–î –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–∫–∞—Ö."""
    print("üìÅ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–∫–∞—Ö...")
    
    try:
        config_manager = ConfigManager()
        state_manager = StateManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        personal_config = config_manager.get_personal_config()
        work_config = config_manager.get_work_config()
        
        folders_added = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if personal_config and personal_config.get('local_drive_root'):
            personal_folder = personal_config['local_drive_root']
            if os.path.exists(personal_folder):
                print(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                folders_added += process_folder_directory(personal_folder, "personal", state_manager)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
        if work_config and work_config.get('local_drive_root'):
            work_folder = work_config['local_drive_root']
            if os.path.exists(work_folder):
                print(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                folders_added += process_folder_directory(work_folder, "work", state_manager)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {folders_added} –ø–∞–ø–æ–∫ –≤ –ë–î")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–ø–∫–∞—Ö: {e}")


def process_folder_directory(base_path: str, account_type: str, state_manager: StateManager) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–∞–ø–∫–∞–º–∏ –≤—Å—Ç—Ä–µ—á."""
    folders_added = 0
    
    try:
        for item in os.listdir(base_path):
            item_path = os.path.join(base_path, item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞ –∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã
            if os.path.isdir(item_path) and item.startswith('2025-'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                event_id = generate_event_id_from_folder_name(item)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –ë–î
                if not state_manager.is_folder_created(event_id, account_type):
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                    state_manager.mark_folder_created(event_id, item_path, account_type, "success")
                    folders_added += 1
                    print(f"  üìÅ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {item}")
                else:
                    print(f"  ‚è≠Ô∏è –ü–∞–ø–∫–∞ —É–∂–µ –≤ –ë–î: {item}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {base_path}: {e}")
    
    return folders_added


def generate_event_id_from_folder_name(folder_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç event_id –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏."""
    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –Ω–∞—á–∞–ª–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
    # –§–æ—Ä–º–∞—Ç: "2025-08-21 18-00 –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"
    parts = folder_name.split(' ', 2)
    if len(parts) >= 3:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
        meeting_name = parts[2]
        import hashlib
        return hashlib.md5(meeting_name.encode('utf-8')).hexdigest()[:12]
    else:
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
        import hashlib
        return hashlib.md5(folder_name.encode('utf-8')).hexdigest()[:12]


def populate_existing_summaries():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ë–î –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∞–º–º–∞—Ä–∏."""
    print("üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∞–º–º–∞—Ä–∏...")
    
    try:
        config_manager = ConfigManager()
        state_manager = StateManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        personal_config = config_manager.get_personal_config()
        work_config = config_manager.get_work_config()
        
        summaries_added = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if personal_config and personal_config.get('local_drive_root'):
            personal_folder = personal_config['local_drive_root']
            if os.path.exists(personal_folder):
                print(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∞–º–º–∞—Ä–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                summaries_added += process_summaries_directory(personal_folder, state_manager)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
        if work_config and work_config.get('local_drive_root'):
            work_folder = work_config['local_drive_root']
            if os.path.exists(work_folder):
                print(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∞–º–º–∞—Ä–∏ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                summaries_added += process_summaries_directory(work_folder, state_manager)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {summaries_added} —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–º–º–∞—Ä–∏: {e}")


def process_summaries_directory(base_path: str, state_manager: StateManager) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–∞–º–º–∞—Ä–∏."""
    summaries_added = 0
    
    try:
        for root, dirs, files in os.walk(base_path):
            for file in files:
                if file.endswith('_transcript.txt'):
                    transcript_file = os.path.join(root, file)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –ë–î
                    if not state_manager.is_summary_processed(transcript_file):
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–∞–º–º–∞—Ä–∏
                        base_name = os.path.splitext(transcript_file)[0]
                        summary_file = base_name + '_summary.txt'
                        analysis_file = base_name + '_analysis.json'
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∞–º–º–∞—Ä–∏
                        if os.path.exists(summary_file) and os.path.exists(analysis_file):
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                            state_manager.mark_summary_processed(
                                transcript_file, 
                                summary_file, 
                                analysis_file, 
                                "success"
                            )
                            summaries_added += 1
                            print(f"  üìã –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏: {os.path.basename(transcript_file)}")
                        else:
                            print(f"  ‚è≠Ô∏è –°–∞–º–º–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {os.path.basename(transcript_file)}")
                    else:
                        print(f"  ‚è≠Ô∏è –°–∞–º–º–∞—Ä–∏ —É–∂–µ –≤ –ë–î: {os.path.basename(transcript_file)}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏ –≤ {base_path}: {e}")
    
    return summaries_added


def populate_existing_media():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ë–î –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞—Ö."""
    print("üé• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞—Ö...")
    
    try:
        config_manager = ConfigManager()
        state_manager = StateManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        personal_config = config_manager.get_personal_config()
        work_config = config_manager.get_work_config()
        
        media_added = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if personal_config and personal_config.get('local_drive_root'):
            personal_folder = personal_config['local_drive_root']
            if os.path.exists(personal_folder):
                print(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {personal_folder}")
                media_added += process_media_directory(personal_folder, state_manager)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç
        if work_config and work_config.get('local_drive_root'):
            work_folder = work_config['local_drive_root']
            if os.path.exists(work_folder):
                print(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {work_folder}")
                media_added += process_media_directory(work_folder, state_manager)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {media_added} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ë–î")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–¥–∏–∞: {e}")


def process_media_directory(base_path: str, state_manager: StateManager) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏."""
    media_added = 0
    
    try:
        for root, dirs, files in os.walk(base_path):
            for file in files:
                if file.lower().endswith(('.mp4', '.mov', '.avi', '.mkv')):
                    media_file = os.path.join(root, file)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ –ë–î
                    if not state_manager.is_media_processed(media_file):
                        # –ò—â–µ–º —Å–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã
                        base_name = os.path.splitext(media_file)[0]
                        compressed_video = base_name + '_compressed.mp4'
                        compressed_audio = base_name + '_compressed.mp3'
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∂–∞—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
                        if os.path.exists(compressed_video) and os.path.exists(compressed_audio):
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                            state_manager.mark_media_processed(
                                media_file, 
                                compressed_video, 
                                compressed_audio, 
                                "success"
                            )
                            media_added += 1
                            print(f"  üé• –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª: {os.path.basename(media_file)}")
                        else:
                            print(f"  ‚è≠Ô∏è –°–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {os.path.basename(media_file)}")
                    else:
                        print(f"  ‚è≠Ô∏è –ú–µ–¥–∏–∞ —Ñ–∞–π–ª —É–∂–µ –≤ –ë–î: {os.path.basename(media_file)}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –≤ {base_path}: {e}")
    
    return media_added


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    print("=" * 60)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–ø–∫–∞—Ö
    populate_existing_folders()
    print()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–º–∞—Ä–∏
    populate_existing_summaries()
    print()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏–∞
    populate_existing_media()
    print()
    
    print("=" * 60)
    print("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
