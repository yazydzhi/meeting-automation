#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–ø–∫–∞–º–∏.
"""

import os
import sys
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.config_manager import ConfigManager
from src.handlers.state_manager import StateManager
from src.handlers.notion_handler import NotionHandler

def find_events_without_notion_pages():
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–ø–∫–∞–º–∏, –Ω–æ –±–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü Notion.
    """
    print("üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –±–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü Notion...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT pe.event_id, pe.event_title, pe.account_type, pe.event_start_time, pe.event_end_time, fcs.folder_path
        FROM processed_events pe
        INNER JOIN folder_creation_status fcs ON pe.event_id = fcs.event_id
        WHERE fcs.status = 'success' 
        AND pe.event_id NOT IN (
            SELECT event_id FROM notion_sync_status WHERE sync_status = 'success'
        )
        ORDER BY pe.processed_at DESC
    ''')
    
    events = cursor.fetchall()
    conn.close()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –±–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü Notion")
    return events

def create_notion_page_for_event(event_data):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion –¥–ª—è —Å–æ–±—ã—Ç–∏—è.
    """
    event_id, event_title, account_type, start_time, end_time, folder_path = event_data
    
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –¥–ª—è: {event_title}")
    print(f"  üÜî Event ID: {event_id}")
    print(f"  üë§ Account: {account_type}")
    print(f"  üìÇ –ü–∞–ø–∫–∞: {folder_path}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config_manager = ConfigManager()
        state_manager = StateManager()
        notion_handler = NotionHandler(config_manager)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Notion
        event_data_dict = {
            'id': event_id,
            'title': event_title,
            'account_type': account_type,
            'start_time': start_time if start_time else '',
            'end_time': end_time if end_time else '',
            'folder_path': folder_path
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        notion_result = notion_handler.create_meeting_page(event_data_dict, folder_path, account_type)
        
        if notion_result and notion_result.get('success'):
            page_id = notion_result.get('page_id', 'unknown')
            page_url = notion_result.get('page_url', '')
            
            print(f"  ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {page_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            state_manager.mark_notion_synced(event_id, page_id, page_url, "success")
            
            return True
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {notion_result}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_all_missing_pages():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion.
    """
    events = find_events_without_notion_pages()
    
    if not events:
        print("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –∏–º–µ—é—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion")
        return
    
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ {len(events)} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion...")
    
    success_count = 0
    error_count = 0
    
    for event_data in events:
        try:
            if create_notion_page_for_event(event_data):
                success_count += 1
            else:
                error_count += 1
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            error_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/(success_count+error_count)*100):.1f}%")

def verify_results():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–ø–∫–∞–º–∏
    cursor.execute('''
        SELECT COUNT(DISTINCT pe.event_id) 
        FROM processed_events pe
        INNER JOIN folder_creation_status fcs ON pe.event_id = fcs.event_id
        WHERE fcs.status = 'success'
    ''')
    events_with_folders = cursor.fetchone()[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ Notion
    cursor.execute('''
        SELECT COUNT(DISTINCT pe.event_id) 
        FROM processed_events pe
        INNER JOIN notion_sync_status nss ON pe.event_id = nss.event_id
        WHERE nss.sync_status = 'success'
    ''')
    events_with_notion = cursor.fetchone()[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü Notion
    cursor.execute('SELECT COUNT(*) FROM notion_sync_status WHERE sync_status = "success"')
    total_notion_pages = cursor.fetchone()[0]
    
    conn.close()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü:")
    print(f"  üìÅ –°–æ–±—ã—Ç–∏–π —Å –ø–∞–ø–∫–∞–º–∏: {events_with_folders}")
    print(f"  üìù –°–æ–±—ã—Ç–∏–π —Å —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ Notion: {events_with_notion}")
    print(f"  üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü Notion: {total_notion_pages}")
    print(f"  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ Notion: {(events_with_notion/events_with_folders*100):.1f}%")

if __name__ == "__main__":
    try:
        create_all_missing_pages()
        verify_results()
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Notion –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
