#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏, –Ω–æ –±–µ–∑ —Å–∞–º–º–∞—Ä–∏.
"""

import os
import sys
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.config_manager import ConfigManager
from src.handlers.state_manager import StateManager
from src.handlers.summary_handler import SummaryHandler

def find_events_with_transcriptions_but_no_summaries():
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏—è —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏, –Ω–æ –±–µ–∑ —Å–∞–º–º–∞—Ä–∏.
    """
    print("üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏, –Ω–æ –±–µ–∑ —Å–∞–º–º–∞—Ä–∏...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–ø–∫–∞–º–∏
    cursor.execute('''
        SELECT pe.event_id, pe.event_title, pe.account_type, fcs.folder_path
        FROM processed_events pe
        INNER JOIN folder_creation_status fcs ON pe.event_id = fcs.event_id
        WHERE fcs.status = 'success'
        ORDER BY pe.processed_at DESC
    ''')
    
    events_with_folders = cursor.fetchall()
    conn.close()
    
    events_needing_summaries = []
    
    for event_id, event_title, account_type, folder_path in events_with_folders:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ
        transcript_files = []
        if os.path.exists(folder_path):
            for item in os.listdir(folder_path):
                if item.endswith('__transcript.txt'):
                    transcript_files.append(os.path.join(folder_path, item))
        
        if transcript_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —ç—Ç–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            has_summaries = False
            for transcript_file in transcript_files:
                summary_file = transcript_file.replace('__transcript.txt', '_summary.txt')
                if os.path.exists(summary_file):
                    has_summaries = True
                    break
            
            if not has_summaries:
                events_needing_summaries.append({
                    'event_id': event_id,
                    'event_title': event_title,
                    'account_type': account_type,
                    'folder_path': folder_path,
                    'transcript_files': transcript_files
                })
                print(f"  üìã {event_title}: {len(transcript_files)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –±–µ–∑ —Å–∞–º–º–∞—Ä–∏")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(events_needing_summaries)} —Å–æ–±—ã—Ç–∏–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ —Å–∞–º–º–∞—Ä–∏")
    return events_needing_summaries

def process_summaries_for_events(events):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.
    """
    if not events:
        print("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –∏–º–µ—é—Ç —Å–∞–º–º–∞—Ä–∏")
        return
    
    print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è {len(events)} —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        config_manager = ConfigManager()
        state_manager = StateManager()
        summary_handler = SummaryHandler(config_manager)
        
        success_count = 0
        error_count = 0
        
        for event in events:
            event_title = event['event_title']
            account_type = event['account_type']
            folder_path = event['folder_path']
            transcript_files = event['transcript_files']
            
            print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è: {event_title}")
            print(f"  üìÇ –ü–∞–ø–∫–∞: {folder_path}")
            print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {len(transcript_files)}")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ø–∞–ø–∫–∏
                result = summary_handler._process_folder_summaries(folder_path, account_type)
                
                if result and result.get('processed', 0) > 0:
                    print(f"  ‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ: {result['processed']} —Ñ–∞–π–ª–æ–≤")
                    success_count += 1
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {result}")
                    error_count += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                error_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        print(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/(success_count+error_count)*100):.1f}%")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–º–º–∞—Ä–∏: {e}")
        import traceback
        traceback.print_exc()

def verify_summary_results():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏.
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–º–∞—Ä–∏...")
    
    conn = sqlite3.connect('data/system_state.db')
    cursor = conn.cursor()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT COUNT(*) FROM processed_summaries WHERE status = "success"')
    total_summaries = cursor.fetchone()[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    cursor.execute('SELECT COUNT(*) FROM processed_transcriptions WHERE status = "success"')
    total_transcriptions = cursor.fetchone()[0]
    
    conn.close()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–º–º–∞—Ä–∏:")
    print(f"  üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –ë–î: {total_transcriptions}")
    print(f"  üìã –°–∞–º–º–∞—Ä–∏ –≤ –ë–î: {total_summaries}")
    
    if total_transcriptions > 0:
        coverage = (total_summaries / total_transcriptions) * 100
        print(f"  üìà –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–∞–º–º–∞—Ä–∏: {coverage:.1f}%")

if __name__ == "__main__":
    try:
        events = find_events_with_transcriptions_but_no_summaries()
        process_summaries_for_events(events)
        verify_summary_results()
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–º–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
