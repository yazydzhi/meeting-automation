#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –ø–æ –≤—Å–µ–º—É —Ñ–ª–æ—É:
1. –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ
"""

import os
import sys
import time
import subprocess
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.audio_processor import AudioProcessor
from src.config_manager import ConfigManager

def compress_video(input_path: str, output_path: str, quality: str = 'medium', codec: str = 'h264') -> bool:
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞."""
    try:
        print(f"üé• –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ {os.path.basename(input_path)}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        if quality == 'low':
            crf = '28'  # –í—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'ultrafast'
        elif quality == 'medium':
            crf = '23'  # –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'fast'
        elif quality == 'high':
            crf = '18'  # –ù–∏–∑–∫–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'medium'
        else:  # ultra
            crf = '15'  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            preset = 'slow'
        
        video_cmd = [
            'ffmpeg', '-i', input_path,
            '-c:v', 'libx264',
            '-crf', crf,
            '-preset', preset,
            '-c:a', 'aac',
            '-b:a', '128k',
            '-movflags', '+faststart',
            '-y',
            output_path
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(video_cmd)}")
        
        result = subprocess.run(video_cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {os.path.basename(output_path)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {e}")
        return False

def extract_audio(input_path: str, output_path: str, quality: str = 'medium') -> bool:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞."""
    try:
        print(f"üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ {os.path.basename(input_path)}...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if quality == 'low':
            bitrate = '64k'
            sample_rate = '22050'
        elif quality == 'medium':
            bitrate = '128k'
            sample_rate = '44100'
        else:  # high
            bitrate = '256k'
            sample_rate = '48000'
        
        audio_cmd = [
            'ffmpeg',
            '-i', input_path,
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-acodec', 'libmp3lame',
            '-ab', bitrate,
            '-ar', sample_rate,
            '-y',
            output_path
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(audio_cmd)}")
        
        result = subprocess.run(audio_cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {os.path.basename(output_path)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def process_video_full_flow(video_path: str, audio_format: str = 'mp3', 
                           quality: str = 'medium', codec: str = 'h264',
                           no_segmentation: bool = False) -> Dict[str, Any]:
    """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞: —Å–∂–∞—Ç–∏–µ, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"""
    try:
        video_path = Path(video_path)
        if not video_path.exists():
            return {'errors': [f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}"]}
            
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ: {video_path.name}")
        print(f"üìÅ –ü–∞–ø–∫–∞: {video_path.parent}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = video_path.stat().st_size
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} MB")
        
        results = {
            'video_compressed': False,
            'audio_extracted': False,
            'transcript_created': False,
            'files_created': [],
            'errors': []
        }
        
        # –®–∞–≥ 1: –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ
        video_output_path = video_path.parent / f"{video_path.stem}_compressed.mp4"
        
        if video_output_path.exists() and "compressed" in video_output_path.name:
            print(f"‚è≠Ô∏è –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {video_output_path.name}")
            results['video_compressed'] = True
        else:
            try:
                compress_video(str(video_path), str(video_output_path), quality, codec)
                results['video_compressed'] = True
                results['files_created'].append(str(video_output_path))
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {video_output_path.name}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {e}"
                print(f"‚ùå {error_msg}")
                results['errors'].append(error_msg)
                return results
        
        # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
        audio_output_path = video_path.parent / f"{video_path.stem}_compressed.{audio_format}"
        
        if audio_output_path.exists():
            print(f"‚è≠Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_output_path.name}")
            results['audio_extracted'] = True
        else:
            try:
                extract_audio(str(video_output_path), str(audio_output_path), quality)
                results['audio_extracted'] = True
                results['files_created'].append(str(audio_output_path))
                print(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_output_path.name}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}"
                print(f"‚ùå {error_msg}")
                results['errors'].append(error_msg)
                return results
        
        # –®–∞–≥ 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ
        print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ: {audio_output_path.name}")
        
        if audio_output_path.exists():
            try:
                transcript_output_name = f"{video_path.stem}_transcript.md"
                transcript_output_path = video_path.parent / transcript_output_name
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioProcessor
                audio_processor = AudioProcessor()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ (—Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –±–µ–∑)
                if no_segmentation:
                    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                    result = audio_processor.process_audio_file_full(str(audio_output_path), 'md')
                else:
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
                    result = audio_processor.process_audio_file(str(audio_output_path), 'md')
                
                if result and result.get('speakers'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
                    with open(transcript_output_path, 'w', encoding='utf-8') as f:
                        f.write(f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {audio_output_path.name}\n\n")
                        f.write(f"**–§–∞–π–ª:** {audio_output_path.name}\n")
                        f.write(f"**–†–∞–∑–º–µ—Ä:** {result.get('file_size', 0)} –±–∞–π—Ç\n")
                        f.write(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {result.get('total_duration', 0)} –º—Å\n")
                        f.write(f"**–°–µ–≥–º–µ–Ω—Ç–æ–≤:** {result.get('total_segments', 0)}\n")
                        f.write(f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(result.get('speakers', {}))}\n")
                        f.write(f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {result.get('processed_at', '')}\n\n")
                        f.write("---\n\n")
                        
                        for speaker, segments in result['speakers'].items():
                            f.write(f"## {speaker}\n\n")
                            for seg in segments:
                                start_s = seg['start_time'] / 1000
                                end_s = seg['end_time'] / 1000
                                f.write(f"**[{start_s:.1f}s - {end_s:.1f}s]** {seg['text']}\n\n")
                    
                    results['transcript_created'] = True
                    results['files_created'].append(str(transcript_output_path))
                    print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {transcript_output_name}")
                else:
                    results['errors'].append("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}"
                print(f"‚ùå {error_msg}")
                results['errors'].append(error_msg)
        else:
            if transcript_output_path.exists():
                print(f"‚è≠Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {transcript_output_name}")
                results['transcript_created'] = True
            else:
                print(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üé¨ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {'‚úÖ' if results['video_compressed'] else '‚ùå'}")
        print(f"üéµ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {'‚úÖ' if results['audio_extracted'] else '‚ùå'}")
        print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {'‚úÖ' if results['transcript_created'] else '‚ùå'}")
        
        if results['files_created']:
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results['files_created'])}")
            for file_path in results['files_created']:
                print(f"   üìÑ {Path(file_path).name}")
        
        if results['errors']:
            print(f"‚ùå –û—à–∏–±–∫–∏: {len(results['errors'])}")
            for error in results['errors']:
                print(f"   ‚ö†Ô∏è {error}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {'errors': [str(e)]}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞')
    parser.add_argument('video_path', help='–ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É')
    parser.add_argument('--format', choices=['mp3', 'wav', 'm4a'], default='mp3',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ')
    parser.add_argument('--quality', choices=['low', 'medium', 'high'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--codec', choices=['h264', 'h265', 'vp9'], default='h264',
                       help='–ö–æ–¥–µ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ')
    parser.add_argument('--no-segmentation', action='store_true',
                       help='–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–≤—Å–µ —Å–ª–æ–≤–∞ –≤ –æ–¥–Ω–æ–º –∞–±–∑–∞—Ü–µ)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    results = process_video_full_flow(
        args.video_path, 
        args.format, 
        args.quality, 
        args.codec,
        args.no_segmentation
    )
    
    if results.get('errors'):
        sys.exit(1)

if __name__ == "__main__":
    main()
