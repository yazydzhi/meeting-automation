#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion.
"""

import os
import sys
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_notion_database_schema():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion...")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        url = f"https://api.notion.com/v1/databases/{database_id}"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        database_info = response.json()
        properties = database_info.get('properties', {})
        
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_info.get('title', [{}])[0].get('text', {}).get('content', 'Unknown')}")
        print(f"üìä ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database_id}")
        print()
        
        print("üìã –°–≤–æ–π—Å—Ç–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print("-" * 60)
        
        for prop_name, prop_info in properties.items():
            prop_type = prop_info.get('type', 'unknown')
            print(f"  ‚Ä¢ {prop_name:<20} | –¢–∏–ø: {prop_type}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤
            if prop_type == 'date':
                print(f"    ‚îî‚îÄ –ü–æ–ª–µ –¥–∞—Ç—ã (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å start –∏ end)")
            elif prop_type == 'rich_text':
                print(f"    ‚îî‚îÄ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ")
            elif prop_type == 'title':
                print(f"    ‚îî‚îÄ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            elif prop_type == 'select':
                options = prop_info.get('select', {}).get('options', [])
                if options:
                    option_names = [opt.get('name', '') for opt in options]
                    print(f"    ‚îî‚îÄ –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(option_names)}")
            elif prop_type == 'url':
                print(f"    ‚îî‚îÄ URL –ø–æ–ª–µ")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        has_start_time = any('start' in name.lower() or 'begin' in name.lower() for name in properties.keys())
        has_end_time = any('end' in name.lower() or 'finish' in name.lower() for name in properties.keys())
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏:")
        print(f"  üìÖ –ü–æ–ª–µ Date: {'‚úÖ' if 'Date' in properties else '‚ùå'}")
        print(f"  üïê –ü–æ–ª–µ Start Time: {'‚úÖ' if has_start_time else '‚ùå'}")
        print(f"  üïê –ü–æ–ª–µ End Time: {'‚úÖ' if has_end_time else '‚ùå'}")
        
        if 'Date' in properties:
            date_prop = properties['Date']
            if date_prop.get('type') == 'date':
                print(f"  üìÖ Date - —ç—Ç–æ –ø–æ–ª–µ –¥–∞—Ç—ã (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å start –∏ end)")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("üìÑ –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        print("-" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        url = f"https://api.notion.com/v1/databases/{database_id}/query"
        payload = {"page_size": 1}
        
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        data = response.json()
        if data.get('results'):
            page = data['results'][0]
            page_properties = page.get('properties', {})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for prop_name, prop_info in page_properties.items():
                prop_type = prop_info.get('type', 'unknown')
                
                if prop_type == 'title' and prop_info.get('title'):
                    title = prop_info['title'][0]['text']['content']
                    print(f"  üìù {prop_name}: {title}")
                elif prop_type == 'date' and prop_info.get('date'):
                    date_info = prop_info['date']
                    start_date = date_info.get('start', '')
                    end_date = date_info.get('end', '')
                    print(f"  üìÖ {prop_name}: {start_date} {'‚Üí ' + end_date if end_date else ''}")
                elif prop_type == 'rich_text' and prop_info.get('rich_text'):
                    text = prop_info['rich_text'][0]['text']['content']
                    print(f"  üìÑ {prop_name}: {text[:50]}{'...' if len(text) > 50 else ''}")
                elif prop_type == 'url' and prop_info.get('url'):
                    url = prop_info['url']
                    print(f"  üîó {prop_name}: {url[:50]}{'...' if len(url) > 50 else ''}")
                elif prop_type == 'select' and prop_info.get('select'):
                    select_name = prop_info['select'].get('name', '')
                    print(f"  üè∑Ô∏è {prop_name}: {select_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion: {e}")
        return False

if __name__ == "__main__":
    success = check_notion_database_schema()
    
    if success:
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
