#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ MP3 —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–æ–∫
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ MP3 —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –≤ —Ç–µ—Ö –∂–µ –ø–∞–ø–∫–∞—Ö
"""

import os
import sys
import argparse
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
from typing import List, Dict, Any
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from src.audio_processor import AudioProcessor
    from src.config_manager import ConfigManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
                    RotatingFileHandler(
            "logs/mp3_processing.log",
            maxBytes=int(os.getenv("LOG_MAX_SIZE_MB", "100")) * 1024 * 1024,
            backupCount=int(os.getenv("LOG_BACKUP_COUNT", "5")),
            encoding="utf-8"
        )
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)

def find_mp3_files(root_path: str, recursive: bool = True) -> List[Path]:
    """
    –ù–∞–π—Ç–∏ MP3 –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    
    Args:
        root_path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
        recursive: –ò—Å–∫–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    """
    root = Path(root_path)
    mp3_files = []
    
    if recursive:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        for mp3_file in root.rglob("*.mp3"):
            mp3_files.append(mp3_file)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
        for video_file in root.rglob("*.mp4"):
            mp3_files.append(video_file)
        for video_file in root.rglob("*.m4a"):
            mp3_files.append(video_file)
        for video_file in root.rglob("*.avi"):
            mp3_files.append(video_file)
        for video_file in root.rglob("*.mov"):
            mp3_files.append(video_file)
        for video_file in root.rglob("*.mkv"):
            mp3_files.append(video_file)
    else:
        # –¢–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        for mp3_file in root.glob("*.mp3"):
            mp3_files.append(mp3_file)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
        for video_file in root.glob("*.mp4"):
            mp3_files.append(video_file)
        for video_file in root.glob("*.m4a"):
            mp3_files.append(video_file)
        for video_file in root.glob("*.avi"):
            mp3_files.append(video_file)
        for video_file in root.glob("*.mov"):
            mp3_files.append(video_file)
        for video_file in root.glob("*.mkv"):
            mp3_files.append(video_file)
    
    return sorted(mp3_files)

def process_mp3_file(audio_processor: AudioProcessor, mp3_file: Path, output_format: str, force: bool = False) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω MP3 —Ñ–∞–π–ª
    
    Args:
        audio_processor: –≠–∫–∑–µ–º–ø–ª—è—Ä –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        mp3_file: –ü—É—Ç—å –∫ MP3 —Ñ–∞–π–ª—É
        output_format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if output_format == 'txt':
        output_file = mp3_file.parent / f"{mp3_file.stem}_transcript.txt"
    elif output_format == 'md':
        output_file = mp3_file.parent / f"{mp3_file.stem}_transcript.md"
    elif output_format == 'csv':
        output_file = mp3_file.parent / f"{mp3_file.stem}_transcript.csv"
    else:
        output_file = mp3_file.parent / f"{mp3_file.stem}_transcript.{output_format}"
    
    try:
        print(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {mp3_file.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if output_file.exists() and not force:
            print(f"   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_file.name}")
            return {
                'status': 'skipped',
                'file': str(mp3_file),
                'output': str(output_file),
                'reason': 'already_exists'
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        start_time = time.time()
        result = audio_processor.process_audio_file(str(mp3_file), output_format)
        processing_time = time.time() - start_time
        
        if result and result.get('speakers'):
            print(f"   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f}—Å")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"   üîç –û—Ç–ª–∞–¥–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
            print(f"   üîç –û—Ç–ª–∞–¥–∫–∞: speakers = {result.get('speakers')}")
            print(f"   üîç –û—Ç–ª–∞–¥–∫–∞: total_segments = {result.get('total_segments')}")
            print(f"   üîç –û—Ç–ª–∞–¥–∫–∞: file_size = {result.get('file_size')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫—É —Å MP3 —Ñ–∞–π–ª–æ–º
            if output_format == 'txt':
                transcript_content = create_txt_transcript(result, mp3_file)
            elif output_format == 'md':
                transcript_content = create_md_transcript(result, mp3_file)
            elif output_format == 'csv':
                transcript_content = create_csv_transcript(result, mp3_file)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                transcript_content = json.dumps(result, ensure_ascii=False, indent=2)
            
            print(f"   üîç –û—Ç–ª–∞–¥–∫–∞: —Å–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(transcript_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(transcript_content)
            
            print(f"   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file.name}")
            print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(result.get('speakers', {}))}")
            print(f"   üî¢ –°–µ–≥–º–µ–Ω—Ç–æ–≤: {result.get('total_segments', 0)}")
            
            return {
                'status': 'success',
                'file': str(mp3_file),
                'output': str(output_file),
                'processing_time': processing_time,
                'speakers_count': len(result.get('speakers', {})),
                'segments_count': result.get('total_segments', 0)
            }
        else:
            print(f"   ‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return {
                'status': 'error',
                'file': str(mp3_file),
                'output': str(output_file),
                'error': 'transcription_failed'
            }
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {
            'status': 'error',
            'file': str(mp3_file),
            'output': str(output_file),
            'error': str(e)
        }

def create_txt_transcript(result: Dict[str, Any], mp3_file: Path) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
    txt_content = f"–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø: {mp3_file.name}\n"
    txt_content += f"–§–∞–π–ª: {mp3_file.name}\n"
    txt_content += f"–†–∞–∑–º–µ—Ä: {result.get('file_size', 0)} –±–∞–π—Ç\n"
    txt_content += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('total_duration', 0)} –º—Å\n"
    txt_content += f"–°–µ–≥–º–µ–Ω—Ç–æ–≤: {result.get('total_segments', 0)}\n"
    txt_content += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(result.get('speakers', {}))}\n"
    txt_content += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed_at', 'unknown')}\n\n"
    
    txt_content += "=" * 50 + "\n\n"
    
    if result.get('speakers'):
        for speaker_name, segments in result['speakers'].items():
            txt_content += f"=== {speaker_name} ===\n"
            for segment in segments:
                start_time = segment.get('start_time', 0) / 1000  # –≤ —Å–µ–∫—É–Ω–¥—ã
                end_time = segment.get('end_time', 0) / 1000
                text = segment.get('text', '')
                txt_content += f"[{start_time:.1f}s - {end_time:.1f}s] {text}\n"
            txt_content += "\n"
    
    return txt_content

def create_md_transcript(result: Dict[str, Any], mp3_file: Path) -> str:
    """–°–æ–∑–¥–∞—Ç—å Markdown —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
    print(f"üîç create_md_transcript: result = {result}")
    print(f"üîç create_md_transcript: mp3_file = {mp3_file}")
    
    md_content = f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {mp3_file.name}\n\n"
    md_content += f"**–§–∞–π–ª:** {mp3_file.name}\n"
    md_content += f"**–†–∞–∑–º–µ—Ä:** {result.get('file_size', 0)} –±–∞–π—Ç\n"
    md_content += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {result.get('total_duration', 0)} –º—Å\n"
    md_content += f"**–°–µ–≥–º–µ–Ω—Ç–æ–≤:** {result.get('total_segments', 0)}\n"
    md_content += f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(result.get('speakers', {}))}\n"
    md_content += f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {result.get('processed_at', 'unknown')}\n\n"
    
    md_content += "---\n\n"
    
    if result.get('speakers'):
        for speaker_name, segments in result['speakers'].items():
            md_content += f"## {speaker_name}\n\n"
            
            for segment in segments:
                start_time = segment.get('start_time', 0) / 1000  # –≤ —Å–µ–∫—É–Ω–¥—ã
                end_time = segment.get('end_time', 0) / 1000
                text = segment.get('text', '')
                md_content += f"**[{start_time:.1f}s - {end_time:.1f}s]** {text}\n\n"
    
    print(f"üîç create_md_transcript: —Å–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(md_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    return md_content

def create_csv_transcript(result: Dict[str, Any], mp3_file: Path) -> str:
    """–°–æ–∑–¥–∞—Ç—å CSV —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç"""
    csv_content = "speaker_id,start_time,end_time,duration,text\n"
    
    if result.get('speakers'):
        for speaker_name, segments in result['speakers'].items():
            for segment in segments:
                start_time = segment.get('start_time', 0) / 1000  # –≤ —Å–µ–∫—É–Ω–¥—ã
                end_time = segment.get('end_time', 0) / 1000
                duration = segment.get('duration', 0) / 1000
                text = segment.get('text', '')
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                text = text.replace('"', '""')
                csv_content += f'"{speaker_name}",{start_time:.1f},{end_time:.1f},{duration:.1f},"{text}"\n'
    
    return csv_content

def save_transcript(result: Dict[str, Any], mp3_file: Path, output_format: str, output_file: Path):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        if output_format == 'md':
            content = create_md_transcript(result, mp3_file)
        elif output_format == 'csv':
            content = create_csv_transcript(result, mp3_file)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
            
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {output_format}: {e}")

def process_folders(folders: List[str], output_format: str = 'txt', recursive: bool = True, force: bool = False, config_file: str = None):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å MP3 —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
    
    Args:
        folders: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ø–∞–ø–∫–∞–º
        output_format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (txt, md, csv, json, srt)
        recursive: –ò—Å–∫–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        config_file: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    logger = setup_logging()
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤...")
    print(f"üìÅ –ü–∞–ø–∫–∏: {', '.join(folders)}")
    print(f"üìù –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {output_format.upper()}")
    print(f"üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: {'–î–∞' if recursive else '–ù–µ—Ç'}")
    print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'–î–∞' if force else '–ù–µ—Ç'}")
    print("-" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    try:
        audio_processor = AudioProcessor(config_file)
        print("‚úÖ –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = 0
    processed_files = 0
    skipped_files = 0
    error_files = 0
    total_processing_time = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
    for folder in folders:
        print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder}")
        
        # –ò—â–µ–º MP3 —Ñ–∞–π–ª—ã
        mp3_files = find_mp3_files(folder, recursive)
        
        if not mp3_files:
            print(f"   ‚ÑπÔ∏è  –ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue
        
        print(f"   üéµ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(mp3_files)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for mp3_file in mp3_files:
            total_files += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            result = process_mp3_file(audio_processor, mp3_file, output_format, force)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result['status'] == 'success':
                processed_files += 1
                total_processing_time += result.get('processing_time', 0)
                
                # –§–∞–π–ª —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ process_mp3_file, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
                # if output_format in ['md', 'csv']:
                #     output_file = Path(result['output'])
                #     save_transcript(result, mp3_file, output_format, output_file)
                    
            elif result['status'] == 'skipped':
                skipped_files += 1
            else:
                error_files += 1
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"üìÅ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(folders)}")
    print(f"üéµ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_files}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_files}")
    
    if processed_files > 0:
        avg_time = total_processing_time / processed_files
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_time:.1f}—Å")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_processing_time:.1f}—Å")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try:
        audio_processor.cleanup_temp_files()
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    print("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ MP3 —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–æ–∫')
    parser.add_argument('folders', nargs='+', help='–ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--output', choices=['txt', 'md', 'csv', 'json', 'srt'], default='txt',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: txt)')
    parser.add_argument('--recursive', action='store_true', default=True,
                       help='–ò—Å–∫–∞—Ç—å MP3 —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –î–∞)')
    parser.add_argument('--no-recursive', dest='recursive', action='store_false',
                       help='–ò—Å–∫–∞—Ç—å MP3 —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö')
    parser.add_argument('--force', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    for folder in args.folders:
        if not os.path.exists(folder):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
            sys.exit(1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
    process_folders(
        folders=args.folders,
        output_format=args.output,
        recursive=args.recursive,
        force=args.force,
        config_file=args.config
    )

if __name__ == '__main__':
    main()
