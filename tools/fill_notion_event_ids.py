#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Event ID –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite.
"""

import os
import sys
import sqlite3
import requests
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fill_notion_event_ids(dry_run=True):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç Event ID –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        print("üîß –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Event ID –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö Notion...")
        print("=" * 60)
        print(f"üîç –†–µ–∂–∏–º: {'–¢–ï–°–¢–û–í–´–ô (dry run)' if dry_run else '–†–ï–ê–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï'}")
        print()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/system_state.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ notion_sync_status
        cursor.execute("""
            SELECT event_id, page_id, page_url, sync_status, last_sync, created_at
            FROM notion_sync_status
            WHERE page_id IS NOT NULL
            ORDER BY created_at DESC
        """)
        
        db_records = cursor.fetchall()
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ SQLite —Å Page ID: {len(db_records)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ page_id
        db_page_mapping = {}
        for record in db_records:
            event_id, page_id, page_url, sync_status, last_sync, created_at = record
            db_page_mapping[page_id] = {
                'event_id': event_id,
                'page_url': page_url,
                'sync_status': sync_status,
                'last_sync': last_sync,
                'created_at': created_at
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Notion
        all_pages = []
        has_more = True
        start_cursor = None
        
        while has_more:
            url = f"https://api.notion.com/v1/databases/{database_id}/query"
            payload = {
                "page_size": 100
            }
            if start_cursor:
                payload["start_cursor"] = start_cursor
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            all_pages.extend(data['results'])
            has_more = data['has_more']
            start_cursor = data.get('next_cursor')
        
        print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü –≤ Notion: {len(all_pages)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ Event ID
        pages_to_update = []
        
        for page in all_pages:
            page_id = page['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Event ID
            has_event_id = False
            if 'properties' in page and 'Event ID' in page['properties']:
                event_id_prop = page['properties']['Event ID']
                if event_id_prop['type'] == 'rich_text' and event_id_prop['rich_text']:
                    has_event_id = True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç Event ID, –Ω–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ SQLite
            if not has_event_id and page_id in db_page_mapping:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = ""
                if 'properties' in page and 'Name' in page['properties']:
                    title_prop = page['properties']['Name']
                    if title_prop['type'] == 'title' and title_prop['title']:
                        title = title_prop['title'][0]['text']['content']
                
                pages_to_update.append({
                    'page_id': page_id,
                    'title': title,
                    'event_id': db_page_mapping[page_id]['event_id'],
                    'created_time': page['created_time']
                })
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(pages_to_update)} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print()
        
        if not pages_to_update:
            print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –∏–º–µ—é—Ç Event ID!")
            return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        print("üìã –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print("-" * 60)
        for i, page in enumerate(pages_to_update[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i:2d}. {page['title'][:40]:<40} | {page['event_id']}")
        
        if len(pages_to_update) > 10:
            print(f"    ... –∏ –µ—â–µ {len(pages_to_update) - 10} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print()
        
        if dry_run:
            print("üîç –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python tools/fill_notion_event_ids.py --execute")
            return True
        
        # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("üîß –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Event ID...")
        updated_count = 0
        errors = []
        
        for i, page in enumerate(pages_to_update, 1):
            try:
                page_id = page['page_id']
                event_id = page['event_id']
                title = page['title']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º Event ID
                url = f"https://api.notion.com/v1/pages/{page_id}"
                payload = {
                    "properties": {
                        "Event ID": {
                            "rich_text": [
                                {
                                    "text": {
                                        "content": event_id
                                    }
                                }
                            ]
                        }
                    }
                }
                
                response = requests.patch(url, headers=headers, json=payload)
                response.raise_for_status()
                
                updated_count += 1
                print(f"‚úÖ {i:2d}/{len(pages_to_update)} –û–±–Ω–æ–≤–ª–µ–Ω–∞: {title[:40]} -> {event_id}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {page['title']}: {e}"
                errors.append(error_msg)
                print(f"‚ùå {i:2d}/{len(pages_to_update)} {error_msg}")
        
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        
        if errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in errors:
                print(f"  - {error}")
        
        conn.close()
        return len(errors) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ Event ID: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = "--execute" not in sys.argv
    
    if dry_run:
        print("üîç –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (dry run)")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --execute")
        print()
    
    success = fill_notion_event_ids(dry_run=dry_run)
    
    if success:
        print("\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Event ID –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Event ID –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
