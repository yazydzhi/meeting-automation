#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å Whisper
"""

import os
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from src.audio_processor import AudioProcessor
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

def test_audio_processor(audio_file: str, config_file: str = None, output_format: str = 'json'):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    try:
        print(f"üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        print(f"üìÅ –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_file}")
        print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
        print(f"üìù –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {output_format}")
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_file):
            print(f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
            return False
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = AudioProcessor(config_file)
        print("‚úÖ –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
        result = processor.process_audio_file(audio_file, output_format)
        
        if result:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üìÅ –§–∞–π–ª: {result['file_path']}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {result['file_size']} –±–∞–π—Ç")
            print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']}ms")
            print(f"   üî¢ –°–µ–≥–º–µ–Ω—Ç–æ–≤: {result['segments_count']}")
            print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['speakers_count']}")
            print(f"   ü§ñ –ú–æ–¥–µ–ª—å Whisper: {result['whisper_model']}")
            print(f"   üåç –Ø–∑—ã–∫: {result['language']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if result['transcription']:
                print(f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:")
                for i, speaker in enumerate(result['transcription'], 1):
                    print(f"   {speaker['speaker_id']}:")
                    print(f"      ‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {speaker['total_duration']}ms")
                    print(f"      üìù –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(speaker['segments'])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    for j, segment in enumerate(speaker['segments'][:3], 1):
                        text = segment['text'][:100] + "..." if len(segment['text']) > 100 else segment['text']
                        print(f"         {j}. [{segment['start_time']}-{segment['end_time']}ms] {text}")
                    
                    if len(speaker['segments']) > 3:
                        print(f"         ... –∏ –µ—â–µ {len(speaker['segments']) - 3} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                    print()
            
            return True
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞')
    parser.add_argument('audio_file', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--output', choices=['json', 'txt', 'srt'], default='json',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)')
    parser.add_argument('--cleanup', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã')
    
    args = parser.parse_args()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    success = test_audio_processor(args.audio_file, args.config, args.output)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.cleanup and success:
        try:
            processor = AudioProcessor(args.config)
            processor.cleanup_temp_files()
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if success:
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == '__main__':
    main()
