#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π viewer –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite –±–∞–∑–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
"""

import sqlite3
import json
import sys
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional


class DatabaseViewer:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π viewer –¥–ª—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self, db_path: str = "data/system_state.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è viewer.
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        """
        self.db_path = db_path
        self.conn = None
    
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if not Path(self.db_path).exists():
                print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
                return False
            
            self.conn = sqlite3.connect(self.db_path)
            self.conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.conn:
            self.conn.close()
    
    def show_tables(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
            print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            for table in tables:
                print(f"  ‚Ä¢ {table[0]}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
    
    def show_system_state(self, limit: int = 10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT cycle_id, timestamp, personal_events_processed, work_events_processed,
                       media_processed, transcriptions_processed, notion_synced, errors_count,
                       personal_status, work_status, media_status, transcription_status, notion_status,
                       execution_time, created_at
                FROM system_state 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (limit,))
            
            states = cursor.fetchall()
            
            if not states:
                print("üìä –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã:")
            print("=" * 120)
            
            for state in states:
                print(f"üîÑ –¶–∏–∫–ª #{state['cycle_id']} - {state['timestamp']}")
                print(f"   üìÖ –°–æ–±—ã—Ç–∏—è: –ª–∏—á–Ω—ã–µ={state['personal_events_processed']}, —Ä–∞–±–æ—á–∏–µ={state['work_events_processed']}")
                print(f"   üé¨ –ú–µ–¥–∏–∞: {state['media_processed']}, üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {state['transcriptions_processed']}")
                print(f"   üìù Notion: {state['notion_synced']}, ‚ùå –û—à–∏–±–∫–∏: {state['errors_count']}")
                print(f"   üìä –°—Ç–∞—Ç—É—Å—ã: personal={state['personal_status']}, work={state['work_status']}, media={state['media_status']}")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {state['execution_time']:.2f}—Å, —Å–æ–∑–¥–∞–Ω–æ: {state['created_at']}")
                print("-" * 120)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def show_processed_events(self, limit: int = 20, account_type: Optional[str] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        try:
            cursor = self.conn.cursor()
            
            if account_type:
                cursor.execute('''
                    SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                    FROM processed_events 
                    WHERE account_type = ?
                    ORDER BY processed_at DESC 
                    LIMIT ?
                ''', (account_type, limit))
            else:
                cursor.execute('''
                    SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                    FROM processed_events 
                    ORDER BY processed_at DESC 
                    LIMIT ?
                ''', (limit,))
            
            events = cursor.fetchall()
            
            if not events:
                print("üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(events)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:")
            if account_type:
                print(f"   (—Ñ–∏–ª—å—Ç—Ä: {account_type})")
            print("=" * 100)
            
            for event in events:
                print(f"üÜî {event['event_id']}")
                print(f"   üë§ –ê–∫–∫–∞—É–Ω—Ç: {event['account_type']}")
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event['event_title']}")
                if event['event_start_time']:
                    print(f"   üìÖ –ù–∞—á–∞–ª–æ: {event['event_start_time']}")
                if event['event_end_time']:
                    print(f"   üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {event['event_end_time']}")
                print(f"   ‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event['processed_at']}")
                print("-" * 100)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    def show_processed_media(self, limit: int = 20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT file_path, file_hash, status, processed_at
                FROM processed_media 
                ORDER BY processed_at DESC 
                LIMIT ?
            ''', (limit,))
            
            media = cursor.fetchall()
            
            if not media:
                print("üé¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(media)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:")
            print("=" * 120)
            
            for file in media:
                print(f"üìÅ {file['file_path']}")
                print(f"   üîë –•–µ—à: {file['file_hash'][:16]}..." if file['file_hash'] else "   üîë –•–µ—à: –Ω–µ —É–∫–∞–∑–∞–Ω")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {file['status']}")
                print(f"   ‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {file['processed_at']}")
                print("-" * 120)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def show_processed_transcriptions(self, limit: int = 20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT file_path, status, processed_at
                FROM processed_transcriptions 
                ORDER BY processed_at DESC 
                LIMIT ?
            ''', (limit,))
            
            transcriptions = cursor.fetchall()
            
            if not transcriptions:
                print("üé§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üé§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(transcriptions)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π:")
            print("=" * 100)
            
            for trans in transcriptions:
                print(f"üìÑ {trans['file_path']}")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {trans['status']}")
                print(f"   ‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {trans['processed_at']}")
                print("-" * 100)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {e}")
    
    def show_notion_sync(self, limit: int = 20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT page_id, event_id, status, last_sync
                FROM notion_sync 
                ORDER BY last_sync DESC 
                LIMIT ?
            ''', (limit,))
            
            syncs = cursor.fetchall()
            
            if not syncs:
                print("üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Notion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(syncs)} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π —Å Notion:")
            print("=" * 100)
            
            for sync in syncs:
                print(f"üìÑ Page ID: {sync['page_id']}")
                print(f"   üÜî Event ID: {sync['event_id']}")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {sync['status']}")
                print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {sync['last_sync']}")
                print("-" * 100)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion: {e}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        try:
            cursor = self.conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM system_state')
            total_cycles = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM processed_events')
            total_events = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM processed_media')
            total_media = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM processed_transcriptions')
            total_transcriptions = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM notion_sync')
            total_notion_sync = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            cursor.execute('SELECT account_type, COUNT(*) FROM processed_events GROUP BY account_type')
            events_by_account = cursor.fetchall()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª
            cursor.execute('''
                SELECT cycle_id, timestamp, personal_events_processed, work_events_processed,
                       media_processed, transcriptions_processed, notion_synced, errors_count
                FROM system_state 
                ORDER BY created_at DESC LIMIT 1
            ''')
            
            last_cycle = cursor.fetchone()
            
            print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("=" * 50)
            print(f"üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_cycles}")
            print(f"üìÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {total_events}")
            print(f"üé¨ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {total_media}")
            print(f"üé§ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {total_transcriptions}")
            print(f"üìù –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π —Å Notion: {total_notion_sync}")
            
            if events_by_account:
                print("\nüìÖ –°–æ–±—ã—Ç–∏—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
                for account, count in events_by_account:
                    print(f"   {account}: {count}")
            
            if last_cycle:
                print(f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª #{last_cycle['cycle_id']} ({last_cycle['timestamp']}):")
                print(f"   üìÖ –°–æ–±—ã—Ç–∏—è: –ª–∏—á–Ω—ã–µ={last_cycle['personal_events_processed']}, —Ä–∞–±–æ—á–∏–µ={last_cycle['work_events_processed']}")
                print(f"   üé¨ –ú–µ–¥–∏–∞: {last_cycle['media_processed']}, üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {last_cycle['transcriptions_processed']}")
                print(f"   üìù Notion: {last_cycle['notion_synced']}, ‚ùå –û—à–∏–±–∫–∏: {last_cycle['errors_count']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def show_raw_state(self, cycle_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—ã—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT raw_state FROM system_state WHERE cycle_id = ?
            ''', (cycle_id,))
            
            result = cursor.fetchone()
            
            if not result:
                print(f"‚ùå –¶–∏–∫–ª #{cycle_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            raw_state = json.loads(result['raw_state'])
            
            print(f"üîç –°—ã—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞ #{cycle_id}:")
            print("=" * 50)
            print(json.dumps(raw_state, indent=2, ensure_ascii=False))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def search_events(self, query: str, limit: int = 10):
        """–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                FROM processed_events 
                WHERE event_title LIKE ?
                ORDER BY processed_at DESC 
                LIMIT ?
            ''', (f'%{query}%', limit))
            
            events = cursor.fetchall()
            
            if not events:
                print(f"üîç –°–æ–±—ã—Ç–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å –∑–∞–ø—Ä–æ—Å–æ–º '{query}':")
            print("=" * 100)
            
            for event in events:
                print(f"üÜî {event['event_id']}")
                print(f"   üë§ –ê–∫–∫–∞—É–Ω—Ç: {event['account_type']}")
                print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event['event_title']}")
                if event['event_start_time']:
                    print(f"   üìÖ –ù–∞—á–∞–ª–æ: {event['event_start_time']}")
                if event['event_end_time']:
                    print(f"   üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {event['event_end_time']}")
                print(f"   ‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event['processed_at']}")
                print("-" * 100)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    def show_processing_table(self, limit: int = 20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute('''
                SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                FROM processed_events 
                ORDER BY processed_at DESC 
                LIMIT ?
            ''', (limit,))
            
            events = cursor.fetchall()
            
            if not events:
                print("üìä –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –¢–ê–ë–õ–ò–¶–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(events)} —Å–æ–±—ã—Ç–∏–π)")
            print("=" * 150)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            header = f"{'–°–æ–±—ã—Ç–∏–µ':<40} {'–î–∞—Ç–∞/–í—Ä–µ–º—è':<20} {'–ê–∫–∫–∞—É–Ω—Ç':<8} {'–ö–∞–ª–µ–Ω–¥–∞—Ä—å':<12} {'–ú–µ–¥–∏–∞':<12} {'–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è':<15} {'Notion':<12} {'–°—Ç–∞—Ç—É—Å':<10}"
            print(header)
            print("-" * 170)
            
            for event in events:
                event_id = event['event_id']
                account_type = event['account_type']
                event_title = event['event_title'][:37] + "..." if len(event['event_title']) > 40 else event['event_title']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                event_datetime = ""
                if event['event_start_time']:
                    try:
                        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        from datetime import datetime
                        dt = datetime.fromisoformat(event['event_start_time'].replace('Z', '+00:00'))
                        event_datetime = dt.strftime('%Y-%m-%d %H:%M')
                    except:
                        event_datetime = event['event_start_time'][:16] if len(event['event_start_time']) > 16 else event['event_start_time']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
                calendar_status = "‚úÖ" if event['processed_at'] else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
                cursor.execute('''
                    SELECT COUNT(*) FROM processed_media 
                    WHERE file_path LIKE ?
                ''', (f'%{event_id}%',))
                media_count = cursor.fetchone()[0]
                media_status = f"‚úÖ({media_count})" if media_count > 0 else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                cursor.execute('''
                    SELECT COUNT(*) FROM processed_transcriptions 
                    WHERE file_path LIKE ?
                ''', (f'%{event_id}%',))
                trans_count = cursor.fetchone()[0]
                trans_status = f"‚úÖ({trans_count})" if trans_count > 0 else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion
                cursor.execute('''
                    SELECT COUNT(*) FROM notion_sync 
                    WHERE event_id = ?
                ''', (event_id,))
                notion_count = cursor.fetchone()[0]
                notion_status = f"‚úÖ({notion_count})" if notion_count > 0 else "‚ùå"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                if media_count > 0 and trans_count > 0 and notion_count > 0:
                    overall_status = "‚úÖ –ü–æ–ª–Ω—ã–π"
                elif media_count > 0 or trans_count > 0 or notion_count > 0:
                    overall_status = "üîÑ –ß–∞—Å—Ç–∏—á–Ω—ã–π"
                else:
                    overall_status = "‚ùå –¢–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
                row = f"{event_title:<40} {event_datetime:<20} {account_type:<8} {calendar_status:<12} {media_status:<12} {trans_status:<15} {notion_status:<12} {overall_status:<10}"
                print(row)
            
            print("-" * 150)
            print("üìù –õ–µ–≥–µ–Ω–¥–∞:")
            print("  ‚úÖ - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print("  ‚ùå - –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print("  (—á–∏—Å–ª–æ) - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            print("  –ü–æ–ª–Ω—ã–π - –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print("  –ß–∞—Å—Ç–∏—á–Ω—ã–π - –í—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã")
            print("  –¢–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def show_detailed_processing_table(self, limit: int = 10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏."""
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute('''
                SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                FROM processed_events 
                ORDER BY processed_at DESC 
                LIMIT ?
            ''', (limit,))
            
            events = cursor.fetchall()
            
            if not events:
                print("üìä –°–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –û–ë–†–ê–ë–û–¢–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(events)} —Å–æ–±—ã—Ç–∏–π)")
            print("=" * 180)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            header = f"{'–°–æ–±—ã—Ç–∏–µ':<40} {'–ê–∫–∫–∞—É–Ω—Ç':<8} {'–ö–∞–ª–µ–Ω–¥–∞—Ä—å':<20} {'–ú–µ–¥–∏–∞':<20} {'–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è':<20} {'Notion':<20} {'–°—Ç–∞—Ç—É—Å':<10}"
            print(header)
            print("-" * 180)
            
            for event in events:
                event_id = event['event_id']
                account_type = event['account_type']
                event_title = event['event_title'][:37] + "..." if len(event['event_title']) > 40 else event['event_title']
                
                # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                calendar_time = event['processed_at'][:16] if event['processed_at'] else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                cursor.execute('''
                    SELECT processed_at FROM processed_media 
                    WHERE file_path LIKE ? 
                    ORDER BY processed_at DESC LIMIT 1
                ''', (f'%{event_id}%',))
                media_result = cursor.fetchone()
                media_time = media_result[0][:16] if media_result else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                cursor.execute('''
                    SELECT processed_at FROM processed_transcriptions 
                    WHERE file_path LIKE ? 
                    ORDER BY processed_at DESC LIMIT 1
                ''', (f'%{event_id}%',))
                trans_result = cursor.fetchone()
                trans_time = trans_result[0][:16] if trans_result else "‚ùå"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                cursor.execute('''
                    SELECT last_sync FROM notion_sync 
                    WHERE event_id = ? 
                    ORDER BY last_sync DESC LIMIT 1
                ''', (event_id,))
                notion_result = cursor.fetchone()
                notion_time = notion_result[0][:16] if notion_result else "‚ùå"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                completed_stages = sum([
                    1 if calendar_time != "‚ùå" else 0,
                    1 if media_time != "‚ùå" else 0,
                    1 if trans_time != "‚ùå" else 0,
                    1 if notion_time != "‚ùå" else 0
                ])
                
                if completed_stages == 4:
                    overall_status = "‚úÖ –ü–æ–ª–Ω—ã–π"
                elif completed_stages > 1:
                    overall_status = f"üîÑ {completed_stages}/4"
                else:
                    overall_status = "‚ùå –¢–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
                row = f"{event_title:<40} {account_type:<8} {calendar_time:<20} {media_time:<20} {trans_time:<20} {notion_time:<20} {overall_status:<10}"
                print(row)
            
            print("-" * 180)
            print("üìù –õ–µ–≥–µ–Ω–¥–∞:")
            print("  ‚úÖ - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print("  ‚ùå - –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print("  YYYY-MM-DD HH:MM - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            print("  –ü–æ–ª–Ω—ã–π - –í—Å–µ 4 —ç—Ç–∞–ø–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print("  X/4 - –í—ã–ø–æ–ª–Ω–µ–Ω–æ X –∏–∑ 4 —ç—Ç–∞–ø–æ–≤")
            print("  –¢–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def clear_database(self, confirm: bool = False):
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        if not confirm:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!")
            print("üìã –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
            print("   ‚Ä¢ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
            print("   ‚Ä¢ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
            print("   ‚Ä¢ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã")
            print("   ‚Ä¢ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            print("   ‚Ä¢ –í—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion")
            print()
            response = input("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            if response != 'YES':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        try:
            cursor = self.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            tables = ['system_state', 'processed_events', 'processed_media', 'processed_transcriptions', 'notion_sync']
            stats = {}
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                stats[table] = cursor.fetchone()[0]
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:")
            for table, count in stats.items():
                print(f"   ‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            for table in tables:
                cursor.execute(f"DELETE FROM {table}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
            cursor.execute("DELETE FROM sqlite_sequence")
            
            self.conn.commit()
            
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.conn.rollback()
            return False
    
    def delete_event(self, event_id: str, account_type: str = None, confirm: bool = False):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            cursor = self.conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —Å–æ–±—ã—Ç–∏–µ
            if account_type:
                cursor.execute("""
                    SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                    FROM processed_events 
                    WHERE event_id = ? AND account_type = ?
                """, (event_id, account_type))
            else:
                cursor.execute("""
                    SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                    FROM processed_events 
                    WHERE event_id = ?
                """, (event_id,))
            
            events = cursor.fetchall()
            
            if not events:
                print(f"‚ùå –°–æ–±—ã—Ç–∏–µ —Å ID '{event_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            if len(events) > 1:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π —Å ID '{event_id}':")
                for i, event in enumerate(events, 1):
                    print(f"   {i}. {event['account_type']} - {event['event_title']} ({event['event_start_time']})")
                print()
                choice = input("‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö): ").strip()
                
                if choice.lower() == 'all':
                    events_to_delete = events
                else:
                    try:
                        idx = int(choice) - 1
                        if 0 <= idx < len(events):
                            events_to_delete = [events[idx]]
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è")
                            return False
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
                        return False
            else:
                events_to_delete = events
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            print("üìã –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            for event in events_to_delete:
                print(f"   ‚Ä¢ {event['event_id']} ({event['account_type']})")
                print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {event['event_title']}")
                print(f"     –í—Ä–µ–º—è: {event['event_start_time']} - {event['event_end_time']}")
                print(f"     –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event['processed_at']}")
                print()
            
            if not confirm:
                response = input("‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
                if response != 'YES':
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return False
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            deleted_count = 0
            for event in events_to_delete:
                cursor.execute("""
                    DELETE FROM processed_events 
                    WHERE event_id = ? AND account_type = ?
                """, (event['event_id'], event['account_type']))
                deleted_count += cursor.rowcount
            
            self.conn.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            self.conn.rollback()
            return False
    
    def list_events_for_deletion(self, limit: int = 20):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è."""
        try:
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT event_id, account_type, event_title, event_start_time, event_end_time, processed_at
                FROM processed_events 
                ORDER BY processed_at DESC 
                LIMIT ?
            """, (limit,))
            
            events = cursor.fetchall()
            
            if not events:
                print("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            print(f"üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(events)}):")
            print("=" * 120)
            print(f"{'‚Ññ':<3} {'ID':<25} {'–ê–∫–∫–∞—É–Ω—Ç':<8} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<40} {'–í—Ä–µ–º—è':<20} {'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ':<20}")
            print("-" * 120)
            
            for i, event in enumerate(events, 1):
                event_id = event['event_id'][:22] + "..." if len(event['event_id']) > 25 else event['event_id']
                event_title = event['event_title'][:37] + "..." if len(event['event_title']) > 40 else event['event_title']
                event_time = event['event_start_time'][:16] if event['event_start_time'] else "N/A"
                processed_time = event['processed_at'][:16] if event['processed_at'] else "N/A"
                
                print(f"{i:<3} {event_id:<25} {event['account_type']:<8} {event_title:<40} {event_time:<20} {processed_time:<20}")
            
            print("=" * 120)
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'delete-event <–Ω–æ–º–µ—Ä>' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π viewer –¥–ª—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--db', default='data/system_state.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü
    subparsers.add_parser('tables', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    state_parser = subparsers.add_parser('state', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')
    state_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π
    events_parser = subparsers.add_parser('events', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è')
    events_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    events_parser.add_argument('--account', choices=['personal', 'work'], help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–¥–∏–∞
    media_parser = subparsers.add_parser('media', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã')
    media_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    trans_parser = subparsers.add_parser('transcriptions', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
    trans_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion
    notion_parser = subparsers.add_parser('notion', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Notion')
    notion_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—ã—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    raw_parser = subparsers.add_parser('raw', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞')
    raw_parser.add_argument('cycle_id', type=int, help='ID —Ü–∏–∫–ª–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
    search_parser.add_argument('query', help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    search_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    table_parser = subparsers.add_parser('table', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π')
    table_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    detail_parser = subparsers.add_parser('detail', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏')
    detail_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    clear_parser = subparsers.add_parser('clear', help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    clear_parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    delete_parser = subparsers.add_parser('delete-event', help='–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ')
    delete_parser.add_argument('event_id', help='ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    delete_parser.add_argument('--account', choices=['personal', 'work'], help='–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)')
    delete_parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    list_parser = subparsers.add_parser('list-events', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    list_parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    subparsers.add_parser('refresh', help='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º viewer
    viewer = DatabaseViewer(args.db)
    
    if not viewer.connect():
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if args.command == 'tables':
            viewer.show_tables()
        
        elif args.command == 'state':
            viewer.show_system_state(args.limit)
        
        elif args.command == 'events':
            viewer.show_processed_events(args.limit, args.account)
        
        elif args.command == 'media':
            viewer.show_processed_media(args.limit)
        
        elif args.command == 'transcriptions':
            viewer.show_processed_transcriptions(args.limit)
        
        elif args.command == 'notion':
            viewer.show_notion_sync(args.limit)
        
        elif args.command == 'stats':
            viewer.show_statistics()
        
        elif args.command == 'raw':
            viewer.show_raw_state(args.cycle_id)
        
        elif args.command == 'search':
            viewer.search_events(args.query, args.limit)
        
        elif args.command == 'table':
            viewer.show_processing_table(args.limit)
        
        elif args.command == 'detail':
            viewer.show_detailed_processing_table(args.limit)
        
        elif args.command == 'clear':
            viewer.clear_database(confirm=args.force)
        
        elif args.command == 'delete-event':
            viewer.delete_event(args.event_id, args.account, confirm=args.force)
        
        elif args.command == 'list-events':
            viewer.list_events_for_deletion(args.limit)
        
        elif args.command == 'refresh':
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            viewer.disconnect()
            if viewer.connect():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                viewer.show_statistics()
                print("\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                viewer.show_processing_table(20)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    finally:
        viewer.disconnect()


if __name__ == '__main__':
    main()
