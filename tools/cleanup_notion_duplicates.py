#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Notion.
"""

import os
import sys
import requests
from collections import defaultdict
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def cleanup_notion_duplicates(dry_run=True):
    """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ Notion."""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notion_token = os.getenv('NOTION_TOKEN')
    database_id = os.getenv('NOTION_DATABASE_ID')
    
    if not notion_token or not database_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NOTION_TOKEN –∏–ª–∏ NOTION_DATABASE_ID")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
        
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Notion...")
        print("=" * 60)
        print(f"üîç –†–µ–∂–∏–º: {'–¢–ï–°–¢–û–í–´–ô (dry run)' if dry_run else '–†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï'}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_pages = []
        has_more = True
        start_cursor = None
        
        while has_more:
            url = f"https://api.notion.com/v1/databases/{database_id}/query"
            payload = {
                "page_size": 100
            }
            if start_cursor:
                payload["start_cursor"] = start_cursor
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            all_pages.extend(data['results'])
            has_more = data['has_more']
            start_cursor = data.get('next_cursor')
        
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Notion: {len(all_pages)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        title_groups = defaultdict(list)
        
        for page in all_pages:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = ""
            if 'properties' in page and 'Name' in page['properties']:
                title_prop = page['properties']['Name']
                if title_prop['type'] == 'title' and title_prop['title']:
                    title = title_prop['title'][0]['text']['content']
            
            if title:  # –¢–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                title_groups[title].append({
                    'page_id': page['id'],
                    'title': title,
                    'created_time': page['created_time'],
                    'page': page
                })
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_to_remove = []
        total_duplicates = 0
        
        for title, pages in title_groups.items():
            if len(pages) > 1:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é)
                pages.sort(key=lambda x: x['created_time'], reverse=True)
                
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (—Å–∞–º–æ–π –Ω–æ–≤–æ–π) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                for page in pages[1:]:
                    duplicates_to_remove.append({
                        'page_id': page['page_id'],
                        'title': title,
                        'created_time': page['created_time'],
                        'reason': f"–î—É–±–ª–∏–∫–∞—Ç '{title}' (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é: {pages[0]['created_time']})"
                    })
                    total_duplicates += 1
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {total_duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        print()
        
        if not duplicates_to_remove:
            print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        print("üìã –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        print("-" * 40)
        for i, duplicate in enumerate(duplicates_to_remove[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i:2d}. {duplicate['title'][:50]:<50} | {duplicate['created_time'][:19]}")
        
        if len(duplicates_to_remove) > 10:
            print(f"    ... –∏ –µ—â–µ {len(duplicates_to_remove) - 10} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print()
        
        if dry_run:
            print("üîç –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python tools/cleanup_notion_duplicates.py --execute")
            return True
        
        # –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        print("üóëÔ∏è –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        deleted_count = 0
        errors = []
        
        for i, duplicate in enumerate(duplicates_to_remove, 1):
            try:
                page_id = duplicate['page_id']
                title = duplicate['title']
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                url = f"https://api.notion.com/v1/pages/{page_id}"
                response = requests.patch(url, headers=headers, json={"archived": True})
                response.raise_for_status()
                
                deleted_count += 1
                print(f"‚úÖ {i:2d}/{len(duplicates_to_remove)} –£–¥–∞–ª–µ–Ω–∞: {title[:50]}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {duplicate['title']}: {e}"
                errors.append(error_msg)
                print(f"‚ùå {i:2d}/{len(duplicates_to_remove)} {error_msg}")
        
        print()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        
        if errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in errors:
                print(f"  - {error}")
        
        return len(errors) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = "--execute" not in sys.argv
    
    if dry_run:
        print("üîç –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (dry run)")
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --execute")
        print()
    
    success = cleanup_notion_duplicates(dry_run=dry_run)
    
    if success:
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
