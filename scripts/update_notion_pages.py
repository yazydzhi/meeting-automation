#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Notion
—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.
"""

import os
import sys
import json
import requests
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    from config_manager import ConfigManager
    from notion_templates import add_meeting_details_to_page
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


def get_all_notion_pages(notion_token: str, database_id: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        database_id: ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    """
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    
    all_pages = []
    has_more = True
    start_cursor = None
    
    while has_more:
        query_data = {
            "page_size": 100,
            "sorts": [
                {
                    "property": "Date",
                    "direction": "descending"
                }
            ]
        }
        
        if start_cursor:
            query_data["start_cursor"] = start_cursor
        
        try:
            response = requests.post(url, headers=headers, json=query_data)
            response.raise_for_status()
            
            data = response.json()
            pages = data.get("results", [])
            all_pages.extend(pages)
            
            has_more = data.get("has_more", False)
            start_cursor = data.get("next_cursor")
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
            break
    
    return all_pages


def extract_page_data(page: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        page: –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Notion API
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    properties = page.get("properties", {})
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    title_prop = properties.get("Name", {})
    title = ""
    if title_prop.get("title"):
        title = title_prop["title"][0].get("text", {}).get("content", "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
    date_prop = properties.get("Date", {}).get("date", {})
    date = date_prop.get("start", "") if date_prop else ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Event ID
    event_id_prop = properties.get("Event ID", {})
    event_id = ""
    if event_id_prop.get("rich_text"):
        event_id = event_id_prop["rich_text"][0].get("text", {}).get("content", "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_prop = properties.get("Calendar", {})
    calendar_type = ""
    if calendar_prop.get("select"):
        calendar_type = calendar_prop["select"].get("name", "")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    attendees_prop = properties.get("Attendees", {})
    attendees = []
    if attendees_prop.get("rich_text"):
        attendees_text = attendees_prop["rich_text"][0].get("text", {}).get("content", "")
        if attendees_text:
            attendees = [email.strip() for email in attendees_text.split(",")]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    meeting_link_prop = properties.get("Meeting Link", {})
    meeting_link = meeting_link_prop.get("url", "") if meeting_link_prop else ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Drive Folder
    drive_folder_prop = properties.get("Drive Folder", {})
    drive_folder = ""
    if drive_folder_prop.get("rich_text"):
        drive_folder = drive_folder_prop["rich_text"][0].get("text", {}).get("content", "")
    
    return {
        "page_id": page.get("id", ""),
        "title": title,
        "date": date,
        "event_id": event_id,
        "calendar_type": calendar_type,
        "attendees": attendees,
        "meeting_link": meeting_link,
        "drive_folder": drive_folder,
        "url": page.get("url", "")
    }


def check_page_content(notion_token: str, page_id: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        page_id: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        blocks = data.get("results", [])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        has_description = False
        has_location = False
        has_attendees = False
        has_meeting_link = False
        has_calendar_source = False
        
        for block in blocks:
            if block.get("type") == "paragraph":
                rich_text = block.get("paragraph", {}).get("rich_text", [])
                if rich_text:
                    content = rich_text[0].get("text", {}).get("content", "")
                    if "üìã –û–ø–∏—Å–∞–Ω–∏–µ:" in content:
                        has_description = True
                    elif "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:" in content:
                        has_location = True
                    elif "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:" in content:
                        has_attendees = True
                    elif "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:" in content:
                        has_meeting_link = True
                    elif "üìÖ –ò—Å—Ç–æ—á–Ω–∏–∫:" in content:
                        has_calendar_source = True
        
        return {
            "has_description": has_description,
            "has_location": has_location,
            "has_attendees": has_attendees,
            "has_meeting_link": has_meeting_link,
            "has_calendar_source": has_calendar_source,
            "total_blocks": len(blocks)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}: {e}")
        return {}


def update_page_with_details(notion_token: str, page_data: Dict[str, Any], content_info: Dict[str, Any]) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
    
    Args:
        notion_token: –¢–æ–∫–µ–Ω –¥–ª—è API Notion
        page_data: –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        
    Returns:
        True –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    needs_update = False
    
    if not content_info.get("has_description") and page_data.get("title"):
        needs_update = True
    
    if not content_info.get("has_location"):
        needs_update = True
    
    if not content_info.get("has_attendees") and page_data.get("attendees"):
        needs_update = True
    
    if not content_info.get("has_meeting_link") and page_data.get("meeting_link"):
        needs_update = True
    
    if not content_info.get("has_calendar_source") and page_data.get("calendar_type"):
        needs_update = True
    
    if not needs_update:
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    event_data = {
        "title": page_data.get("title", ""),
        "description": "",  # –ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        "location": "",     # –ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        "attendees": page_data.get("attendees", []),
        "meeting_link": page_data.get("meeting_link", ""),
        "calendar_source": page_data.get("calendar_type", ""),
        "event_id": page_data.get("event_id", ""),
        "folder_link": page_data.get("drive_folder", "")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not content_info.get("has_description"):
        event_data["description"] = f"–í—Å—Ç—Ä–µ—á–∞: {page_data.get('title', '')}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not content_info.get("has_location"):
        event_data["location"] = "–û–Ω–ª–∞–π–Ω" if page_data.get("meeting_link") else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        success = add_meeting_details_to_page(
            notion_token,
            page_data["page_id"],
            event_data,
            None  # –ë–µ–∑ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        )
        
        if success:
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {page_data['title']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_data['title']}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_data['title']}: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü Notion")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config_manager = ConfigManager()
        notion_config = config_manager.get_notion_config()
        notion_token = notion_config.get('token')
        database_id = notion_config.get('database_id')
        
        if not notion_token or not database_id:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Notion —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id}")
        print(f"   –¢–æ–∫–µ–Ω: {'*' * 10 + notion_token[-4:] if notion_token else '–ù–ï–¢'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("\nüìÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    pages = get_all_notion_pages(notion_token, database_id)
    
    if not pages:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü...")
    
    updated_count = 0
    total_pages = len(pages)
    
    for i, page in enumerate(pages, 1):
        print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i}/{total_pages}: {page.get('id', '')}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_data = extract_page_data(page)
        
        if not page_data.get("title"):
            print("   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            continue
        
        print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {page_data['title']}")
        print(f"   üìÖ –î–∞—Ç–∞: {page_data['date']}")
        print(f"   üÜî Event ID: {page_data['event_id']}")
        print(f"   üì± –°—Å—ã–ª–∫–∞: {page_data['url']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_info = check_page_content(notion_token, page_data["page_id"])
        
        if content_info:
            print(f"   üìä –ë–ª–æ–∫–æ–≤: {content_info.get('total_blocks', 0)}")
            print(f"   üìã –û–ø–∏—Å–∞–Ω–∏–µ: {'‚úÖ' if content_info.get('has_description') else '‚ùå'}")
            print(f"   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {'‚úÖ' if content_info.get('has_location') else '‚ùå'}")
            print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {'‚úÖ' if content_info.get('has_attendees') else '‚ùå'}")
            print(f"   üîó –°—Å—ã–ª–∫–∞: {'‚úÖ' if content_info.get('has_meeting_link') else '‚ùå'}")
            print(f"   üìÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {'‚úÖ' if content_info.get('has_calendar_source') else '‚ùå'}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if update_page_with_details(notion_token, page_data, content_info):
            updated_count += 1
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        import time
        time.sleep(0.5)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   –ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {total_pages - updated_count}")
    
    if updated_count > 0:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç—Ä–∞–Ω–∏—Ü!")
    else:
        print(f"\n‚è≠Ô∏è –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


if __name__ == "__main__":
    main()
