#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å, –ª–æ–≥–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import os
import sys
import time
import psutil
import requests
from datetime import datetime, timedelta
from pathlib import Path
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
    try:
        from meeting_automation_personal_only import load_env_or_fail
    except ImportError:
        try:
            from src.config_manager import ConfigManager
            def load_env_or_fail():
                config = ConfigManager()
                return config.config
        except ImportError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            sys.exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class ServiceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        self.project_dir = Path(__file__).parent.parent
        self.logs_dir = self.project_dir / "logs"
        self.data_dir = self.project_dir / "data"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        try:
            self.env = load_env_or_fail()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            self.env = {}
    
    def check_service_process(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–∞."""
        service_processes = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cpu_percent', 'memory_info']):
            try:
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                if 'service_manager.py' in cmdline:
                    service_processes.append({
                        'pid': proc.info['pid'],
                        'cpu_percent': proc.info['cpu_percent'],
                        'memory_mb': proc.info['memory_info'].rss / 1024 / 1024,
                        'cmdline': cmdline
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        return {
            'running': len(service_processes) > 0,
            'processes': service_processes,
            'count': len(service_processes)
        }
    
    def check_logs(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞."""
        log_files = list(self.logs_dir.glob("*.log"))
        latest_log = None
        log_stats = {}
        
        for log_file in log_files:
            if log_file.name.startswith("service_"):
                latest_log = log_file
                break
        
        if latest_log and latest_log.exists():
            try:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                with open(latest_log, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
                error_count = sum(1 for line in lines if 'ERROR' in line or '‚ùå' in line)
                warning_count = sum(1 for line in lines if 'WARNING' in line or '‚ö†Ô∏è' in line)
                info_count = sum(1 for line in lines if 'INFO' in line or '‚úÖ' in line)
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                last_activity = None
                for line in reversed(lines):
                    if 'INFO' in line or 'ERROR' in line or 'WARNING' in line:
                        try:
                            timestamp_str = line.split(' - ')[0]
                            last_activity = datetime.fromisoformat(timestamp_str.replace(' ', 'T'))
                            break
                        except:
                            continue
                
                log_stats = {
                    'latest_file': latest_log.name,
                    'total_lines': len(lines),
                    'errors': error_count,
                    'warnings': warning_count,
                    'info': info_count,
                    'last_activity': last_activity,
                    'file_size_mb': latest_log.stat().st_size / 1024 / 1024
                }
                
            except Exception as e:
                log_stats = {'error': str(e)}
        else:
            log_stats = {'error': '–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        return log_stats
    
    def check_data_directory(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
        synced_dir = self.data_dir / "synced"
        sync_status_file = synced_dir / ".sync_status.json"
        
        data_stats = {
            'synced_dir_exists': synced_dir.exists(),
            'sync_status_exists': sync_status_file.exists(),
            'total_size_mb': 0,
            'file_count': 0
        }
        
        if synced_dir.exists():
            try:
                total_size = 0
                file_count = 0
                
                for file_path in synced_dir.rglob("*"):
                    if file_path.is_file():
                        total_size += file_path.stat().st_size
                        file_count += 1
                
                data_stats['total_size_mb'] = total_size / 1024 / 1024
                data_stats['file_count'] = file_count
                
            except Exception as e:
                data_stats['error'] = str(e)
        
        return data_stats
    
    def check_telegram_connection(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram."""
        token = self.env.get("TELEGRAM_BOT_TOKEN")
        chat_id = self.env.get("TELEGRAM_CHAT_ID")
        
        if not token or not chat_id:
            return {'available': False, 'error': '–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            response = requests.get(
                f"https://api.telegram.org/bot{token}/getMe",
                timeout=10
            )
            response.raise_for_status()
            
            bot_info = response.json()
            if bot_info.get('ok'):
                return {
                    'available': True,
                    'bot_name': bot_info['result']['first_name'],
                    'username': bot_info['result']['username']
                }
            else:
                return {'available': False, 'error': '–û—à–∏–±–∫–∞ API Telegram'}
                
        except Exception as e:
            return {'available': False, 'error': str(e)}
    
    def check_google_services(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Google —Å–µ—Ä–≤–∏—Å–æ–≤."""
        try:
            from meeting_automation_personal_only import get_google_services
            
            cal_svc, drive_svc = get_google_services(self.env)
            
            return {
                'calendar_available': cal_svc is not None,
                'drive_available': drive_svc is not None,
                'status': 'available'
            }
            
        except Exception as e:
            return {
                'calendar_available': False,
                'drive_available': False,
                'status': 'error',
                'error': str(e)
            }
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        process_info = self.check_service_process()
        log_info = self.check_logs()
        data_info = self.check_data_directory()
        telegram_info = self.check_telegram_connection()
        google_info = self.check_google_services()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä *–û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ï–†–í–ò–°–ê*\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        report += "üñ•Ô∏è *–ü–†–û–¶–ï–°–°–´:*\n"
        if process_info['running']:
            report += f"‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω ({process_info['count']} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)\n"
            for proc in process_info['processes']:
                report += f"  ‚Ä¢ PID {proc['pid']}: CPU {proc['cpu_percent']:.1f}%, RAM {proc['memory_mb']:.1f}MB\n"
        else:
            report += "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω\n"
        report += "\n"
        
        # –õ–æ–≥–∏
        report += "üìã *–õ–û–ì–ò:*\n"
        if 'error' not in log_info:
            report += f"üìÑ –§–∞–π–ª: {log_info['latest_file']}\n"
            report += f"üìä –°—Ç—Ä–æ–∫: {log_info['total_lines']}\n"
            report += f"‚ùå –û—à–∏–±–æ–∫: {log_info['errors']}\n"
            report += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {log_info['warnings']}\n"
            report += f"‚úÖ –ò–Ω—Ñ–æ: {log_info['info']}\n"
            report += f"üíæ –†–∞–∑–º–µ—Ä: {log_info['file_size_mb']:.2f}MB\n"
            
            if log_info['last_activity']:
                time_diff = datetime.now() - log_info['last_activity']
                if time_diff < timedelta(minutes=5):
                    report += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥\n"
                else:
                    report += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_diff.seconds // 3600} —á –Ω–∞–∑–∞–¥\n"
        else:
            report += f"‚ùå –û—à–∏–±–∫–∞: {log_info['error']}\n"
        report += "\n"
        
        # –î–∞–Ω–Ω—ã–µ
        report += "üíæ *–î–ê–ù–ù–´–ï:*\n"
        if data_info['synced_dir_exists']:
            report += f"üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {data_info['file_count']} —Ñ–∞–π–ª–æ–≤\n"
            report += f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {data_info['total_size_mb']:.2f}MB\n"
        else:
            report += "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
        report += "\n"
        
        # Telegram
        report += "üì± *TELEGRAM:*\n"
        if telegram_info['available']:
            report += f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: @{telegram_info['username']}\n"
        else:
            report += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {telegram_info['error']}\n"
        report += "\n"
        
        # Google —Å–µ—Ä–≤–∏—Å—ã
        report += "üîó *GOOGLE –°–ï–†–í–ò–°–´:*\n"
        if google_info['status'] == 'available':
            report += f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {'‚úÖ' if google_info['calendar_available'] else '‚ùå'}\n"
            report += f"üíæ Drive: {'‚úÖ' if google_info['drive_available'] else '‚ùå'}\n"
        else:
            report += f"‚ùå –û—à–∏–±–∫–∞: {google_info['error']}\n"
        
        return report
    
    def save_report(self, report: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.logs_dir / f"monitor_report_{timestamp}.txt"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report)
            print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_monitoring(self, save_to_file: bool = False):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.project_dir}")
        print("=" * 60)
        
        report = self.generate_report()
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_to_file:
            self.save_report(report)
        
        print("=" * 60)
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("--save", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª")
    parser.add_argument("--continuous", action="store_true", help="–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    parser.add_argument("--interval", type=int, default=60, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    args = parser.parse_args()
    
    monitor = ServiceMonitor()
    
    if args.continuous:
        print(f"üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {args.interval} —Å–µ–∫—É–Ω–¥ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        try:
            while True:
                monitor.run_monitoring(args.save)
                time.sleep(args.interval)
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        monitor.run_monitoring(args.save)


if __name__ == "__main__":
    main()
