#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –¥–ª—è –†–ê–ë–û–ß–ï–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
"""

import os
import sys
import argparse
import logging
import time
import subprocess
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from calendar_alternatives import get_calendar_provider, CalendarEvent
    from drive_alternatives import get_drive_provider, DriveFile
    from config_manager import ConfigManager
    from notion_templates import create_page_with_template
    from media_processor import get_media_processor
    from drive_sync import get_drive_sync
    from audio_processor import AudioProcessor
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def convert_html_to_readable_text(html_text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å HTML —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π Markdown —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Notion."""
    import re
    
    if not html_text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ Markdown
    text = html_text
    
    # –ó–∞–º–µ–Ω—è–µ–º HTML —Ç–µ–≥–∏ –Ω–∞ Markdown
    replacements = [
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        (r'<h1[^>]*>(.*?)</h1>', r'# \1'),
        (r'<h2[^>]*>(.*?)</h2>', r'## \1'),
        (r'<h3[^>]*>(.*?)</h3>', r'### \1'),
        
        # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        (r'<b[^>]*>(.*?)</b>', r'**\1**'),
        (r'<strong[^>]*>(.*?)</strong>', r'**\1**'),
        
        # –ö—É—Ä—Å–∏–≤
        (r'<i[^>]*>(.*?)</i>', r'*\1*'),
        (r'<em[^>]*>(.*?)</em>', r'*\1*'),
        
        # –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
        (r'<u[^>]*>(.*?)</u>', r'__\1__'),
        
        # –°–ø–∏—Å–∫–∏
        (r'<ul[^>]*>(.*?)</ul>', r'\1'),
        (r'<ol[^>]*>(.*?)</ol>', r'\1'),
        (r'<li[^>]*>(.*?)</li>', r'‚Ä¢ \1'),
        
        # –°—Å—ã–ª–∫–∏
        (r'<a[^>]*href="([^"]*)"[^>]*>(.*?)</a>', r'[\2](\1)'),
        
        # –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        (r'<br\s*/?>', r'\n'),
        (r'<br>', r'\n'),
        
        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        (r'<p[^>]*>(.*?)</p>', r'\1\n\n'),
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        (r'<hr\s*/?>', r'---\n'),
        (r'<hr>', r'---\n'),
        
        # –¶–∏—Ç–∞—Ç—ã
        (r'<blockquote[^>]*>(.*?)</blockquote>', r'> \1'),
        
        # –ö–æ–¥
        (r'<code[^>]*>(.*?)</code>', r'`\1`'),
        (r'<pre[^>]*>(.*?)</pre>', r'```\n\1\n```'),
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for pattern, replacement in replacements:
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE | re.DOTALL)
    
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('&nbsp;', ' ')
    text = text.replace('&amp;', '&')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&quot;', '"')
    text = text.replace('&#39;', "'")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('\\n', '\n')
    text = text.replace('\\t', '\t')
    text = text.replace('\\r', '\n')
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r' +', ' ', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Notion (–º–∞–∫—Å–∏–º—É–º 1800 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) > 1800:
        text = text[:1800] + "...\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Notion]"
    
    return text

def create_enhanced_meeting_template(
    title: str,
    start_time: datetime,
    end_time: datetime,
    attendees: List[str],
    description: str,
    meeting_links: List[str],
    meeting_link: str,
    folder_link: str,
    location: str
) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å—Ç—Ä–µ—á–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    template = {
        "children": []
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å—Ç—Ä–µ—á–∏
    template["children"].append({
        "object": "block",
        "type": "heading_1",
        "heading_1": {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": f"üìã {title}"
                    }
                }
            ]
        }
    })
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ
    template["children"].append({
        "object": "block",
        "type": "heading_2",
        "heading_2": {
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ"
                    }
                }
            ]
        }
    })
    
    # –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏
    time_info = f"‚è∞ {start_time.strftime('%d.%m.%Y %H:%M')} - {end_time.strftime('%H:%M')}"
    template["children"].append({
        "object": "block",
        "type": "callout",
        "callout": {
            "icon": {"emoji": "‚è∞"},
            "rich_text": [
                {
                    "type": "text",
                    "text": {
                        "content": time_info
                    }
                }
            ]
        }
    })
    
    # –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if location:
        template["children"].append({
            "object": "block",
            "type": "callout",
            "callout": {
                "icon": {"emoji": "üìç"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üìç {location}"
                        }
                    }
                ]
            }
        })
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    if attendees:
        template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"
                        }
                    }
                ]
            }
        })
        
        for attendee in attendees:
            template["children"].append({
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": attendee
                            }
                        }
                    ]
                }
            })
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    all_links = []
    if meeting_link:
        all_links.append(meeting_link)
    if meeting_links:
        all_links.extend(meeting_links)
    
    if all_links:
        template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üîó –°—Å—ã–ª–∫–∏"
                        }
                    }
                ]
            }
        })
        
        for link in all_links:
            content = link
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏ –¥–ª—è Notion (–º–∞–∫—Å–∏–º—É–º 1800 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(content) > 1800:
                content = content[:1800] + "...\n\n[–°—Å—ã–ª–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–∞ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Notion]"
            
            template["children"].append({
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [
                        {
                            "type": "text",
                            "text": {
                                "content": content
                            }
                        }
                    ]
                }
            })
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    if description:
        template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üìù –û–ø–∏—Å–∞–Ω–∏–µ"
                        }
                    }
                ]
            }
        })
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        paragraphs = description.split('\n\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ø–∏—Å–∫–æ–º
                if paragraph.strip().startswith('‚Ä¢'):
                    # –≠—Ç–æ —Å–ø–∏—Å–æ–∫
                    items = paragraph.strip().split('\n')
                    for item in items:
                        if item.strip():
                            content = item.strip()[1:].strip()  # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è Notion (–º–∞–∫—Å–∏–º—É–º 1800 —Å–∏–º–≤–æ–ª–æ–≤)
                            if len(content) > 1800:
                                content = content[:1800] + "...\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Notion]"
                            
                            template["children"].append({
                                "object": "block",
                                "type": "bulleted_list_item",
                                "bulleted_list_item": {
                                    "rich_text": [
                                        {
                                            "type": "text",
                                            "text": {
                                                "content": content
                                            }
                                        }
                                    ]
                                }
                            })
                else:
                    # –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                    content = paragraph.strip()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è Notion (–º–∞–∫—Å–∏–º—É–º 1800 —Å–∏–º–≤–æ–ª–æ–≤)
                    if len(content) > 1800:
                        content = content[:1800] + "...\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Notion]"
                    
                    template["children"].append({
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {
                                        "content": content
                                    }
                                }
                            ]
                        }
                    })
    
    # –ü–∞–ø–∫–∞ Google Drive
    if folder_link:
        template["children"].append({
            "object": "block",
            "type": "heading_2",
            "heading_2": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": "üìÅ –§–∞–π–ª—ã –≤—Å—Ç—Ä–µ—á–∏"
                        }
                    }
                ]
            }
        })
        
        template["children"].append({
            "object": "block",
            "type": "callout",
            "callout": {
                "icon": {"emoji": "üìÅ"},
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"üìÅ –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏: {folder_link}"
                        }
                    }
                ]
            }
        })
    
    return template

def should_update_notion_page(event: CalendarEvent, page_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion."""
    try:
        # –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def update_work_notion_page(event: CalendarEvent, page_id: str, folder_link: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion."""
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {page_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–ò–û –∏ email
        attendees_info = []
        if event.attendees:
            try:
                from config.employee_database import get_attendees_with_names
                attendees_info = get_attendees_with_names(event.attendees)
            except ImportError:
                # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                for attendee in event.attendees:
                    if '@' in attendee:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ email (—É–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω)
                        name = attendee.split('@')[0]
                        # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        name = name.replace('.', ' ').replace('_', ' ').title()
                        attendees_info.append(f"{name} ({attendee})")
                    else:
                        attendees_info.append(attendee)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        meeting_description = ""
        meeting_links = []
        if event.description:
            import re
            url_pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+'
            urls = re.findall(url_pattern, event.description)
            
            for url in urls:
                if 'meet.google.com' in url or 'zoom.us' in url or 'telemost' in url.lower():
                    meeting_links.append(url)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
            meeting_description = convert_html_to_readable_text(event.description)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        updated_template = create_enhanced_meeting_template(
            event.title,
            event.start,
            event.end,
            attendees_info,
            meeting_description,
            meeting_links,
            event.meeting_link,
            folder_link,
            event.location
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ API Notion
        notion_token = os.getenv('NOTION_TOKEN')
        if not notion_token:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_TOKEN")
            return False
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if clear_notion_page_content(notion_token, page_id):
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if apply_notion_template(notion_token, page_id, updated_template):
                logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {page_id}")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {page_id}")
                return False
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
        return False

def clear_notion_page_content(notion_token: str, page_id: str) -> bool:
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json",
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        response = requests.get(url, headers=headers)
        
        if response.status_code != 200:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return False
        
        blocks = response.json().get("results", [])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ - –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        for block in blocks[1:]:
            delete_url = f"https://api.notion.com/v1/blocks/{block['id']}"
            delete_response = requests.delete(delete_url, headers=headers)
            
            if delete_response.status_code != 200:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ {block['id']}: {delete_response.status_code}")
        
        logger.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—á–∏—â–µ–Ω–æ: {page_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False

def apply_notion_template(notion_token: str, page_id: str, template: Dict[str, Any]) -> bool:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json",
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        url = f"https://api.notion.com/v1/blocks/{page_id}/children"
        
        response = requests.patch(url, headers=headers, json=template)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {page_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {response.status_code}")
            logger.error(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return False

def load_personal_exclusions() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    exclusions_file = Path("config/personal_exclusions.txt")
    exclusions = []
    
    if not exclusions_file.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {exclusions_file}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
    
    try:
        with open(exclusions_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line and not line.startswith('#'):
                    exclusions.append(line)
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ {exclusions_file}")
        return exclusions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']

def notify(bot_token: str, chat_id: str, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    try:
        import requests
        r = requests.get(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            params={"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}, 
            timeout=15
        )
        r.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/work_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def load_work_environment():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if os.path.exists('env.work'):
            from dotenv import load_dotenv
            load_dotenv('env.work')
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª env.work –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º .env")
            from dotenv import load_dotenv
            load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = [
            'NOTION_TOKEN',
            'NOTION_DATABASE_ID',
            'TELEGRAM_BOT_TOKEN',
            'TELEGRAM_CHAT_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def get_work_calendar_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
        calendar_type = config.get_calendar_provider_type()
        calendar_config = config.get_calendar_provider_config()
        
        logger.info(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_type}")
        
        if calendar_type == 'google_api':
            # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            logger.warning("‚ö†Ô∏è Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return get_calendar_provider(calendar_type, **calendar_config)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            return get_calendar_provider(calendar_type, **calendar_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

def get_work_drive_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
        drive_type = config.get_drive_provider_type()
        drive_config = config.get_drive_provider_config()
        
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive: {drive_type}")
        
        if drive_type == 'google_api':
            # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            logger.warning("‚ö†Ô∏è Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return get_drive_provider(drive_type, **drive_config)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            return get_drive_provider(drive_type, **drive_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Google Drive: {e}")
        return None

def filter_work_events(events: List[CalendarEvent]) -> tuple[List[CalendarEvent], List[Dict[str, Any]]]:
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    filtered_events = []
    excluded_events = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    personal_keywords = load_personal_exclusions()
    
    for event in events:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        is_personal = False
        matched_keywords = []
        
        for keyword in personal_keywords:
            if keyword.lower() in event.title.lower():
                is_personal = True
                matched_keywords.append(keyword)
        
        if is_personal:
            logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
            excluded_events.append({
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'reason': '–õ–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ',
                'keywords': matched_keywords
            })
            continue
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º–∏
        filtered_events.append(event)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
    
    return filtered_events, excluded_events

def format_work_folder_name(event: CalendarEvent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    start_time = event.start
    title = event.title
    
    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD hh-mm –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    folder_name = f"{start_time.strftime('%Y-%m-%d %H-%M')} {title}"
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
    folder_name = folder_name.replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
    
    return folder_name

def check_notion_page_exists(notion_token: str, database_id: str, event_id: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º Event ID –≤ Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ Event ID
        filter_data = {
            "filter": {
                "property": "Event ID",
                "rich_text": {
                    "equals": event_id
                }
            }
        }
        
        response = requests.post(
            f"https://api.notion.com/v1/databases/{database_id}/query",
            headers=headers,
            json=filter_data
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', [])
            if results:
                page_id = results[0]['id']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_id}")
                return page_id
            else:
                logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Event ID '{event_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ""
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return ""

def get_notion_database_schema(notion_token: str, database_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
        }
        
        response = requests.get(
            f"https://api.notion.com/v1/databases/{database_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            properties = data.get('properties', {})
            logger.info(f"üîç –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion:")
            for prop_name, prop_data in properties.items():
                prop_type = prop_data.get('type', 'unknown')
                logger.info(f"   üìù {prop_name}: {prop_type}")
            return properties
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            logger.error(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return {}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def create_work_notion_page(event: CalendarEvent, folder_link: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        template_path = "templates/meeting_page_template.json"
        if not os.path.exists(template_path):
            logger.error(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return ""
        
        with open(template_path, 'r', encoding='utf-8') as f:
            import json
            template = json.load(f)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
        template_data = {
            "title": event.title,
            "start_time": event.start.strftime('%H:%M'),
            "end_time": event.end.strftime('%H:%M'),
            "date": event.start.strftime('%Y-%m-%d'),
            "description": event.description,
            "location": event.location,
            "attendees": event.attendees,
            "meeting_link": event.meeting_link,
            "folder_link": folder_link,
            "calendar_source": event.calendar_source
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–ò–û –∏ email
        attendees_info = []
        if event.attendees:
            try:
                from config.employee_database import get_attendees_with_names
                attendees_info = get_attendees_with_names(event.attendees)
            except ImportError:
                # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                for attendee in event.attendees:
                    if '@' in attendee:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ email
                        name = attendee.split('@')[0]
                        attendees_info.append(f"{name} ({attendee})")
                    else:
                        attendees_info.append(attendee)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        meeting_description = ""
        meeting_links = []
        if event.description:
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            import re
            url_pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+'
            urls = re.findall(url_pattern, event.description)
            
            for url in urls:
                if 'meet.google.com' in url or 'zoom.us' in url or 'telemost' in url.lower():
                    meeting_links.append(url)
            
            # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            clean_description = re.sub(url_pattern, '', event.description).strip()
            meeting_description = clean_description
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        if not notion_token:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_TOKEN")
            return ""
        
        if not database_id:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_DATABASE_ID")
            return ""
        
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion –¥–ª—è: {event.title}")
        logger.info(f"   üìÖ –î–∞—Ç–∞: {event.start.strftime('%Y-%m-%d %H:%M')}")
        logger.info(f"   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id[:8]}...")
        logger.info(f"   üîë –¢–æ–∫–µ–Ω: {notion_token[:8]}...")
        
        # –°–æ–∑–¥–∞–µ–º Event ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import hashlib
        event_hash = hashlib.md5(f"{event.start.isoformat()}{event.title}".encode()).hexdigest()[:8]
        event_id = f"work_{event_hash}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–∫–∏–º Event ID
        existing_page_id = check_notion_page_exists(notion_token, database_id, event_id)
        if existing_page_id:
            logger.info(f"‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return existing_page_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schema = get_notion_database_schema(notion_token, database_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Notion (—Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        page_properties = {
            "Name": {  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                "title": [
                    {
                        "text": {
                            "content": event.title
                        }
                    }
                ]
            },
            "Date": {  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                "date": {
                    "start": event.start.isoformat(),
                    "end": event.end.isoformat()
                }
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ä–∞–±–æ—á–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if "Calendar" in schema:
            page_properties["Calendar"] = {
                "select": {
                    "name": "Work"
                }
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –§–ò–û –∏ email
        if event.attendees and "Attendees" in schema:
            page_properties["Attendees"] = {
                "rich_text": [
                    {
                        "text": {
                            "content": ", ".join(attendees_info) if attendees_info else ", ".join(event.attendees)
                        }
                    }
                ]
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        if event.meeting_link and "Meeting Link" in schema:
            page_properties["Meeting Link"] = {
                "url": event.meeting_link
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É Google Drive
        if folder_link and "Drive Folder" in schema:
            page_properties["Drive Folder"] = {
                "url": folder_link
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
        if "Event ID" in schema:
            page_properties["Event ID"] = {
                "rich_text": [
                    {
                        "text": {
                            "content": event_id
                        }
                    }
                ]
            }
        
        logger.info(f"üîß –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {list(page_properties.keys())}")
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–µ
        enhanced_template = create_enhanced_meeting_template(
            event.title,
            event.start,
            event.end,
            attendees_info,
            meeting_description,
            meeting_links,
            event.meeting_link,
            folder_link,
            event.location
        )
        
        page_id = create_page_with_template(
            notion_token, 
            database_id, 
            page_properties,  # properties
            enhanced_template  # enhanced template
        )
        
        if page_id:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {page_id}")
            return page_id
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion (—Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None)")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
        logger.error(f"   üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"   üìù –î–µ—Ç–∞–ª–∏: {str(e)}")
        return ""

def process_work_event(event: CalendarEvent, drive_provider) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        folder_name = format_work_folder_name(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if drive_provider and drive_provider.file_exists(folder_name):
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
            folder_created = False
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            if drive_provider:
                folder_id = drive_provider.create_folder(folder_name)
                if folder_id:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                    folder_created = True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {folder_name}")
                    folder_created = False
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                folder_created = False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        folder_link = f"file://{folder_name}" if folder_created else ""
        
        # –°–æ–∑–¥–∞–µ–º Event ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import hashlib
        event_hash = hashlib.md5(f"{event.start.isoformat()}{event.title}".encode()).hexdigest()[:8]
        event_id = f"work_{event_hash}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        notion_page_created = False
        notion_page_updated = False
        if notion_token and database_id:
            existing_page_id = check_notion_page_exists(notion_token, database_id, event_id)
            if existing_page_id:
                notion_page_id = existing_page_id
                logger.info(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion: {notion_page_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ)
                if should_update_notion_page(event, existing_page_id):
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion: {existing_page_id}")
                    update_success = update_work_notion_page(event, existing_page_id, folder_link)
                    notion_page_updated = update_success
                    if update_success:
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {existing_page_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {existing_page_id}")
            else:
                notion_page_id = create_work_notion_page(event, folder_link)
                notion_page_created = bool(notion_page_id)
                if notion_page_created:
                    logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {notion_page_id}")
        else:
            notion_page_id = ""
            logger.warning("‚ö†Ô∏è Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': len(event.attendees),
            'has_meeting_link': bool(event.meeting_link),
            'drive_folder_created': folder_created,
            'notion_page_id': notion_page_id,
            'notion_page_created': notion_page_created,
            'notion_page_updated': notion_page_updated,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            'drive_folder_link': folder_link,
            'event_id': event_id
        }
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        return {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': 0,
            'has_meeting_link': False,
            'drive_folder_created': False,
            'notion_page_id': '',
            'drive_folder_link': '',
            'error': str(e)
        }

def process_work_calendar_events(days: int = 2, force: bool = False, dry_run: bool = False) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        logger.info("üìÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
        if dry_run:
            logger.info("üß™ –†–ï–ñ–ò–ú –ü–†–û–ë–ù–û–ì–û –ó–ê–ü–£–°–ö–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_provider = get_work_calendar_provider()
        if not calendar_provider:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return {'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        today = datetime.now().date()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = start_date + timedelta(days=days)
        
        events = calendar_provider.get_events(start_date, end_date)
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info("üîç –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        for i, event in enumerate(events, 1):
            start_time = event.start.strftime('%Y-%m-%d %H:%M')
            end_time = event.end.strftime('%H:%M')
            logger.info(f"   {i}. {start_time}-{end_time} | {event.title}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        filtered_events, excluded_events = filter_work_events(events)
        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
        logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(excluded_events)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_work_drive_provider()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        processed_events = 0
        new_events_count = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        processed_details = []
        
        for event in filtered_events:
            try:
                if dry_run:
                    # –í —Ä–µ–∂–∏–º–µ dry-run —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    logger.info(f"üß™ [DRY-RUN] –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    result = {
                        'title': event.title,
                        'start': event.start,
                        'end': event.end,
                        'attendees_count': len(event.attendees),
                        'has_meeting_link': bool(event.meeting_link),
                        'drive_folder_created': False,
                        'notion_page_id': '',
                        'notion_page_created': True,  # –í dry-run —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ
                        'drive_folder_link': '',
                        'event_id': f"dry_run_{event.title[:8]}"
                    }
                    processed_details.append(result)
                    processed_events += 1
                    new_events_count += 1  # –í dry-run –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º–∏
                else:
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    result = process_work_event(event, drive_provider)
                    processed_details.append(result)
                    processed_events += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ
                    if result.get('notion_page_created', False) or result.get('drive_folder_created', False):
                        new_events_count += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                    status = "‚ú® –°–æ–∑–¥–∞–Ω–æ" if result.get('notion_page_created', False) else "üìÑ –°—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    logger.info(f"{status}: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        excluded_count = len(excluded_events)
        
        result = {
            'processed': processed_events,
            'excluded': excluded_count,
            'errors': len(events) - processed_events - excluded_count,
            'new_events': new_events_count,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            'details': processed_details,
            'excluded_details': excluded_events  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        }
        
        if dry_run:
            logger.info(f"üß™ [DRY-RUN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        else:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {'processed': 0, 'excluded': 0, 'errors': 1, 'details': []}

def process_work_media_files(max_folders: int = 5, output_format: str = 'mp3', quality: str = 'medium', cleanup: bool = False) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        logger.info("üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_work_drive_provider()
        if not drive_provider:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = drive_provider.list_files()
        work_folders = [f for f in folders if f.mime_type == 'application/vnd.google-apps.folder']
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–∞–ø–æ–∫: {len(work_folders)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        total_processed = 0
        total_synced = 0
        total_errors = 0
        media_details = []
        
        for folder in work_folders[:max_folders]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_folders –ø–∞–ø–æ–∫
            try:
                folder_name = folder.name
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                folder_files = drive_provider.list_files(folder.file_id)
                video_files = [f for f in folder_files if 'video' in f.mime_type]
                
                if video_files:
                    logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
                    folder_processed = 0
                    start_time = time.time()
                    
                    for video_file in video_files:
                        try:
                            logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {video_file.name}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–æ "compressed"
                            if 'compressed' in video_file.name.lower():
                                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {video_file.name}")
                                folder_processed += 1
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            local_video_path = video_file.local_path
                            if not local_video_path or not os.path.exists(local_video_path):
                                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {video_file.name}")
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            output_dir = Path(local_video_path).parent
                            
                            # 1. –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
                            video_output_name = Path(video_file.name).stem + f"_compressed.mp4"
                            video_output_path = output_dir / video_output_name
                            
                            # 2. –ê—É–¥–∏–æ —Ñ–∞–π–ª
                            audio_output_name = Path(video_file.name).stem + f"_compressed.{output_format}"
                            audio_output_path = output_dir / audio_output_name
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã
                            if video_output_path.exists() and audio_output_path.exists():
                                logger.info(f"‚úÖ –§–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {video_output_name}, {audio_output_name}")
                                folder_processed += 1
                                continue
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –∏–∑ env.work
                            video_compression = os.getenv('VIDEO_COMPRESSION', 'true').lower() == 'true'
                            video_quality = os.getenv('VIDEO_QUALITY', 'medium')
                            video_codec = os.getenv('VIDEO_CODEC', 'h264')
                            
                            logger.info(f"üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: compression={video_compression}, quality={video_quality}, codec={video_codec}")
                            
                            # 1. –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                            if video_compression:
                                logger.info(f"üé• –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ {video_file.name}...")
                                
                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                                if video_quality == 'low':
                                    crf = '28'  # –í—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'ultrafast'
                                elif video_quality == 'medium':
                                    crf = '23'  # –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'fast'
                                elif video_quality == 'high':
                                    crf = '18'  # –ù–∏–∑–∫–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'medium'
                                else:  # ultra
                                    crf = '15'  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'slow'
                                
                                video_cmd = [
                                    'ffmpeg', '-i', local_video_path,
                                    '-c:v', 'libx264' if video_codec == 'h264' else 'libx265',
                                    '-preset', preset,
                                    '-crf', crf,
                                    '-c:a', 'aac',
                                    '-b:a', '128k',
                                    '-movflags', '+faststart',
                                    '-y',
                                    str(video_output_path)
                                ]
                                
                                logger.info(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–∂–∞—Ç–∏—è: {' '.join(video_cmd)}")
                                video_result = subprocess.run(video_cmd, capture_output=True, text=True, timeout=3600)
                                
                                if video_result.returncode == 0:
                                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                                    compressed_size = video_output_path.stat().st_size if video_output_path.exists() else 0
                                    original_size = Path(local_video_path).stat().st_size
                                    compression_ratio = original_size / compressed_size if compressed_size > 0 else 0
                                    
                                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {video_output_name}")
                                    logger.info(f"üìä –†–∞–∑–º–µ—Ä: {original_size / (1024**3):.1f} –ì–ë ‚Üí {compressed_size / (1024**3):.1f} –ì–ë (—Å–∂–∞—Ç–∏–µ –≤ {compression_ratio:.1f} —Ä–∞–∑)")
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {video_result.stderr}")
                                    video_output_path = None
                            else:
                                logger.info("‚è≠Ô∏è –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                                video_output_path = None
                            
                            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ
                            logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {video_file.name} –≤ {output_format}...")
                            
                            audio_cmd = [
                                'ffmpeg', '-i', local_video_path,
                                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                                '-acodec', 'libmp3lame' if output_format == 'mp3' else 'pcm_s16le',
                                '-ab', '128k' if quality == 'low' else '192k' if quality == 'medium' else '320k',
                                '-y',
                                str(audio_output_path)
                            ]
                            
                            audio_result = subprocess.run(audio_cmd, capture_output=True, text=True, timeout=1800)
                            
                            if audio_result.returncode == 0:
                                logger.info(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_output_name}")
                                folder_processed += 1
                                total_processed += 1
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ: {audio_result.stderr}")
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {video_file.name}: {e}")
                    
                    processing_time = time.time() - start_time
                    
                    media_details.append({
                        "folder": folder_name,
                        "files_found": len(video_files),
                        "files_processed": folder_processed,
                        "processing_time": processing_time
                    })
                    
                    total_synced += len(video_files)
                else:
                    logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_name} –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
                total_errors += 1
        
        result = {
            'processed': total_processed,
            'synced': total_synced,
            'cleanup': 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            'errors': total_errors,
            'details': media_details
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 1, 'details': []}

def format_time(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç SRT (HH:MM:SS,mmm)."""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = seconds % 60
    milliseconds = int((seconds % 1) * 1000)
    seconds = int(seconds)
    
    return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"

def process_work_audio_files(max_folders: int = 5, output_format: str = 'json', cleanup: bool = False, use_advanced_segmentation: bool = True, segmentation_method: str = 'energy') -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Whisper –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π."""
    try:
        logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_work_drive_provider()
        if not drive_provider:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return {'processed': 0, 'transcribed': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = drive_provider.list_files()
        work_folders = [f for f in folders if f.mime_type == 'application/vnd.google-apps.folder']
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–∞–ø–æ–∫: {len(work_folders)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        try:
            audio_processor = AudioProcessor('env.work')
            logger.info("‚úÖ –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            if use_advanced_segmentation:
                try:
                    from advanced_segmentation import AdvancedSegmentation
                    logger.info(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥: {segmentation_method}")
                except ImportError:
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥")
                    use_advanced_segmentation = False
                    segmentation_method = 'standard'
            else:
                segmentation_method = 'standard'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
            return {'processed': 0, 'transcribed': 0, 'errors': 1, 'details': []}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        total_processed = 0
        total_transcribed = 0
        total_errors = 0
        audio_details = []
        
        for folder in work_folders[:max_folders]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_folders –ø–∞–ø–æ–∫
            try:
                folder_name = folder.name
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                folder_files = drive_provider.list_files(folder.file_id)
                audio_files = [f for f in folder_files if (
                    'audio' in f.mime_type or 
                    f.name.lower().endswith(('.mp3', '.wav', '.m4a', '.aac', '.flac', '.ogg'))
                )]
                
                if audio_files:
                    logger.info(f"üé§ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
                    folder_processed = 0
                    folder_transcribed = 0
                    start_time = time.time()
                    
                    for audio_file in audio_files:
                        try:
                            logger.info(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {audio_file.name}")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            local_audio_path = audio_file.local_path
                            if not local_audio_path or not os.path.exists(local_audio_path):
                                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {audio_file.name}")
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
                            output_dir = Path(local_audio_path).parent
                            transcript_name = Path(audio_file.name).stem + f"_transcript.{output_format}"
                            transcript_path = output_dir / transcript_name
                            
                            if transcript_path.exists():
                                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {transcript_name}")
                                folder_processed += 1
                                continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å Whisper –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
                            logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {audio_file.name} —Å –º–µ—Ç–æ–¥–æ–º: {segmentation_method}...")
                            
                            if use_advanced_segmentation and segmentation_method in ['energy', 'adaptive', 'intonation', 'emotion']:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
                                result = audio_processor.process_audio_file_with_advanced_segmentation(
                                    str(local_audio_path), 
                                    segmentation_method
                                )
                                logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {segmentation_method} —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
                            else:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                                result = audio_processor.process_audio_file_full(str(local_audio_path), output_format)
                                logger.info(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
                            
                            if result and result.get('raw_transcriptions'):
                                folder_processed += 1
                                folder_transcribed += 1
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                                if output_format == 'json':
                                    with open(transcript_path, 'w', encoding='utf-8') as f:
                                        import json
                                        json.dump(result, f, ensure_ascii=False, indent=2)
                                elif output_format == 'txt':
                                    with open(transcript_path, 'w', encoding='utf-8') as f:
                                        f.write(f"–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø: {audio_file.name}\n")
                                        f.write(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processed_at', '')}\n")
                                        f.write(f"–°–µ–≥–º–µ–Ω—Ç–æ–≤: {result.get('total_segments', 0)}\n")
                                        f.write(f"–°–ø–∏–∫–µ—Ä–æ–≤: {len(result.get('speakers', {}))}\n")
                                        f.write("-" * 50 + "\n\n")
                                        
                                        for trans in result.get('raw_transcriptions', []):
                                            f.write(f"[{trans.get('start_time', 0)}ms - {trans.get('end_time', 0)}ms] ")
                                            f.write(f"–°–µ–≥–º–µ–Ω—Ç {trans.get('segment', '?')}\n")
                                            f.write(f"{trans.get('text', '')}\n\n")
                                elif output_format == 'srt':
                                    with open(transcript_path, 'w', encoding='utf-8') as f:
                                        for i, trans in enumerate(result.get('raw_transcriptions', []), 1):
                                            start_time_s = trans.get('start_time', 0) / 1000
                                            end_time_s = trans.get('end_time', 0) / 1000
                                            f.write(f"{i}\n")
                                            f.write(f"{format_time(start_time_s)} --> {format_time(end_time_s)}\n")
                                            f.write(f"{trans.get('text', '')}\n\n")
                                
                                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(result.get('raw_transcriptions', []))} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, {len(result.get('speakers', {}))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                                logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {transcript_path}")
                                
                            else:
                                logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {audio_file.name}")
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ {audio_file.name}: {e}")
                            total_errors += 1
                            continue
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏
                    processing_time = time.time() - start_time
                    audio_details.append({
                        'folder': folder_name,
                        'files_found': len(audio_files),
                        'files_processed': folder_processed,
                        'files_transcribed': folder_transcribed,
                        'processing_time': processing_time,
                        'segmentation_method': segmentation_method
                    })
                    
                    total_processed += folder_processed
                    total_transcribed += folder_transcribed
                    
                else:
                    logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_name} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}")
                total_errors += 1
                continue
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if cleanup:
            try:
                audio_processor.cleanup_temp_files()
                logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'processed': total_processed,
            'transcribed': total_transcribed,
            'errors': total_errors,
            'details': audio_details
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {'processed': 0, 'transcribed': 0, 'errors': 1, 'details': []}

def create_work_telegram_report(calendar_stats: Dict[str, Any], media_stats: Dict[str, Any] = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è Telegram –æ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞–±–æ—á–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."""
    try:
        report = "üè¢ *–û–¢–ß–ï–¢ –†–ê–ë–û–ß–ï–ì–û –ê–ö–ö–ê–£–ù–¢–ê*\n"
        report += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        report += "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n"
        report += f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {calendar_stats['processed']}\n"
        report += f"   ‚ú® –ù–æ–≤—ã—Ö: {calendar_stats.get('new_events', 0)}\n"
        report += f"   ‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ: {calendar_stats['excluded']}\n"
        report += f"   ‚ùå –û—à–∏–±–∫–∏: {calendar_stats['errors']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if calendar_stats['details']:
            report += "üìã *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:*\n"
            for detail in calendar_stats['details']:
                start_time = detail['start'].strftime('%H:%M')
                title = detail['title']
                attendees = detail['attendees_count']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
                status_icon = "‚ú®" if detail.get('notion_page_created', False) else "üìÑ"
                report += f"   {status_icon} {start_time} | {title}\n"
                
                if attendees > 0:
                    report += f"      üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees}\n"
                if detail.get('notion_page_id'):
                    report += f"      üìù Notion: {detail['notion_page_id'][:8]}...\n"
                if detail.get('drive_folder_created'):
                    report += f"      üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
                if detail.get('notion_page_created'):
                    report += f"      ‚ú® –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n"
                if detail.get('event_id'):
                    report += f"      üÜî ID: {detail['event_id']}\n"
                if detail.get('error'):
                    report += f"      ‚ùå –û—à–∏–±–∫–∞: {detail['error']}\n"
                report += "\n"
        
        # –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if calendar_stats.get('excluded_details'):
            report += "‚è≠Ô∏è *–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:*\n"
            for detail in calendar_stats['excluded_details']:
                start_time = detail['start'].strftime('%H:%M')
                title = detail['title']
                reason = detail['reason']
                
                report += f"   üïê {start_time} | {title}\n"
                report += f"      üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                if detail.get('keywords'):
                    report += f"      üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(detail['keywords'])}\n"
                report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if media_stats:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if 'transcribed' in media_stats:
                # –ê—É–¥–∏–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                report += "üé§ *–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã:*\n"
                report += f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(media_stats['details'])}\n"
                report += f"   üìÑ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {media_stats['processed']}\n"
                report += f"   üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {media_stats['transcribed']}\n"
                report += f"   ‚ùå –û—à–∏–±–∫–∏: {media_stats['errors']}\n\n"
            else:
                # –ú–µ–¥–∏–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                report += "üé¨ *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:*\n"
                report += f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(media_stats['details'])}\n"
                report += f"   üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {media_stats['synced']}\n"
                report += f"   ‚ùå –û—à–∏–±–∫–∏: {media_stats['errors']}\n\n"
            
            if media_stats['details']:
                report += "üìÅ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:*\n"
                for detail in media_stats['details']:
                    report += f"   üìÇ {detail['folder']}\n"
                    report += f"      üé• –ù–∞–π–¥–µ–Ω–æ: {detail['files_found']}\n"
                    if 'files_transcribed' in detail:
                        # –ê—É–¥–∏–æ –¥–µ—Ç–∞–ª–∏
                        report += f"      üé§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {detail['files_processed']}\n"
                        report += f"      üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {detail['files_transcribed']}\n"
                    else:
                        # –ú–µ–¥–∏–∞ –¥–µ—Ç–∞–ª–∏
                        report += f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {detail['files_processed']}\n"
                    report += f"      ‚è±Ô∏è –í—Ä–µ–º—è: {detail['processing_time']:.1f}—Å\n\n"
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"

def send_work_telegram_notification(report: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = notify(bot_token, chat_id, report)
        
        if success:
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    parser.add_argument('command', choices=['prepare', 'media', 'audio', 'test', 'watch', 'analyze'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--folders', type=int, default=5,
                       help='–ú–∞–∫—Å–∏–º—É–º –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--cleanup', action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--verbose', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--days', type=int, default=2,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã test
    parser.add_argument('--config-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--calendar-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--drive-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç Google Drive')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã prepare
    parser.add_argument('--force', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π')
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã media
    parser.add_argument('--format', choices=['mp3', 'mp4', 'wav'], default='mp3',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ')
    parser.add_argument('--quality', choices=['low', 'medium', 'high', 'ultra'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã audio
    parser.add_argument('--output', choices=['json', 'txt', 'srt'], default='json',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)')
    parser.add_argument('--segmentation', choices=['standard', 'energy', 'adaptive'], default='energy',
                       help='–ú–µ—Ç–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: energy)')
    parser.add_argument('--no-advanced', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã watch
    parser.add_argument('--interval', type=int, default=300,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã analyze
    parser.add_argument('--transcript', type=str, required=False,
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--title', type=str, default='',
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--date', type=str, default='',
                       help='–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç verbose
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("üîç –í–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_work_environment():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    if args.command == 'prepare':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_stats = process_work_calendar_events(days=args.days, force=args.force, dry_run=args.dry_run)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_work_telegram_report(calendar_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ù–û–í–´–ï —Å–æ–±—ã—Ç–∏—è
        if calendar_stats.get('new_events', 0) > 0:
            send_work_telegram_notification(report)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {calendar_stats['new_events']})")
        else:
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {calendar_stats['processed']})")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'audio':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
        use_advanced = not args.no_advanced
        segmentation_method = args.segmentation if use_advanced else 'standard'
        
        logger.info(f"üé§ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π: {segmentation_method}")
        
        audio_stats = process_work_audio_files(
            max_folders=args.folders,
            output_format=args.output,
            cleanup=args.cleanup,
            use_advanced_segmentation=use_advanced,
            segmentation_method=segmentation_method
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_work_telegram_report({'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}, audio_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if audio_stats['transcribed'] > 0 or audio_stats['processed'] > 0:
            send_work_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'media':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_stats = process_work_media_files(
            max_folders=args.folders,
            output_format=args.format,
            quality=args.quality,
            cleanup=args.cleanup
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_work_telegram_report({'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}, media_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if media_stats['synced'] > 0 or media_stats['processed'] > 0:
            send_work_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'test':
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if args.config_only:
            logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
            print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(config.get_config_summary())
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {config.validate_config()}")
            return
        
        # –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        if not args.drive_only:
            logger.info("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            calendar_provider = get_work_calendar_provider()
            if calendar_provider:
                events = calendar_provider.get_today_events()
                logger.info(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                if args.verbose and events:
                    for event in events[:3]:
                        logger.info(f"   - {event.title} ({event.start.strftime('%H:%M')})")
            else:
                logger.error("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç Google Drive
        if not args.calendar_only:
            logger.info("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive...")
            drive_provider = get_work_drive_provider()
            if drive_provider:
                files = drive_provider.list_files()
                logger.info(f"‚úÖ Google Drive: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                if args.verbose and files:
                    for file in files[:3]:
                        logger.info(f"   - {file.name} ({file.mime_type})")
            else:
                logger.error("‚ùå Google Drive: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    elif args.command == 'watch':
        # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        logger.info(f"üëÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏...")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {args.interval} —Å–µ–∫—É–Ω–¥")
        logger.info("‚ö†Ô∏è –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'prepare' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ prepare –∫–æ–º–∞–Ω–¥—ã
        # import time
        # while True:
        #     process_work_calendar_events(days=args.days)
        #     time.sleep(args.interval)
        
    elif args.command == 'analyze':
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        if not args.transcript:
            logger.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (--transcript)")
            sys.exit(1)
        
        if not os.path.exists(args.transcript):
            logger.error(f"‚ùå –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.transcript}")
            sys.exit(1)
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {args.transcript}")
        logger.info(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {args.title or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        logger.info(f"üìÖ –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {args.date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        analysis_result = analyze_transcript_and_create_notion_page(
            args.transcript,
            args.title,
            args.date
        )
        
        if analysis_result['success']:
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞: {analysis_result['analysis_file']}")
            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion: {analysis_result['notion_data_file']}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            summary = analysis_result['analysis_result'].get('meeting_summary', {})
            report = f"""
üîç –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù

üìã –í—Å—Ç—Ä–µ—á–∞: {summary.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üéØ –¢–µ–º–∞: {summary.get('main_topic', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚úÖ –†–µ—à–µ–Ω–∏—è: {len(summary.get('key_decisions', []))}
üìã –î–µ–π—Å—Ç–≤–∏—è: {len(summary.get('action_items', []))}
üí¨ –¢–µ–º—ã: {len(analysis_result['analysis_result'].get('topics_discussed', []))}
‚è∞ –°—Ä–æ–∫–∏: {len(analysis_result['analysis_result'].get('deadlines', []))}

üíæ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:
   - –ê–Ω–∞–ª–∏–∑: {os.path.basename(analysis_result['analysis_file'])}
   - –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion: {os.path.basename(analysis_result['notion_data_file'])}

üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ Notion
"""
            print(report)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_work_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            sys.exit(1)
        
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        sys.exit(1)

def analyze_transcript_and_create_notion_page(
    transcript_file_path: str,
    meeting_title: str = "",
    meeting_date: str = ""
) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ OpenAI –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
    
    Args:
        transcript_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        meeting_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        meeting_date: –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    try:
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {transcript_file_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        with open(transcript_file_path, 'r', encoding='utf-8') as f:
            transcript_text = f.read()
        
        logger.info(f"üìù –ü—Ä–æ—á–∏—Ç–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager('env.work')
        openai_config = config_manager.config.get('openai', {})
        
        api_key = openai_config.get('api_key')
        if not api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        model = openai_config.get('analysis_model', 'gpt-4o-mini')
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        from src.transcript_analyzer import TranscriptAnalyzer
        analyzer = TranscriptAnalyzer(api_key, model)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI...")
        analysis_result = analyzer.analyze_meeting_transcript(
            transcript_text,
            meeting_title,
            meeting_date
        )
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        analysis_file = transcript_file_path.replace('.txt', '_analysis.json')
        if analyzer.save_analysis_to_file(analysis_result, analysis_file):
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {analysis_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
        logger.info("üìù –°–æ–∑–¥–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion...")
        notion_page_data = analyzer.create_notion_page_data(analysis_result)
        
        if not notion_page_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion
        notion_data_file = transcript_file_path.replace('.txt', '_notion_data.json')
        with open(notion_data_file, 'w', encoding='utf-8') as f:
            json.dump(notion_page_data, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è Notion —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {notion_data_file}")
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("üìã –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion")
        
        return {
            'success': True,
            'analysis_file': analysis_file,
            'notion_data_file': notion_data_file,
            'analysis_result': analysis_result,
            'notion_page_data': notion_page_data
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
        return {
            'success': False,
            'error': str(e)
        }

if __name__ == "__main__":
    main()
