#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –¥–ª—è –†–ê–ë–û–ß–ï–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
"""

import os
import sys
import argparse
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from calendar_alternatives import get_calendar_provider, CalendarEvent
    from drive_alternatives import get_drive_provider, DriveFile
    from config_manager import ConfigManager
    from notion_templates import create_page_with_template
    from media_processor import get_media_processor
    from drive_sync import get_drive_sync
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def load_personal_exclusions() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    exclusions_file = Path("config/personal_exclusions.txt")
    exclusions = []
    
    if not exclusions_file.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {exclusions_file}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
    
    try:
        with open(exclusions_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line and not line.startswith('#'):
                    exclusions.append(line)
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ {exclusions_file}")
        return exclusions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']

def notify(bot_token: str, chat_id: str, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    try:
        import requests
        r = requests.get(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            params={"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}, 
            timeout=15
        )
        r.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/work_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def load_work_environment():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if os.path.exists('env.work'):
            from dotenv import load_dotenv
            load_dotenv('env.work')
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª env.work –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º .env")
            from dotenv import load_dotenv
            load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = [
            'NOTION_TOKEN',
            'NOTION_DATABASE_ID',
            'TELEGRAM_BOT_TOKEN',
            'TELEGRAM_CHAT_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def get_work_calendar_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
        calendar_type = config.get_calendar_provider_type()
        calendar_config = config.get_calendar_provider_config()
        
        logger.info(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_type}")
        
        if calendar_type == 'google_api':
            # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            logger.warning("‚ö†Ô∏è Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return get_calendar_provider(calendar_type, **calendar_config)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            return get_calendar_provider(calendar_type, **calendar_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

def get_work_drive_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
        drive_type = config.get_drive_provider_type()
        drive_config = config.get_drive_provider_config()
        
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive: {drive_type}")
        
        if drive_type == 'google_api':
            # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            logger.warning("‚ö†Ô∏è Google API –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return get_drive_provider(drive_type, **drive_config)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            return get_drive_provider(drive_type, **drive_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Google Drive: {e}")
        return None

def filter_work_events(events: List[CalendarEvent]) -> tuple[List[CalendarEvent], List[Dict[str, Any]]]:
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    filtered_events = []
    excluded_events = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    personal_keywords = load_personal_exclusions()
    
    for event in events:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        is_personal = False
        matched_keywords = []
        
        for keyword in personal_keywords:
            if keyword.lower() in event.title.lower():
                is_personal = True
                matched_keywords.append(keyword)
        
        if is_personal:
            logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
            excluded_events.append({
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'reason': '–õ–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ',
                'keywords': matched_keywords
            })
            continue
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º–∏
        filtered_events.append(event)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
    
    return filtered_events, excluded_events

def format_work_folder_name(event: CalendarEvent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    start_time = event.start
    title = event.title
    
    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD hh-mm –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    folder_name = f"{start_time.strftime('%Y-%m-%d %H-%M')} {title}"
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
    folder_name = folder_name.replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
    
    return folder_name

def check_notion_page_exists(notion_token: str, database_id: str, event_id: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º Event ID –≤ Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ Event ID
        filter_data = {
            "filter": {
                "property": "Event ID",
                "rich_text": {
                    "equals": event_id
                }
            }
        }
        
        response = requests.post(
            f"https://api.notion.com/v1/databases/{database_id}/query",
            headers=headers,
            json=filter_data
        )
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', [])
            if results:
                page_id = results[0]['id']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_id}")
                return page_id
            else:
                logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Event ID '{event_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ""
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return ""

def get_notion_database_schema(notion_token: str, database_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion."""
    try:
        import requests
        
        headers = {
            "Authorization": f"Bearer {notion_token}",
            "Notion-Version": "2022-06-28",
        }
        
        response = requests.get(
            f"https://api.notion.com/v1/databases/{database_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            properties = data.get('properties', {})
            logger.info(f"üîç –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion:")
            for prop_name, prop_data in properties.items():
                prop_type = prop_data.get('type', 'unknown')
                logger.info(f"   üìù {prop_name}: {prop_type}")
            return properties
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            logger.error(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return {}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def create_work_notion_page(event: CalendarEvent, folder_link: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        template_path = "templates/meeting_page_template.json"
        if not os.path.exists(template_path):
            logger.error(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return ""
        
        with open(template_path, 'r', encoding='utf-8') as f:
            import json
            template = json.load(f)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
        template_data = {
            "title": event.title,
            "start_time": event.start.strftime('%H:%M'),
            "end_time": event.end.strftime('%H:%M'),
            "date": event.start.strftime('%Y-%m-%d'),
            "description": event.description,
            "location": event.location,
            "attendees": event.attendees,
            "meeting_link": event.meeting_link,
            "folder_link": folder_link,
            "calendar_source": event.calendar_source
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        if not notion_token:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_TOKEN")
            return ""
        
        if not database_id:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_DATABASE_ID")
            return ""
        
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion –¥–ª—è: {event.title}")
        logger.info(f"   üìÖ –î–∞—Ç–∞: {event.start.strftime('%Y-%m-%d %H:%M')}")
        logger.info(f"   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_id[:8]}...")
        logger.info(f"   üîë –¢–æ–∫–µ–Ω: {notion_token[:8]}...")
        
        # –°–æ–∑–¥–∞–µ–º Event ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import hashlib
        event_hash = hashlib.md5(f"{event.start.isoformat()}{event.title}".encode()).hexdigest()[:8]
        event_id = f"work_{event_hash}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–∫–∏–º Event ID
        existing_page_id = check_notion_page_exists(notion_token, database_id, event_id)
        if existing_page_id:
            logger.info(f"‚è≠Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
            return existing_page_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schema = get_notion_database_schema(notion_token, database_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Notion (—Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        page_properties = {
            "Name": {  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                "title": [
                    {
                        "text": {
                            "content": event.title
                        }
                    }
                ]
            },
            "Date": {  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
                "date": {
                    "start": event.start.isoformat(),
                    "end": event.end.isoformat()
                }
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ä–∞–±–æ—á–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if "Calendar" in schema:
            page_properties["Calendar"] = {
                "select": {
                    "name": "Work"
                }
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if event.attendees and "Attendees" in schema:
            page_properties["Attendees"] = {
                "rich_text": [
                    {
                        "text": {
                            "content": ", ".join(event.attendees)
                        }
                    }
                ]
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
        if event.meeting_link and "Meeting Link" in schema:
            page_properties["Meeting Link"] = {
                "url": event.meeting_link
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É Google Drive
        if folder_link and "Drive Folder" in schema:
            page_properties["Drive Folder"] = {
                "url": folder_link
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
        if "Event ID" in schema:
            page_properties["Event ID"] = {
                "rich_text": [
                    {
                        "text": {
                            "content": event_id
                        }
                    }
                ]
            }
        
        logger.info(f"üîß –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {list(page_properties.keys())}")
        
        page_id = create_page_with_template(
            notion_token, 
            database_id, 
            page_properties,  # properties
            template          # template
        )
        
        if page_id:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {page_id}")
            return page_id
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion (—Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None)")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
        logger.error(f"   üìç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"   üìù –î–µ—Ç–∞–ª–∏: {str(e)}")
        return ""

def process_work_event(event: CalendarEvent, drive_provider) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        folder_name = format_work_folder_name(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if drive_provider and drive_provider.file_exists(folder_name):
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
            folder_created = False
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            if drive_provider:
                folder_id = drive_provider.create_folder(folder_name)
                if folder_id:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                    folder_created = True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {folder_name}")
                    folder_created = False
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                folder_created = False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        folder_link = f"file://{folder_name}" if folder_created else ""
        
        # –°–æ–∑–¥–∞–µ–º Event ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import hashlib
        event_hash = hashlib.md5(f"{event.start.isoformat()}{event.title}".encode()).hexdigest()[:8]
        event_id = f"work_{event_hash}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        notion_page_created = False
        if notion_token and database_id:
            existing_page_id = check_notion_page_exists(notion_token, database_id, event_id)
            if existing_page_id:
                notion_page_id = existing_page_id
                logger.info(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion: {notion_page_id}")
            else:
                notion_page_id = create_work_notion_page(event, folder_link)
                notion_page_created = bool(notion_page_id)
                if notion_page_created:
                    logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {notion_page_id}")
        else:
            notion_page_id = ""
            logger.warning("‚ö†Ô∏è Notion –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': len(event.attendees),
            'has_meeting_link': bool(event.meeting_link),
            'drive_folder_created': folder_created,
            'notion_page_id': notion_page_id,
            'notion_page_created': notion_page_created,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            'drive_folder_link': folder_link,
            'event_id': event_id  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
        }
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        return {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': 0,
            'has_meeting_link': False,
            'drive_folder_created': False,
            'notion_page_id': '',
            'drive_folder_link': '',
            'error': str(e)
        }

def process_work_calendar_events(days: int = 2, force: bool = False, dry_run: bool = False) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        logger.info("üìÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
        if dry_run:
            logger.info("üß™ –†–ï–ñ–ò–ú –ü–†–û–ë–ù–û–ì–û –ó–ê–ü–£–°–ö–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_provider = get_work_calendar_provider()
        if not calendar_provider:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return {'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        today = datetime.now().date()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = start_date + timedelta(days=days)
        
        events = calendar_provider.get_events(start_date, end_date)
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info("üîç –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        for i, event in enumerate(events, 1):
            start_time = event.start.strftime('%Y-%m-%d %H:%M')
            end_time = event.end.strftime('%H:%M')
            logger.info(f"   {i}. {start_time}-{end_time} | {event.title}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        filtered_events, excluded_events = filter_work_events(events)
        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
        logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(excluded_events)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_work_drive_provider()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        processed_events = 0
        new_events_count = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        processed_details = []
        
        for event in filtered_events:
            try:
                if dry_run:
                    # –í —Ä–µ–∂–∏–º–µ dry-run —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    logger.info(f"üß™ [DRY-RUN] –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    result = {
                        'title': event.title,
                        'start': event.start,
                        'end': event.end,
                        'attendees_count': len(event.attendees),
                        'has_meeting_link': bool(event.meeting_link),
                        'drive_folder_created': False,
                        'notion_page_id': '',
                        'notion_page_created': True,  # –í dry-run —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ
                        'drive_folder_link': '',
                        'event_id': f"dry_run_{event.title[:8]}"
                    }
                    processed_details.append(result)
                    processed_events += 1
                    new_events_count += 1  # –í dry-run –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º–∏
                else:
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    result = process_work_event(event, drive_provider)
                    processed_details.append(result)
                    processed_events += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ
                    if result.get('notion_page_created', False) or result.get('drive_folder_created', False):
                        new_events_count += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                    status = "‚ú® –°–æ–∑–¥–∞–Ω–æ" if result.get('notion_page_created', False) else "üìÑ –°—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    logger.info(f"{status}: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        excluded_count = len(excluded_events)
        
        result = {
            'processed': processed_events,
            'excluded': excluded_count,
            'errors': len(events) - processed_events - excluded_count,
            'new_events': new_events_count,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            'details': processed_details,
            'excluded_details': excluded_events  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        }
        
        if dry_run:
            logger.info(f"üß™ [DRY-RUN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        else:
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {'processed': 0, 'excluded': 0, 'errors': 1, 'details': []}

def process_work_media_files(max_folders: int = 5, output_format: str = 'mp3', quality: str = 'medium', cleanup: bool = False) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        logger.info("üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_work_drive_provider()
        if not drive_provider:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = drive_provider.list_files()
        work_folders = [f for f in folders if f.mime_type == 'application/vnd.google-apps.folder']
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–∞–ø–æ–∫: {len(work_folders)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        total_processed = 0
        total_synced = 0
        total_errors = 0
        media_details = []
        
        for folder in work_folders[:max_folders]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_folders –ø–∞–ø–æ–∫
            try:
                folder_name = folder.name
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                folder_files = drive_provider.list_files(folder.file_id)
                video_files = [f for f in folder_files if 'video' in f.mime_type]
                
                if video_files:
                    logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
                    # –î–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    
                    media_details.append({
                        "folder": folder_name,
                        "files_found": len(video_files),
                        "files_processed": 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
                        "processing_time": 0
                    })
                    
                    total_synced += len(video_files)
                else:
                    logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_name} –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
                total_errors += 1
        
        result = {
            'processed': total_processed,
            'synced': total_synced,
            'cleanup': 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            'errors': total_errors,
            'details': media_details
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 1, 'details': []}

def create_work_telegram_report(calendar_stats: Dict[str, Any], media_stats: Dict[str, Any] = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è Telegram –æ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞–±–æ—á–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."""
    try:
        report = "üè¢ *–û–¢–ß–ï–¢ –†–ê–ë–û–ß–ï–ì–û –ê–ö–ö–ê–£–ù–¢–ê*\n"
        report += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        report += "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n"
        report += f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {calendar_stats['processed']}\n"
        report += f"   ‚ú® –ù–æ–≤—ã—Ö: {calendar_stats.get('new_events', 0)}\n"
        report += f"   ‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ: {calendar_stats['excluded']}\n"
        report += f"   ‚ùå –û—à–∏–±–∫–∏: {calendar_stats['errors']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if calendar_stats['details']:
            report += "üìã *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:*\n"
            for detail in calendar_stats['details']:
                start_time = detail['start'].strftime('%H:%M')
                title = detail['title']
                attendees = detail['attendees_count']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è
                status_icon = "‚ú®" if detail.get('notion_page_created', False) else "üìÑ"
                report += f"   {status_icon} {start_time} | {title}\n"
                
                if attendees > 0:
                    report += f"      üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees}\n"
                if detail.get('notion_page_id'):
                    report += f"      üìù Notion: {detail['notion_page_id'][:8]}...\n"
                if detail.get('drive_folder_created'):
                    report += f"      üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
                if detail.get('notion_page_created'):
                    report += f"      ‚ú® –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n"
                if detail.get('event_id'):
                    report += f"      üÜî ID: {detail['event_id']}\n"
                if detail.get('error'):
                    report += f"      ‚ùå –û—à–∏–±–∫–∞: {detail['error']}\n"
                report += "\n"
        
        # –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if calendar_stats.get('excluded_details'):
            report += "‚è≠Ô∏è *–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:*\n"
            for detail in calendar_stats['excluded_details']:
                start_time = detail['start'].strftime('%H:%M')
                title = detail['title']
                reason = detail['reason']
                
                report += f"   üïê {start_time} | {title}\n"
                report += f"      üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                if detail.get('keywords'):
                    report += f"      üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(detail['keywords'])}\n"
                report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if media_stats:
            report += "üé¨ *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:*\n"
            report += f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(media_stats['details'])}\n"
            report += f"   üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {media_stats['synced']}\n"
            report += f"   ‚ùå –û—à–∏–±–∫–∏: {media_stats['errors']}\n\n"
            
            if media_stats['details']:
                report += "üìÅ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:*\n"
                for detail in media_stats['details']:
                    report += f"   üìÇ {detail['folder']}\n"
                    report += f"      üé• –ù–∞–π–¥–µ–Ω–æ: {detail['files_found']}\n"
                    report += f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {detail['files_processed']}\n"
                    report += f"      ‚è±Ô∏è –í—Ä–µ–º—è: {detail['processing_time']:.1f}—Å\n\n"
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"

def send_work_telegram_notification(report: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = notify(bot_token, chat_id, report)
        
        if success:
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    parser.add_argument('command', choices=['prepare', 'media', 'test', 'watch'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--folders', type=int, default=5,
                       help='–ú–∞–∫—Å–∏–º—É–º –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--cleanup', action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--verbose', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--days', type=int, default=2,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã test
    parser.add_argument('--config-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--calendar-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--drive-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç Google Drive')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã prepare
    parser.add_argument('--force', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π')
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã media
    parser.add_argument('--format', choices=['mp3', 'mp4', 'wav'], default='mp3',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ')
    parser.add_argument('--quality', choices=['low', 'medium', 'high', 'ultra'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã watch
    parser.add_argument('--interval', type=int, default=300,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç verbose
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("üîç –í–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_work_environment():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    if args.command == 'prepare':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_stats = process_work_calendar_events(days=args.days, force=args.force, dry_run=args.dry_run)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_work_telegram_report(calendar_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ù–û–í–´–ï —Å–æ–±—ã—Ç–∏—è
        if calendar_stats.get('new_events', 0) > 0:
            send_work_telegram_notification(report)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {calendar_stats['new_events']})")
        else:
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {calendar_stats['processed']})")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'media':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_stats = process_work_media_files(
            max_folders=args.folders,
            output_format=args.format,
            quality=args.quality,
            cleanup=args.cleanup
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_work_telegram_report({'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}, media_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if media_stats['synced'] > 0 or media_stats['processed'] > 0:
            send_work_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'test':
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if args.config_only:
            logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            config = ConfigManager('env.work' if os.path.exists('env.work') else '.env')
            print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(config.get_config_summary())
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {config.validate_config()}")
            return
        
        # –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        if not args.drive_only:
            logger.info("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            calendar_provider = get_work_calendar_provider()
            if calendar_provider:
                events = calendar_provider.get_today_events()
                logger.info(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                if args.verbose and events:
                    for event in events[:3]:
                        logger.info(f"   - {event.title} ({event.start.strftime('%H:%M')})")
            else:
                logger.error("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç Google Drive
        if not args.calendar_only:
            logger.info("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Drive...")
            drive_provider = get_work_drive_provider()
            if drive_provider:
                files = drive_provider.list_files()
                logger.info(f"‚úÖ Google Drive: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                if args.verbose and files:
                    for file in files[:3]:
                        logger.info(f"   - {file.name} ({file.mime_type})")
            else:
                logger.error("‚ùå Google Drive: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    elif args.command == 'watch':
        # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        logger.info(f"üëÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏...")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {args.interval} —Å–µ–∫—É–Ω–¥")
        logger.info("‚ö†Ô∏è –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'prepare' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ prepare –∫–æ–º–∞–Ω–¥—ã
        # import time
        # while True:
        #     process_work_calendar_events(days=args.days)
        #     time.sleep(args.interval)
        
    else:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
