#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –≤–∏–¥–µ–æ
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from media_processor import MediaProcessor
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_compression_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –≤–∏–¥–µ–æ."""
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
    video_path = "data/synced/2025-08-21 18-00 –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞/FT - LifePay 20.03.2023.mp4"
    
    if not os.path.exists(video_path):
        print(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return
    
    print(f"üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é: {os.path.basename(video_path)}")
    
    # –°–æ–∑–¥–∞–µ–º MediaProcessor (–±–µ–∑ drive_service –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞)
    processor = MediaProcessor(
        drive_service=None,  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        output_format='mp3',
        video_compression=True,
        video_quality='medium',
        video_codec='h264'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg
    if not processor.ffmpeg_available:
        print("‚ùå ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
    test_configs = [
        ("H.264 Medium", "medium", "h264"),
        ("H.264 High", "high", "h264"),
        ("H.265 Medium", "medium", "h265"),
    ]
    
    for config_name, quality, codec in test_configs:
        print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {config_name}")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {quality}, –ö–æ–¥–µ–∫: {codec}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_dir = os.path.dirname(video_path)
        base_name = os.path.splitext(os.path.basename(video_path))[0]
        output_path = os.path.join(output_dir, f"{base_name}_compressed_{codec}_{quality}.mp4")
        
        print(f"   –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(video_path)}")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(output_path)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        input_size = os.path.getsize(video_path)
        print(f"   –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {processor._format_size(input_size)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é
        if processor.compress_video(video_path, output_path, quality, codec):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(output_path):
                output_size = os.path.getsize(output_path)
                compression_ratio = (1 - output_size / input_size) * 100
                
                print(f"   ‚úÖ –ö–æ–º–ø—Ä–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {processor._format_size(input_size)} ‚Üí {processor._format_size(output_size)}")
                print(f"   üìâ –°–∂–∞—Ç–∏–µ: {compression_ratio:.1f}%")
                print(f"   üíæ –≠–∫–æ–Ω–æ–º–∏—è: {processor._format_size(input_size - output_size)}")
            else:
                print(f"   ‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"   ‚ùå –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        print("-" * 50)

if __name__ == "__main__":
    test_compression_simple()
