#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –¥–ª—è –õ–ò–ß–ù–û–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Google API –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
"""

import os
import sys
import argparse
import logging
import subprocess
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, 'src')

try:
    from calendar_alternatives import get_calendar_provider, CalendarEvent
    from drive_alternatives import get_drive_provider, DriveFile
    from config_manager import ConfigManager
    from notion_templates import create_page_with_template
    from media_processor import get_media_processor
    from drive_sync import get_drive_sync
    from audio_processor import AudioProcessor
    from processing_status import ProcessingStatus
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/personal_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def load_personal_exclusions() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    exclusions_file = Path("config/personal_exclusions.txt")
    exclusions = []
    
    if not exclusions_file.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {exclusions_file}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']
    
    try:
        with open(exclusions_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line and not line.startswith('#'):
                    exclusions.append(line)
        
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exclusions)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ {exclusions_file}")
        return exclusions
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–î–µ–ª–∞', '–õ–∏—á–Ω–æ–µ', 'Personal', '–û—Ç–ø—É—Å–∫']

def load_personal_environment():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if os.path.exists('env.personal'):
            from dotenv import load_dotenv
            load_dotenv('env.personal')
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª env.personal –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º .env")
            from dotenv import load_dotenv
            load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è API
        required_vars = [
            'GOOGLE_CREDENTIALS',
            'PERSONAL_CALENDAR_ID',
            'PERSONAL_DRIVE_PARENT_ID',
            'NOTION_TOKEN',
            'NOTION_DATABASE_ID',
            'TELEGRAM_BOT_TOKEN',
            'TELEGRAM_CHAT_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False
        
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def get_personal_calendar_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (Google API)."""
    try:
        config = ConfigManager('env.personal' if os.path.exists('env.personal') else '.env')
        calendar_type = config.get_calendar_provider_type()
        calendar_config = config.get_calendar_provider_config()
        
        logger.info(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {calendar_type}")
        
        # –î–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Google API
        if calendar_type != 'google_api':
            logger.warning(f"‚ö†Ô∏è –î–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è google_api, —Ç–µ–∫—É—â–∏–π: {calendar_type}")
        
        return get_calendar_provider(calendar_type, **calendar_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

def get_personal_drive_provider():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (Google API)."""
    try:
        config = ConfigManager('env.personal' if os.path.exists('env.personal') else '.env')
        drive_type = config.get_drive_provider_type()
        drive_config = config.get_drive_provider_config()
        
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive: {drive_type}")
        
        # –î–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Google API
        if drive_type != 'google_api':
            logger.warning(f"‚ö†Ô∏è –î–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è google_api, —Ç–µ–∫—É—â–∏–π: {drive_type}")
        
        return get_drive_provider(drive_type, **drive_config)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Google Drive: {e}")
        return None

def filter_personal_events(events: List[CalendarEvent]) -> tuple[List[CalendarEvent], List[Dict[str, Any]]]:
    """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    filtered_events = []
    excluded_events = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    personal_keywords = load_personal_exclusions()
    
    for event in events:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ —Ñ–∞–π–ª–∞
        is_excluded = False
        matched_keywords = []
        
        for keyword in personal_keywords:
            if keyword.lower() in event.title.lower():
                is_excluded = True
                matched_keywords.append(keyword)
        
        if is_excluded:
            logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
            excluded_events.append({
                'title': event.title,
                'start': event.start,
                'end': event.end,
                'reason': '–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
                'keywords': matched_keywords
            })
            continue
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—á–∏—Ç–∞–µ–º –ª–∏—á–Ω—ã–º–∏
        filtered_events.append(event)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
    
    return filtered_events, excluded_events

def format_personal_folder_name(event: CalendarEvent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    start_time = event.start
    title = event.title
    
    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DD hh-mm –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    folder_name = f"{start_time.strftime('%Y-%m-%d %H-%M')} {title}"
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
    folder_name = folder_name.replace('*', '').replace('?', '').replace('"', '').replace('<', '').replace('>', '').replace('|', '')
    
    return folder_name

def create_personal_notion_page(event: CalendarEvent, folder_link: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        template_path = "templates/meeting_page_template.json"
        if not os.path.exists(template_path):
            logger.error(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return ""
        
        with open(template_path, 'r', encoding='utf-8') as f:
            import json
            template = json.load(f)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
        template_data = {
            "title": event.title,
            "start_time": event.start.strftime('%H:%M'),
            "end_time": event.end.strftime('%H:%M'),
            "date": event.start.strftime('%Y-%m-%d'),
            "description": event.description,
            "location": event.location,
            "attendees": event.attendees,
            "meeting_link": event.meeting_link,
            "folder_link": folder_link,
            "calendar_source": event.calendar_source
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        notion_token = os.getenv('NOTION_TOKEN')
        database_id = os.getenv('NOTION_DATABASE_ID')
        
        if not notion_token or not database_id:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Notion —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return ""
        
        page_id = create_page_with_template(
            notion_token, 
            database_id, 
            template, 
            template_data
        )
        
        if page_id:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {page_id}")
            return page_id
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion: {e}")
        return ""

def process_personal_event(event: CalendarEvent, drive_provider) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ."""
    try:
        logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.title}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        folder_name = format_personal_folder_name(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if drive_provider and drive_provider.file_exists(folder_name):
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_name}")
            folder_created = False
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            if drive_provider:
                folder_id = drive_provider.create_folder(folder_name)
                if folder_id:
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                    folder_created = True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {folder_name}")
                    folder_created = False
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                folder_created = False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
        folder_link = f"file://{folder_name}" if folder_created else ""
        notion_page_id = create_personal_notion_page(event, folder_link)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': len(event.attendees),
            'has_meeting_link': bool(event.meeting_link),
            'drive_folder_created': folder_created,
            'notion_page_id': notion_page_id,
            'drive_folder_link': folder_link
        }
        
        logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        return {
            'title': event.title,
            'start': event.start,
            'end': event.end,
            'attendees_count': 0,
            'has_meeting_link': False,
            'drive_folder_created': False,
            'notion_page_id': '',
            'drive_folder_link': '',
            'error': str(e)
        }

def process_personal_calendar_events(days: int = 2) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    try:
        logger.info("üìÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_provider = get_personal_calendar_provider()
        if not calendar_provider:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return {'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        today = datetime.now().date()
        start_date = datetime.combine(today, datetime.min.time())
        end_date = start_date + timedelta(days=days)
        
        events = calendar_provider.get_events(start_date, end_date)
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        filtered_events, excluded_events = filter_personal_events(events)
        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
        logger.info(f"‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(excluded_events)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_personal_drive_provider()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        processed_events = 0
        processed_details = []
        
        for event in filtered_events:
            try:
                result = process_personal_event(event, drive_provider)
                processed_details.append(result)
                processed_events += 1
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.title} | {event.start.strftime('%H:%M')} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.attendees)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.title}: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        excluded_count = len(excluded_events)
        
        result = {
            'processed': processed_events,
            'excluded': excluded_count,
            'errors': len(events) - processed_events - excluded_count,
            'details': processed_details,
            'excluded_details': excluded_events
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return {'processed': 0, 'excluded': 0, 'errors': 1, 'details': []}

def process_personal_media_files(quality: str = 'medium') -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        logger.info("üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_personal_drive_provider()
        if not drive_provider:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = drive_provider.list_files()
        personal_folders = [f for f in folders if f.mime_type == 'application/vnd.google-apps.folder']
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ª–∏—á–Ω—ã—Ö –ø–∞–ø–æ–∫: {len(personal_folders)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        total_processed = 0
        total_synced = 0
        total_errors = 0
        media_details = []
        
        for folder in personal_folders[:5]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∞–ø–æ–∫
            try:
                folder_name = folder.name
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–∞–ø–∫–∏
                folder_path = drive_provider.get_local_path(folder.file_id) if hasattr(drive_provider, 'get_local_path') else None
                if folder_path:
                    processing_status = ProcessingStatus(folder_path)
                    logger.info(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–∞–ø–∫–∏: {folder_path}")
                else:
                    processing_status = None
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø–∞–ø–∫–∏: {folder_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                folder_files = drive_provider.list_files(folder.file_id)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                video_files = [f for f in folder_files if 'video' in f.mime_type and 'compressed' not in f.name.lower()]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
                if processing_status:
                    original_video_files = video_files.copy()
                    video_files = []
                    for video_file in original_video_files:
                        if not processing_status.is_file_processed(video_file.name, 'video_compression'):
                            video_files.append(video_file)
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
                            if video_file.name not in processing_status.status_data['files']:
                                processing_status.add_file(video_file.local_path, 'video')
                        else:
                            logger.info(f"‚è≠Ô∏è –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–ø–æ —Å—Ç–∞—Ç—É—Å—É): {video_file.name}")
                
                if video_files:
                    logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
                    folder_processed = 0
                    start_time = time.time()
                    
                    for video_file in video_files:
                        try:
                            logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ: {video_file.name}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–ª–æ–≤–æ "compressed"
                            if 'compressed' in video_file.name.lower():
                                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {video_file.name}")
                                folder_processed += 1
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            local_video_path = video_file.local_path
                            if not local_video_path or not os.path.exists(local_video_path):
                                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {video_file.name}")
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            output_dir = Path(local_video_path).parent
                            
                            # 1. –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
                            video_output_name = Path(video_file.name).stem + f"_compressed.mp4"
                            video_output_path = output_dir / video_output_name
                            
                            # 2. –ê—É–¥–∏–æ —Ñ–∞–π–ª
                            audio_output_name = Path(video_file.name).stem + f"_compressed.mp3"
                            audio_output_path = output_dir / audio_output_name
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã
                            if video_output_path.exists() and audio_output_path.exists():
                                logger.info(f"‚úÖ –§–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {video_output_name}, {audio_output_name}")
                                folder_processed += 1
                                continue
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –∏–∑ env.personal
                            video_compression = os.getenv('VIDEO_COMPRESSION', 'true').lower() == 'true'
                            video_quality = os.getenv('VIDEO_QUALITY', 'medium')
                            video_codec = os.getenv('VIDEO_CODEC', 'h264')
                            
                            logger.info(f"üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: compression={video_compression}, quality={video_quality}, codec={video_codec}")
                            
                            # 1. –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                            if video_compression:
                                logger.info(f"üé• –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ {video_file.name}...")
                                
                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                                if video_quality == 'low':
                                    crf = '28'  # –í—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'ultrafast'
                                elif video_quality == 'medium':
                                    crf = '23'  # –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'fast'
                                elif video_quality == 'high':
                                    crf = '18'  # –ù–∏–∑–∫–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'medium'
                                else:  # ultra
                                    crf = '15'  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                                    preset = 'slow'
                                
                                video_cmd = [
                                    'ffmpeg', '-i', local_video_path,
                                    '-c:v', 'libx264' if video_codec == 'h264' else 'libx265',
                                    '-preset', preset,
                                    '-crf', crf,
                                    '-c:a', 'aac',
                                    '-b:a', '128k',
                                    '-movflags', '+faststart',
                                    '-y',
                                    str(video_output_path)
                                ]
                                
                                logger.info(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–∂–∞—Ç–∏—è: {' '.join(video_cmd)}")
                                video_result = subprocess.run(video_cmd, capture_output=True, text=True, timeout=3600)
                                
                                if video_result.returncode == 0:
                                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                                    compressed_size = video_output_path.stat().st_size if video_output_path.exists() else 0
                                    original_size = Path(local_video_path).stat().st_size
                                    compression_ratio = original_size / compressed_size if compressed_size > 0 else 0
                                    
                                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {video_output_name}")
                                    logger.info(f"üìä –†–∞–∑–º–µ—Ä: {original_size / (1024**3):.1f} –ì–ë ‚Üí {compressed_size / (1024**3):.1f} –ì–ë (—Å–∂–∞—Ç–∏–µ –≤ {compression_ratio:.1f} —Ä–∞–∑)")
                                    
                                    # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                    if processing_status:
                                        processing_status.mark_file_processed(
                                            video_file.name, 
                                            'video_compression',
                                            [str(video_output_path)]
                                        )
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {video_result.stderr}")
                                    if processing_status:
                                        processing_status.mark_file_failed(
                                            video_file.name,
                                            'video_compression',
                                            video_result.stderr
                                        )
                                    video_output_path = None
                            else:
                                logger.info("‚è≠Ô∏è –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                                video_output_path = None
                            
                            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ
                            logger.info(f"üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {video_file.name} –≤ mp3...")
                            
                            audio_cmd = [
                                'ffmpeg', '-i', local_video_path,
                                '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
                                '-acodec', 'libmp3lame',
                                '-ab', '192k',  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                '-y',
                                str(audio_output_path)
                            ]
                            
                            audio_result = subprocess.run(audio_cmd, capture_output=True, text=True, timeout=1800)
                            
                            if audio_result.returncode == 0:
                                logger.info(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_output_name}")
                                folder_processed += 1
                                total_processed += 1
                                
                                # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø–µ –∞—É–¥–∏–æ
                                if processing_status:
                                    processing_status.mark_file_processed(
                                        video_file.name,
                                        'audio_extraction',
                                        [str(audio_output_path)]
                                    )
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ: {audio_result.stderr}")
                                
                                # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø–µ –∞—É–¥–∏–æ
                                if processing_status:
                                    processing_status.mark_file_failed(
                                        video_file.name,
                                        'audio_extraction',
                                        audio_result.stderr
                                    )
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {video_file.name}: {e}")
                    
                    processing_time = time.time() - start_time
                    
                    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if processing_status:
                        processing_status.print_summary()
                    
                    media_details.append({
                        "folder": folder_name,
                        "files_found": len(video_files),
                        "files_processed": folder_processed,
                        "processing_time": processing_time
                    })
                    
                    total_synced += len(video_files)
                else:
                    logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_name} –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder.name}: {e}")
                total_errors += 1
        
        result = {
            'processed': total_processed,
            'synced': total_synced,
            'cleanup': 0,  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            'errors': total_errors,
            'details': media_details
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {'processed': 0, 'synced': 0, 'cleanup': 0, 'errors': 1, 'details': []}


def process_personal_audio_files(max_folders: int = 5, output_format: str = 'json', cleanup: bool = False) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Whisper."""
    try:
        logger.info("üé§ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive
        drive_provider = get_personal_drive_provider()
        if not drive_provider:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return {'processed': 0, 'transcribed': 0, 'errors': 0, 'details': []}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        folders = drive_provider.list_files()
        personal_folders = [f for f in folders if f.mime_type == 'application/vnd.google-apps.folder']
        
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ª–∏—á–Ω—ã—Ö –ø–∞–ø–æ–∫: {len(personal_folders)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        try:
            audio_processor = AudioProcessor('env.personal')
            logger.info("‚úÖ –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
            return {'processed': 0, 'transcribed': 0, 'errors': 1, 'details': []}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        total_processed = 0
        total_transcribed = 0
        total_errors = 0
        audio_details = []
        
        for folder in personal_folders[:max_folders]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_folders –ø–∞–ø–æ–∫
            try:
                folder_name = folder.name
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
                folder_files = drive_provider.list_files(folder.file_id)
                audio_files = [f for f in folder_files if 'audio' in f.mime_type or f.name.endswith(('.mp3', '.wav', '.m4a'))]
                
                if audio_files:
                    logger.info(f"üé§ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
                    folder_processed = 0
                    folder_transcribed = 0
                    start_time = time.time()
                    
                    for audio_file in audio_files:
                        try:
                            logger.info(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ: {audio_file.name}")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            local_audio_path = audio_file.local_path
                            if not local_audio_path or not os.path.exists(local_audio_path):
                                logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {audio_file.name}")
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
                            output_dir = Path(local_audio_path).parent
                            transcript_name = Path(audio_file.name).stem + f"_transcript.{output_format}"
                            transcript_path = output_dir / transcript_name
                            
                            if transcript_path.exists():
                                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {transcript_name}")
                                folder_processed += 1
                                continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å Whisper
                            logger.info(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {audio_file.name}...")
                            result = audio_processor.process_audio_file(str(local_audio_path), output_format)
                            
                            if result and result.get('transcription'):
                                folder_processed += 1
                                folder_transcribed += 1
                                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(result['transcription'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                            else:
                                logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {audio_file.name}")
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ {audio_file.name}: {e}")
                            total_errors += 1
                            continue
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏
                    processing_time = time.time() - start_time
                    audio_details.append({
                        'folder': folder_name,
                        'files_found': len(audio_files),
                        'files_processed': folder_processed,
                        'files_transcribed': folder_transcribed,
                        'processing_time': processing_time
                    })
                    
                    total_processed += folder_processed
                    total_transcribed += folder_transcribed
                    
                else:
                    logger.info(f"üìÅ –í –ø–∞–ø–∫–µ {folder_name} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {folder_name}: {e}")
                total_errors += 1
                continue
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if cleanup:
            try:
                audio_processor.cleanup_temp_files()
                logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'processed': total_processed,
            'transcribed': total_transcribed,
            'errors': total_errors,
            'details': audio_details
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {'processed': 0, 'transcribed': 0, 'errors': 1, 'details': []}

def create_personal_telegram_report(calendar_stats: Dict[str, Any], media_stats: Dict[str, Any] = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è Telegram –æ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."""
    try:
        report = "üë§ *–û–¢–ß–ï–¢ –õ–ò–ß–ù–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê*\n"
        report += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        report += "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n"
        report += f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {calendar_stats['processed']}\n"
        report += f"   ‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ: {calendar_stats['excluded']}\n"
        report += f"   ‚ùå –û—à–∏–±–∫–∏: {calendar_stats['errors']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if calendar_stats['details']:
            report += "üìã *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:*\n"
            for detail in calendar_stats['details']:
                start_time = detail['start'].strftime('%H:%M')
                title = detail['title']
                attendees = detail['attendees_count']
                
                report += f"   üïê {start_time} | {title}\n"
                if attendees > 0:
                    report += f"      üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {attendees}\n"
                if detail.get('notion_page_id'):
                    report += f"      üìù Notion: {detail['notion_page_id'][:8]}...\n"
                if detail.get('drive_folder_created'):
                    report += f"      üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
                report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if media_stats:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if 'transcribed' in media_stats:
                # –ê—É–¥–∏–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                report += "üé§ *–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã:*\n"
                report += f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(media_stats['details'])}\n"
                report += f"   üìÑ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {media_stats['processed']}\n"
                report += f"   üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {media_stats['transcribed']}\n"
                report += f"   ‚ùå –û—à–∏–±–∫–∏: {media_stats['errors']}\n\n"
            else:
                # –ú–µ–¥–∏–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                report += "üé¨ *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:*\n"
                report += f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(media_stats['details'])}\n"
                report += f"   üìÑ –§–∞–π–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {media_stats['synced']}\n"
                report += f"   ‚ùå –û—à–∏–±–∫–∏: {media_stats['errors']}\n\n"
            
            if media_stats['details']:
                report += "üìÅ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:*\n"
                for detail in media_stats['details']:
                    report += f"   üìÇ {detail['folder']}\n"
                    report += f"      üé• –ù–∞–π–¥–µ–Ω–æ: {detail['files_found']}\n"
                    if 'files_transcribed' in detail:
                        # –ê—É–¥–∏–æ –¥–µ—Ç–∞–ª–∏
                        report += f"      üé§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {detail['files_processed']}\n"
                        report += f"      üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {detail['files_transcribed']}\n"
                    else:
                        # –ú–µ–¥–∏–∞ –¥–µ—Ç–∞–ª–∏
                        report += f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {detail['files_processed']}\n"
                    report += f"      ‚è±Ô∏è –í—Ä–µ–º—è: {detail['processing_time']:.1f}—Å\n\n"
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"

def send_personal_telegram_notification(report: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    try:
        from meeting_automation_personal_only import notify
        
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = notify(bot_token, chat_id, report)
        
        if success:
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
    parser.add_argument('command', choices=['prepare', 'media', 'audio', 'test'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--days', type=int, default=2,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--folders', type=int, default=5,
                       help='–ú–∞–∫—Å–∏–º—É–º –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--cleanup', action='store_true',
                       help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--verbose', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--config-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--calendar-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
    parser.add_argument('--drive-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ Google Drive')
    parser.add_argument('--quality', choices=['low', 'medium', 'high', 'ultra'], default='medium',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ')
    parser.add_argument('--output', choices=['json', 'txt', 'srt'], default='json',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("üîç –í–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_personal_environment():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    if args.command == 'prepare':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_stats = process_personal_calendar_events(args.days)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_personal_telegram_report(calendar_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if calendar_stats['processed'] > 0:
            send_personal_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'audio':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
        audio_stats = process_personal_audio_files(
            max_folders=args.folders,
            output_format=args.output,
            cleanup=args.cleanup
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_personal_telegram_report({'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}, audio_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if audio_stats['transcribed'] > 0 or audio_stats['processed'] > 0:
            send_personal_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'media':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_stats = process_personal_media_files(quality=args.quality)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = create_personal_telegram_report({'processed': 0, 'excluded': 0, 'errors': 0, 'details': []}, media_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if media_stats['synced'] > 0 or media_stats['processed'] > 0:
            send_personal_telegram_notification(report)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        else:
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç)")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print(report)
        
    elif args.command == 'test':
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        if args.config_only:
            logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            required_vars = [
                'GOOGLE_CREDENTIALS', 'PERSONAL_CALENDAR_ID', 'PERSONAL_DRIVE_PARENT_ID',
                'NOTION_TOKEN', 'NOTION_DATABASE_ID', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID'
            ]
            for var in required_vars:
                value = os.getenv(var)
                if value:
                    logger.info(f"‚úÖ {var}: {value[:8]}..." if len(value) > 8 else f"‚úÖ {var}: {value}")
                else:
                    logger.error(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        if args.calendar_only:
            logger.info("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            calendar_provider = get_personal_calendar_provider()
            if calendar_provider:
                events = calendar_provider.get_today_events()
                logger.info(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            else:
                logger.error("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if args.drive_only:
            logger.info("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ Google Drive...")
            drive_provider = get_personal_drive_provider()
            if drive_provider:
                files = drive_provider.list_files()
                logger.info(f"‚úÖ Google Drive: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
            else:
                logger.error("‚ùå Google Drive: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_provider = get_personal_calendar_provider()
        if calendar_provider:
            events = calendar_provider.get_today_events()
            logger.info(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        else:
            logger.error("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç Google Drive
        drive_provider = get_personal_drive_provider()
        if drive_provider:
            files = drive_provider.list_files()
            logger.info(f"‚úÖ Google Drive: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
        else:
            logger.error("‚ùå Google Drive: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
